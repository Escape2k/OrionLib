//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILSegmentGaugeCode_H_
#define CILSegmentGaugeCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPClassProperty *a_property, CTILSegmentGaugeDigits ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPClassProperty *a_property, CTILSegmentGaugeDigits ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentGaugeDigits ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentGaugeDigits ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPBaseComponent *a_control, CTILSegmentGaugeDigits ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( CLPBaseComponent *a_control, CTILSegmentGaugeDigits ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentGaugeDigits ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits::CTILSegmentGaugeDigits( const CTILSegmentGaugeDigits &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Base( GetInstance(), _T( "Base" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeDigits & CTILSegmentGaugeDigits::operator = ( const CTILSegmentGaugeDigits & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentGaugeDigits::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPClassProperty *a_property, CTILSignSegmentOffsets ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPClassProperty *a_property, CTILSignSegmentOffsets ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSignSegmentOffsets ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSignSegmentOffsets ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPBaseComponent *a_control, CTILSignSegmentOffsets ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( CLPBaseComponent *a_control, CTILSignSegmentOffsets ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSignSegmentOffsets ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::CTILSignSegmentOffsets( const CTILSignSegmentOffsets &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separation( *new CTULElementSize( GetInstance(), _T( "Separation" )))
{
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets::~CTILSignSegmentOffsets()
{
  delete &Separation;
}
//------------------------------------------------------------------------------
inline CTILSignSegmentOffsets & CTILSignSegmentOffsets::operator = ( const CTILSignSegmentOffsets & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSignSegmentOffsets::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPClassProperty *a_property, CTILSignSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPClassProperty *a_property, CTILSignSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSignSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSignSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPBaseComponent *a_control, CTILSignSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( CLPBaseComponent *a_control, CTILSignSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSignSegment ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::CTILSignSegment( const CTILSignSegment &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Offsets( *new CTILSignSegmentOffsets( GetInstance(), _T( "Offsets" ))),
  ShowPlus( GetInstance(), _T( "ShowPlus" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSignSegment::~CTILSignSegment()
{
  delete &Size;
  delete &Length;
  delete &Width;
  delete &Offsets;
}
//------------------------------------------------------------------------------
inline CTILSignSegment & CTILSignSegment::operator = ( const CTILSignSegment & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSignSegment::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicSegmentGauge::CTILBasicSegmentGauge() :
  Digits( *new CTILSegmentGaugeDigits( GetInstance(), _T( "Digits" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" ))),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) ),
  Sign( *new CTILSignSegment( GetInstance(), _T( "Sign" ))),
  Elements( *new CTLPGaugeComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicSegmentGauge::~CTILBasicSegmentGauge()
{
  delete &Digits;
  delete &Precision;
  delete &Sign;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicSegmentGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentGauge::CTILSegmentGauge( HWND hParent ) :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentGauge::CTILSegmentGauge() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentGauge" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentGauge" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentGaugeLayer::CTILSegmentGaugeLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeLayer::CTILSegmentGaugeLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentGaugeLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentGaugeLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentGaugeLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentGaugeLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentGaugeLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline void CTILBasicSegmentGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicSegmentGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentGaugeElement::CTILSegmentGaugeElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeElement::CTILSegmentGaugeElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentGaugeElement::~CTILSegmentGaugeElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSegmentGaugeElement::CTILExternalSegmentGaugeElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentGaugeElement::CTILExternalSegmentGaugeElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentGaugeElement::~CTILExternalSegmentGaugeElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSegmentGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSegmentGaugeMatrixLayer::CTILExternalSegmentGaugeMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentGaugeMatrixLayer::CTILExternalSegmentGaugeMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentGaugeMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentGaugeMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentGaugeMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentGaugeMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSegmentGaugeMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILSegmentGaugeCode_H_
//------------------------------------------------------------------------------
