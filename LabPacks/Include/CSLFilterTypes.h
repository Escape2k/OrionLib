//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CSLFilterTypes_H_
#define CSLFilterTypes_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------

enum CTSLExtendedWindowType { xwtRect, xwtBartlett, xwtBlackman, xwtHamming, xwtHanning, xwtKaiser, xwtCosSum, xwtFlatTop };
enum CTSLWindowType { wtRect, wtBartlett, wtBlackman, wtHamming, wtHanning, wtKaiser };
enum CTSLDelayMode { dmMilliseconds, dmSamples };
enum CTSLCombFeed { cfForward, cfBack };
enum CTSLLevelDetectMode { dmAbove, dmAboveEqual, dmBelow, dmBelowEqual };
enum CTSLFourierNormalization { fnNone, fnNormalize, fnNormalizeSqrt };
enum CTSLDisplayMarkerShape { msPoint, msCircle, msSquare, msDiamond, msPlus, msCross, msStar, msTriangleUp, msTriangleDown, msTriangleLeft, msTriangleRight, msHLine, msVLine };
enum CTSLCoordinateMode { cmLeftTop, cmLeftBottom, cmLeftCenter, cmRightTop, cmRightBottom, cmRightCenter, cmTopCenter, cmBottomCenter, cmCenter };



//------------------------------------------------------------------------------
class CTSLOffset : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<int> CX;
  CLPProperty<int> CY;

public:
  CTSLOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOffset( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOffset( CLPClassProperty *a_property, CTSLOffset ( CLPBaseClass::*a_getter )() );
  CTSLOffset( CLPClassProperty *a_property, CTSLOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOffset ) );
  CTSLOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOffset ) );
  CTSLOffset( CLPBaseComponent *a_control, CTSLOffset ( CLPBaseClass::*a_getter )() );
  CTSLOffset( CLPBaseComponent *a_control, CTSLOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOffset ) );
  CTSLOffset( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOffset( const CTSLOffset &other );

public:
  CTSLOffset & operator = ( const CTSLOffset & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOffset ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOffset Value );
};
//------------------------------------------------------------------------------
class CTSLDelayValue : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<__int64> Value;
  CLPEnumProperty<CTSLDelayMode> Mode;

public:
  CTSLDelayValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDelayValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDelayValue( CLPClassProperty *a_property, CTSLDelayValue ( CLPBaseClass::*a_getter )() );
  CTSLDelayValue( CLPClassProperty *a_property, CTSLDelayValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDelayValue ) );
  CTSLDelayValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDelayValue ) );
  CTSLDelayValue( CLPBaseComponent *a_control, CTSLDelayValue ( CLPBaseClass::*a_getter )() );
  CTSLDelayValue( CLPBaseComponent *a_control, CTSLDelayValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDelayValue ) );
  CTSLDelayValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDelayValue( const CTSLDelayValue &other );

public:
  CTSLDelayValue & operator = ( const CTSLDelayValue & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDelayValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDelayValue Value );
};
//------------------------------------------------------------------------------
class CTSLCoordinateOffset : public CTSLOffset
{
//DOM-IGNORE-BEGIN
  typedef CTSLOffset inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLCoordinateMode> CoordinateMode;

public:
  CTSLCoordinateOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLCoordinateOffset( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLCoordinateOffset( CLPClassProperty *a_property, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )() );
  CTSLCoordinateOffset( CLPClassProperty *a_property, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCoordinateOffset ) );
  CTSLCoordinateOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLCoordinateOffset ) );
  CTSLCoordinateOffset( CLPBaseComponent *a_control, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )() );
  CTSLCoordinateOffset( CLPBaseComponent *a_control, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCoordinateOffset ) );
  CTSLCoordinateOffset( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLCoordinateOffset( const CTSLCoordinateOffset &other );

public:
  CTSLCoordinateOffset & operator = ( const CTSLCoordinateOffset & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLCoordinateOffset ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLCoordinateOffset Value );
};
//------------------------------------------------------------------------------
#include <CSLFilterTypesCode.h>
//------------------------------------------------------------------------------
#endif   // CSLFilterTypes_H_
//------------------------------------------------------------------------------
