//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILBasicInstrument_H_
#define CILBasicInstrument_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILInstrumentTicksText : public CTULControlElement
{
//DOM-IGNORE-BEGIN
  typedef CTULControlElement inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULControlFont &Font;

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<float> Angle;

public:
  CTILInstrumentTicksText( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILInstrumentTicksText( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILInstrumentTicksText( CLPClassProperty *a_property, CTILInstrumentTicksText ( CLPBaseClass::*a_getter )() );
  CTILInstrumentTicksText( CLPClassProperty *a_property, CTILInstrumentTicksText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentTicksText ) );
  CTILInstrumentTicksText( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentTicksText ) );
  CTILInstrumentTicksText( CLPBaseComponent *a_control, CTILInstrumentTicksText ( CLPBaseClass::*a_getter )() );
  CTILInstrumentTicksText( CLPBaseComponent *a_control, CTILInstrumentTicksText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentTicksText ) );
  CTILInstrumentTicksText( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILInstrumentTicksText( const CTILInstrumentTicksText &other );
  virtual ~CTILInstrumentTicksText();

public:
  CTILInstrumentTicksText & operator = ( const CTILInstrumentTicksText & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILInstrumentTicksText ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILInstrumentTicksText Value );
};
//------------------------------------------------------------------------------
#include <CILBasicInstrumentCode.h>
//------------------------------------------------------------------------------
#endif   // CILBasicInstrument_H_
//------------------------------------------------------------------------------
