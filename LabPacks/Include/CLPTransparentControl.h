//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CLPTransparentControl_H_
#define CLPTransparentControl_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
#ifndef CLPControlDrawLayers_H_
  #include <CLPControlDrawLayers.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------

enum CTULBevelStyle { bvsNone, bvsRaised, bvsLowered };



//------------------------------------------------------------------------------
class CTLPControlProperty : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPControlProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPControlProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPControlProperty( CLPClassProperty *a_property, CTLPControlProperty ( CLPBaseClass::*a_getter )() );
  CTLPControlProperty( CLPClassProperty *a_property, CTLPControlProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPControlProperty ) );
  CTLPControlProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPControlProperty ) );
  CTLPControlProperty( CLPBaseComponent *a_control, CTLPControlProperty ( CLPBaseClass::*a_getter )() );
  CTLPControlProperty( CLPBaseComponent *a_control, CTLPControlProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPControlProperty ) );
  CTLPControlProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPControlProperty( const CTLPControlProperty &other );

public:
  CTLPControlProperty & operator = ( const CTLPControlProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPControlProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPControlProperty Value );
};
//------------------------------------------------------------------------------
class CTLPTransparentControl : public CTLPControlDrawLayer
{
//DOM-IGNORE-BEGIN
  typedef CTLPControlDrawLayer inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
#include <CLPTransparentControlCode.h>
//------------------------------------------------------------------------------
#endif   // CLPTransparentControl_H_
//------------------------------------------------------------------------------
