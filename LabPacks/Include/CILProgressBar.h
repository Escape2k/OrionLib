//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILProgressBar_H_
#define CILProgressBar_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------

enum CTILProgressBarGaugeKind { bkFlat, bkMetal, bkGlass };



//------------------------------------------------------------------------------
class CTILProgressBarBlock : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Size;
  class CTULElementSize &Gap;
  class CTULElementSize &EdgeRadius;

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPProperty<bool> Monolithic;
  CLPProperty<bool> Monochrome;

public:
  CTILProgressBarBlock( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILProgressBarBlock( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILProgressBarBlock( CLPClassProperty *a_property, CTILProgressBarBlock ( CLPBaseClass::*a_getter )() );
  CTILProgressBarBlock( CLPClassProperty *a_property, CTILProgressBarBlock ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBlock ) );
  CTILProgressBarBlock( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarBlock ) );
  CTILProgressBarBlock( CLPBaseComponent *a_control, CTILProgressBarBlock ( CLPBaseClass::*a_getter )() );
  CTILProgressBarBlock( CLPBaseComponent *a_control, CTILProgressBarBlock ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBlock ) );
  CTILProgressBarBlock( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILProgressBarBlock( const CTILProgressBarBlock &other );
  virtual ~CTILProgressBarBlock();

public:
  CTILProgressBarBlock & operator = ( const CTILProgressBarBlock & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILProgressBarBlock ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILProgressBarBlock Value );
};
//------------------------------------------------------------------------------
class CTILProgressBarGaugeBackground : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> Color;
  CLPProperty<CTGPColor> BlockColor;

public:
  CTILProgressBarGaugeBackground( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILProgressBarGaugeBackground( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILProgressBarGaugeBackground( CLPClassProperty *a_property, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )() );
  CTILProgressBarGaugeBackground( CLPClassProperty *a_property, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGaugeBackground ) );
  CTILProgressBarGaugeBackground( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarGaugeBackground ) );
  CTILProgressBarGaugeBackground( CLPBaseComponent *a_control, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )() );
  CTILProgressBarGaugeBackground( CLPBaseComponent *a_control, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGaugeBackground ) );
  CTILProgressBarGaugeBackground( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILProgressBarGaugeBackground( const CTILProgressBarGaugeBackground &other );

public:
  CTILProgressBarGaugeBackground & operator = ( const CTILProgressBarGaugeBackground & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILProgressBarGaugeBackground ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILProgressBarGaugeBackground Value );
};
//------------------------------------------------------------------------------
class CTILProgressBarGauge : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILProgressBarBlock &Blocks;
  class CTULElementSize &EdgeRadius;
  class CTULColorItems &Colors;
  class CTILProgressBarGaugeBackground &Background;

public:    // Properties
  CLPEnumProperty<CTILProgressBarGaugeKind> Kind;

public:
  CTILProgressBarGauge( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILProgressBarGauge( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILProgressBarGauge( CLPClassProperty *a_property, CTILProgressBarGauge ( CLPBaseClass::*a_getter )() );
  CTILProgressBarGauge( CLPClassProperty *a_property, CTILProgressBarGauge ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGauge ) );
  CTILProgressBarGauge( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarGauge ) );
  CTILProgressBarGauge( CLPBaseComponent *a_control, CTILProgressBarGauge ( CLPBaseClass::*a_getter )() );
  CTILProgressBarGauge( CLPBaseComponent *a_control, CTILProgressBarGauge ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGauge ) );
  CTILProgressBarGauge( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILProgressBarGauge( const CTILProgressBarGauge &other );
  virtual ~CTILProgressBarGauge();

public:
  CTILProgressBarGauge & operator = ( const CTILProgressBarGauge & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILProgressBarGauge ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILProgressBarGauge Value );
};
//------------------------------------------------------------------------------
class CTILProgressBarBorder : public CTULBasicControlBorder
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlBorder inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Gap;
  class CTULElementSize &CornerRadius;

public:
  CTILProgressBarBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILProgressBarBorder( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILProgressBarBorder( CLPClassProperty *a_property, CTILProgressBarBorder ( CLPBaseClass::*a_getter )() );
  CTILProgressBarBorder( CLPClassProperty *a_property, CTILProgressBarBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBorder ) );
  CTILProgressBarBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarBorder ) );
  CTILProgressBarBorder( CLPBaseComponent *a_control, CTILProgressBarBorder ( CLPBaseClass::*a_getter )() );
  CTILProgressBarBorder( CLPBaseComponent *a_control, CTILProgressBarBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBorder ) );
  CTILProgressBarBorder( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILProgressBarBorder( const CTILProgressBarBorder &other );
  virtual ~CTILProgressBarBorder();

public:
  CTILProgressBarBorder & operator = ( const CTILProgressBarBorder & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILProgressBarBorder ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILProgressBarBorder Value );
};
//------------------------------------------------------------------------------
class CTILBasicProgressBar : public CTILBasicMinMaxInstrument
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicMinMaxInstrument inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTILProgressBarBorder &Border;
  class CTILProgressBarGauge &Gauge;
  class CTILRotation &Rotation;
  class CTLPGaugeComponentElements &Elements;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicProgressBar();
  virtual ~CTILBasicProgressBar();
};
//------------------------------------------------------------------------------
class CTILExternalProgressBar : public CTILBasicProgressBar
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicProgressBar inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalProgressBar();
};
//------------------------------------------------------------------------------
class CTILProgressBar : public CTILExternalProgressBar
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalProgressBar inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULControlBackground &Background;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILProgressBar( HWND hParent );
  CTILProgressBar();
  virtual ~CTILProgressBar();
};
//------------------------------------------------------------------------------
class CTILProgressBarLayer : public CTILExternalProgressBar
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalProgressBar inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILProgressBarLayer( HWND hParent );
  CTILProgressBarLayer();
};
//------------------------------------------------------------------------------
class CTILBasicProgressBarElement : public CTILBasicProgressBar
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicProgressBar inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILProgressBarElement : public CTILBasicProgressBarElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicProgressBarElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILProgressBarElement( HWND hParent );
  CTILProgressBarElement();
  virtual ~CTILProgressBarElement();
};
//------------------------------------------------------------------------------
class CTILExternalProgressBarElement : public CTILProgressBarElement
{
//DOM-IGNORE-BEGIN
  typedef CTILProgressBarElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalProgressBarElement( HWND hParent );
  CTILExternalProgressBarElement();
};
//------------------------------------------------------------------------------
class CTILExternalProgressBarMatrixLayer : public CTILExternalProgressBarElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalProgressBarElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalProgressBarMatrixLayer( HWND hParent );
  CTILExternalProgressBarMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILProgressBarCode.h>
//------------------------------------------------------------------------------
#endif   // CILProgressBar_H_
//------------------------------------------------------------------------------
