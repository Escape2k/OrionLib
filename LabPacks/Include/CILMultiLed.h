//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILMultiLed_H_
#define CILMultiLed_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CILLed_H_
  #include <CILLed.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILLedState : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // OpenWire Pins

public:    // Properties
  CLPProperty<CTString> Name;
  CLPProperty<CTGPColor> Color;
  CLPProperty<bool> Value;

public:
  CTILLedState( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILLedState( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILLedState( CLPClassProperty *a_property, CTILLedState ( CLPBaseClass::*a_getter )() );
  CTILLedState( CLPClassProperty *a_property, CTILLedState ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLedState ) );
  CTILLedState( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLedState ) );
  CTILLedState( CLPBaseComponent *a_control, CTILLedState ( CLPBaseClass::*a_getter )() );
  CTILLedState( CLPBaseComponent *a_control, CTILLedState ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLedState ) );
  CTILLedState( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILLedState( const CTILLedState &other );

public:
  CTILLedState & operator = ( const CTILLedState & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILLedState ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILLedState Value );
};
//------------------------------------------------------------------------------
class CTILLedStates : public CLPCollectionProperty<CTILLedState>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTILLedState> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTILLedStates( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILLedStates( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILLedStates( CLPClassProperty *a_property, CTILLedStates ( CLPBaseClass::*a_getter )() );
  CTILLedStates( CLPClassProperty *a_property, CTILLedStates ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLedStates ) );
  CTILLedStates( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLedStates ) );
  CTILLedStates( CLPBaseComponent *a_control, CTILLedStates ( CLPBaseClass::*a_getter )() );
  CTILLedStates( CLPBaseComponent *a_control, CTILLedStates ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLedStates ) );
  CTILLedStates( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILLedStates( const CTILLedStates &other );

public:
  CTILLedStates & operator = ( const CTILLedStates & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILLedStates ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILLedStates Value );
};
//------------------------------------------------------------------------------
class CTILExternalMultiLed : public CTILBasicInactiveColorLed
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicInactiveColorLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWPinListProperty InputPins;

public:    // Class Properties
  class CTILLedStates &States;
  class CTLPComponentElements &Elements;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalMultiLed();
  virtual ~CTILExternalMultiLed();
};
//------------------------------------------------------------------------------
class CTILMultiLed : public CTILExternalMultiLed
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalMultiLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULControlBackground &Background;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILMultiLed( HWND hParent );
  CTILMultiLed();
  virtual ~CTILMultiLed();
};
//------------------------------------------------------------------------------
class CTILMultiLedLayer : public CTILExternalMultiLed
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalMultiLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILMultiLedLayer( HWND hParent );
  CTILMultiLedLayer();
};
//------------------------------------------------------------------------------
class CTILExternalMultiLedElement : public CTILExternalMultiLed
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalMultiLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalMultiLedElement( HWND hParent );
  CTILExternalMultiLedElement();
  virtual ~CTILExternalMultiLedElement();
};
//------------------------------------------------------------------------------
class CTILExternalMultiLedMatrixLayer : public CTILExternalMultiLedElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalMultiLedElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalMultiLedMatrixLayer( HWND hParent );
  CTILExternalMultiLedMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILMultiLedCode.h>
//------------------------------------------------------------------------------
#endif   // CILMultiLed_H_
//------------------------------------------------------------------------------
