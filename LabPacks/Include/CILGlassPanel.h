//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILGlassPanel_H_
#define CILGlassPanel_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILPanelProperty : public CTLPControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTLPControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTILPanelProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILPanelProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILPanelProperty( CLPClassProperty *a_property, CTILPanelProperty ( CLPBaseClass::*a_getter )() );
  CTILPanelProperty( CLPClassProperty *a_property, CTILPanelProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelProperty ) );
  CTILPanelProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILPanelProperty ) );
  CTILPanelProperty( CLPBaseComponent *a_control, CTILPanelProperty ( CLPBaseClass::*a_getter )() );
  CTILPanelProperty( CLPBaseComponent *a_control, CTILPanelProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelProperty ) );
  CTILPanelProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILPanelProperty( const CTILPanelProperty &other );

public:
  CTILPanelProperty & operator = ( const CTILPanelProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILPanelProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILPanelProperty Value );
};
//------------------------------------------------------------------------------
class CTILPanelBevel : public CTILPanelProperty
{
//DOM-IGNORE-BEGIN
  typedef CTILPanelProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Width;

public:    // Properties
  CLPEnumProperty<CTULBevelStyle> Style;

public:
  CTILPanelBevel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILPanelBevel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILPanelBevel( CLPClassProperty *a_property, CTILPanelBevel ( CLPBaseClass::*a_getter )() );
  CTILPanelBevel( CLPClassProperty *a_property, CTILPanelBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelBevel ) );
  CTILPanelBevel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILPanelBevel ) );
  CTILPanelBevel( CLPBaseComponent *a_control, CTILPanelBevel ( CLPBaseClass::*a_getter )() );
  CTILPanelBevel( CLPBaseComponent *a_control, CTILPanelBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelBevel ) );
  CTILPanelBevel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILPanelBevel( const CTILPanelBevel &other );
  virtual ~CTILPanelBevel();

public:
  CTILPanelBevel & operator = ( const CTILPanelBevel & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILPanelBevel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILPanelBevel Value );
};
//------------------------------------------------------------------------------
class CTILPanelInnerBevel : public CTILPanelBevel
{
//DOM-IGNORE-BEGIN
  typedef CTILPanelBevel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTULBevelStyle> Style;

public:
  CTILPanelInnerBevel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILPanelInnerBevel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILPanelInnerBevel( CLPClassProperty *a_property, CTILPanelInnerBevel ( CLPBaseClass::*a_getter )() );
  CTILPanelInnerBevel( CLPClassProperty *a_property, CTILPanelInnerBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelInnerBevel ) );
  CTILPanelInnerBevel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILPanelInnerBevel ) );
  CTILPanelInnerBevel( CLPBaseComponent *a_control, CTILPanelInnerBevel ( CLPBaseClass::*a_getter )() );
  CTILPanelInnerBevel( CLPBaseComponent *a_control, CTILPanelInnerBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelInnerBevel ) );
  CTILPanelInnerBevel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILPanelInnerBevel( const CTILPanelInnerBevel &other );

public:
  CTILPanelInnerBevel & operator = ( const CTILPanelInnerBevel & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILPanelInnerBevel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILPanelInnerBevel Value );
};
//------------------------------------------------------------------------------
class CTILPanelBorder : public CTILPanelProperty
{
//DOM-IGNORE-BEGIN
  typedef CTILPanelProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILPanelBevel &BevelOuter;
  class CTILPanelInnerBevel &BevelInner;
  class CTULElementSize &Width;
  class CTULElementSize &CornerRadius;

public:    // Properties
  CLPEnumProperty<CTULBorderShape> Shape;
  CLPProperty<CTGPColor> Color;

public:
  CTILPanelBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILPanelBorder( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILPanelBorder( CLPClassProperty *a_property, CTILPanelBorder ( CLPBaseClass::*a_getter )() );
  CTILPanelBorder( CLPClassProperty *a_property, CTILPanelBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelBorder ) );
  CTILPanelBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILPanelBorder ) );
  CTILPanelBorder( CLPBaseComponent *a_control, CTILPanelBorder ( CLPBaseClass::*a_getter )() );
  CTILPanelBorder( CLPBaseComponent *a_control, CTILPanelBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPanelBorder ) );
  CTILPanelBorder( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILPanelBorder( const CTILPanelBorder &other );
  virtual ~CTILPanelBorder();

public:
  CTILPanelBorder & operator = ( const CTILPanelBorder & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILPanelBorder ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILPanelBorder Value );
};
//------------------------------------------------------------------------------
class CTILGlassPanel : public CTULBasicControl
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTILPanelBorder &Border;
  class CTILGlass &Glass;
  class CTLPComponentElements &Elements;

public:    // Properties
  CLPProperty<CTColor> Color;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILGlassPanel( HWND hParent );
  CTILGlassPanel();
  virtual ~CTILGlassPanel();
};
//------------------------------------------------------------------------------
class CTILGlassPanelLayer : public CTILGlassPanel
{
//DOM-IGNORE-BEGIN
  typedef CTILGlassPanel inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILGlassPanelLayer( HWND hParent );
  CTILGlassPanelLayer();
};
//------------------------------------------------------------------------------
class CTILGlassPanelElement : public CTILGlassPanel
{
//DOM-IGNORE-BEGIN
  typedef CTILGlassPanel inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILGlassPanelElement( HWND hParent );
  CTILGlassPanelElement();
  virtual ~CTILGlassPanelElement();
};
//------------------------------------------------------------------------------
class CTILGlassPanelMatrixLayer : public CTILGlassPanelElement
{
//DOM-IGNORE-BEGIN
  typedef CTILGlassPanelElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILGlassPanelMatrixLayer( HWND hParent );
  CTILGlassPanelMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILGlassPanelCode.h>
//------------------------------------------------------------------------------
#endif   // CILGlassPanel_H_
//------------------------------------------------------------------------------
