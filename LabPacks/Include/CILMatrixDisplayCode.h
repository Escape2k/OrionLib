//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILMatrixDisplayCode_H_
#define CILMatrixDisplayCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPClassProperty *a_property, CTILMatrixSegmnt ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPClassProperty *a_property, CTILMatrixSegmnt ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILMatrixSegmnt ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILMatrixSegmnt ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPBaseComponent *a_control, CTILMatrixSegmnt ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( CLPBaseComponent *a_control, CTILMatrixSegmnt ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILMatrixSegmnt ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::CTILMatrixSegmnt( const CTILMatrixSegmnt &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Proportional( GetInstance(), _T( "Proportional" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" ))),
  ShowReflection( GetInstance(), _T( "ShowReflection" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt::~CTILMatrixSegmnt()
{
  delete &Size;
  delete &CornerRadius;
}
//------------------------------------------------------------------------------
inline CTILMatrixSegmnt & CTILMatrixSegmnt::operator = ( const CTILMatrixSegmnt & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILMatrixSegmnt::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILMatrixDisplay::CTILMatrixDisplay( HWND hParent ) :
  RowInputPin( GetInstance(), _T( "RowInputPin" ) ),
  ColInputPin( GetInstance(), _T( "ColInputPin" ) ),
  InputPins( GetInstance(), _T( "InputPins" ) ),
  Rows( GetInstance(), _T( "Rows" ) ),
  Cols( GetInstance(), _T( "Cols" ) ),
  Row( GetInstance(), _T( "Row" ) ),
  Col( GetInstance(), _T( "Col" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Segmnts( *new CTILMatrixSegmnt( GetInstance(), _T( "Segmnts" ))),
  Layers( *new CTLPMatrixComponentElements( GetInstance(), _T( "Layers" ))),
  Pixels( (CTILMatrixDisplay *)GetInstance(), &CTILMatrixDisplay::GetPixel, &CTILMatrixDisplay::SetPixel)
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILMatrixDisplay::CTILMatrixDisplay() :
  RowInputPin( GetInstance(), _T( "RowInputPin" ) ),
  ColInputPin( GetInstance(), _T( "ColInputPin" ) ),
  InputPins( GetInstance(), _T( "InputPins" ) ),
  Rows( GetInstance(), _T( "Rows" ) ),
  Cols( GetInstance(), _T( "Cols" ) ),
  Row( GetInstance(), _T( "Row" ) ),
  Col( GetInstance(), _T( "Col" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Segmnts( *new CTILMatrixSegmnt( GetInstance(), _T( "Segmnts" ))),
  Layers( *new CTLPMatrixComponentElements( GetInstance(), _T( "Layers" ))),
  Pixels( (CTILMatrixDisplay *)GetInstance(), &CTILMatrixDisplay::GetPixel, &CTILMatrixDisplay::SetPixel)
{
}
//------------------------------------------------------------------------------
inline void CTILMatrixDisplay::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILMatrixDisplay" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILMatrixDisplay::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILMatrixDisplay" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILMatrixDisplay::~CTILMatrixDisplay()
{
  delete &Segmnts;
  delete &Layers;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILMatrixDisplay::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTGPColor CTILMatrixDisplay::GetPixel( int ACol, int ARow )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilmatrixdisplay@TILMatrixDisplay@GetPixel$qqrii" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTGPColor __0_RtnValue_ = (CTGPColor)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = ACol;
    int __1_Param2 = ARow;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  ecx
      pop  edx
      pop  eax
      }
    }

  return (CTGPColor)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILMatrixDisplay::SetPixel( int ACol, int ARow, CTGPColor AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilmatrixdisplay@TILMatrixDisplay@SetPixel$qqriiui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = ACol;
    int __1_Param2 = ARow;
    CTGPColor __1_Param3 = AValue;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILMatrixDisplayLayer::CTILMatrixDisplayLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILMatrixDisplayLayer::CTILMatrixDisplayLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILMatrixDisplayLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILMatrixDisplayLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILMatrixDisplayLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILMatrixDisplayLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILMatrixDisplayLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalMatrixDisplayElement::CTILExternalMatrixDisplayElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalMatrixDisplayElement::CTILExternalMatrixDisplayElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILExternalMatrixDisplayElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalMatrixDisplayElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalMatrixDisplayElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalMatrixDisplayElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalMatrixDisplayElement::~CTILExternalMatrixDisplayElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalMatrixDisplayElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalMatrixDisplayMatrixLayer::CTILExternalMatrixDisplayMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalMatrixDisplayMatrixLayer::CTILExternalMatrixDisplayMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalMatrixDisplayMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalMatrixDisplayMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalMatrixDisplayMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalMatrixDisplayMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalMatrixDisplayMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILTextMatrixLayer::CTILTextMatrixLayer() :
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  AntiAlias( GetInstance(), _T( "AntiAlias" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILTextMatrixLayer" ) );
}
//------------------------------------------------------------------------------
inline CTILTextMatrixLayer::~CTILTextMatrixLayer()
{
  delete &Font;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILTextMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILMatrixDisplayCode_H_
//------------------------------------------------------------------------------
