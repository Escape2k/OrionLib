//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CULBasicControl_H_
#define CULBasicControl_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
#ifndef CLPControl_H_
  #include <CLPControl.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
//------------------------------------------------------------------------------

enum CTULBorderShape { gbsEllipse, gbsRectangle, gbsRoundRectangle, gbsDiamond, gbsRoundDiamond };



//------------------------------------------------------------------------------
class CTULBasicControl : public CTLPTransparentControl
{
//DOM-IGNORE-BEGIN
  typedef CTLPTransparentControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Events
//  void __stdcall OnKeyDown(VCLHANDLE Sender, unsigned short & Key, CTShiftState Shift);
  CLPEventProperty_3<0, void, VCLHANDLE, unsigned short &, CTShiftState> OnKeyDown;
//  void __stdcall OnKeyPress(VCLHANDLE Sender, char & Key);
  CLPEventProperty_2<0, void, VCLHANDLE, char &> OnKeyPress;
//  void __stdcall OnKeyUp(VCLHANDLE Sender, unsigned short & Key, CTShiftState Shift);
  CLPEventProperty_3<0, void, VCLHANDLE, unsigned short &, CTShiftState> OnKeyUp;
//  void __stdcall OnClick(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnClick;
//  void __stdcall OnDblClick(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnDblClick;
//  void __stdcall OnMouseDown(VCLHANDLE Sender, CTMouseButton Button, CTShiftState Shift, int X, int Y);
  CLPEventProperty_5<192, void, VCLHANDLE, CTMouseButton, CTShiftState, int, int> OnMouseDown;
//  void __stdcall OnMouseMove(VCLHANDLE Sender, CTShiftState Shift, int X, int Y);
  CLPEventProperty_4<0, void, VCLHANDLE, CTShiftState, int, int> OnMouseMove;
//  void __stdcall OnMouseUp(VCLHANDLE Sender, CTMouseButton Button, CTShiftState Shift, int X, int Y);
  CLPEventProperty_5<192, void, VCLHANDLE, CTMouseButton, CTShiftState, int, int> OnMouseUp;

public:    // Properties
  CLPProperty<bool> AntiAlias;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTULBasicControl();
};
//------------------------------------------------------------------------------
class CTULControlBackground : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTULControlBackground,CTColor> Color;

protected:
  CTColor GetColor();
  void SetColor( CTColor AValue );

public:
  CTULControlBackground( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlBackground( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlBackground( CLPClassProperty *a_property, CTULControlBackground ( CLPBaseClass::*a_getter )() );
  CTULControlBackground( CLPClassProperty *a_property, CTULControlBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBackground ) );
  CTULControlBackground( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlBackground ) );
  CTULControlBackground( CLPBaseComponent *a_control, CTULControlBackground ( CLPBaseClass::*a_getter )() );
  CTULControlBackground( CLPBaseComponent *a_control, CTULControlBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBackground ) );
  CTULControlBackground( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlBackground( const CTULControlBackground &other );

public:
  CTULControlBackground & operator = ( const CTULControlBackground & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlBackground ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlBackground Value );
};
//------------------------------------------------------------------------------
class CTULBasicColorControl : public CTULBasicControl
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPProperty<CTGPColor> Color;
  CLPProperty<bool> Visible;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTULBasicColorControl();
};
//------------------------------------------------------------------------------
class CTULColorItem : public CTLPGPColorItem
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPColorItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Discrete;
  CLPProperty<float> Range;

public:
  CTULColorItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULColorItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULColorItem( CLPClassProperty *a_property, CTULColorItem ( CLPBaseClass::*a_getter )() );
  CTULColorItem( CLPClassProperty *a_property, CTULColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItem ) );
  CTULColorItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULColorItem ) );
  CTULColorItem( CLPBaseComponent *a_control, CTULColorItem ( CLPBaseClass::*a_getter )() );
  CTULColorItem( CLPBaseComponent *a_control, CTULColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItem ) );
  CTULColorItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULColorItem( const CTULColorItem &other );

public:
  CTULColorItem & operator = ( const CTULColorItem & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULColorItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULColorItem Value );
};
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> class CTULBasicColorItems : public CTLPGPBasicColorItems<_TMP_TYPE_>
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPBasicColorItems<_TMP_TYPE_> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTULBasicColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULBasicColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULBasicColorItems( CLPClassProperty *a_property, CTULBasicColorItems ( CLPBaseClass::*a_getter )() );
  CTULBasicColorItems( CLPClassProperty *a_property, CTULBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicColorItems ) );
  CTULBasicColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULBasicColorItems ) );
  CTULBasicColorItems( CLPBaseComponent *a_control, CTULBasicColorItems ( CLPBaseClass::*a_getter )() );
  CTULBasicColorItems( CLPBaseComponent *a_control, CTULBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicColorItems ) );
  CTULBasicColorItems( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULBasicColorItems( const CTULBasicColorItems &other );

public:
  CTULBasicColorItems & operator = ( const CTULBasicColorItems & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULBasicColorItems ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULBasicColorItems Value );
};
//------------------------------------------------------------------------------
class CTULColorItems : public CTULBasicColorItems<CTULColorItem>
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicColorItems<CTULColorItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTULColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULColorItems( CLPClassProperty *a_property, CTULColorItems ( CLPBaseClass::*a_getter )() );
  CTULColorItems( CLPClassProperty *a_property, CTULColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItems ) );
  CTULColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULColorItems ) );
  CTULColorItems( CLPBaseComponent *a_control, CTULColorItems ( CLPBaseClass::*a_getter )() );
  CTULColorItems( CLPBaseComponent *a_control, CTULColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItems ) );
  CTULColorItems( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULColorItems( const CTULColorItems &other );

public:
  CTULColorItems & operator = ( const CTULColorItems & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULColorItems ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULColorItems Value );
};
//------------------------------------------------------------------------------
class CTULBasicControlProperty : public CTLPControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTLPControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTULBasicControlProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULBasicControlProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULBasicControlProperty( CLPClassProperty *a_property, CTULBasicControlProperty ( CLPBaseClass::*a_getter )() );
  CTULBasicControlProperty( CLPClassProperty *a_property, CTULBasicControlProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlProperty ) );
  CTULBasicControlProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULBasicControlProperty ) );
  CTULBasicControlProperty( CLPBaseComponent *a_control, CTULBasicControlProperty ( CLPBaseClass::*a_getter )() );
  CTULBasicControlProperty( CLPBaseComponent *a_control, CTULBasicControlProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlProperty ) );
  CTULBasicControlProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULBasicControlProperty( const CTULBasicControlProperty &other );

public:
  CTULBasicControlProperty & operator = ( const CTULBasicControlProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULBasicControlProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULBasicControlProperty Value );
};
//------------------------------------------------------------------------------
class CTULElementSize : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<float> Value;
  CLPProperty<bool> Proportional;

public:
  float Get( float AValue );

public:
  CTULElementSize( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULElementSize( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULElementSize( CLPClassProperty *a_property, CTULElementSize ( CLPBaseClass::*a_getter )() );
  CTULElementSize( CLPClassProperty *a_property, CTULElementSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementSize ) );
  CTULElementSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElementSize ) );
  CTULElementSize( CLPBaseComponent *a_control, CTULElementSize ( CLPBaseClass::*a_getter )() );
  CTULElementSize( CLPBaseComponent *a_control, CTULElementSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementSize ) );
  CTULElementSize( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULElementSize( const CTULElementSize &other );

public:
  CTULElementSize & operator = ( const CTULElementSize & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULElementSize ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULElementSize Value );
};
//------------------------------------------------------------------------------
class CTULElementOffsetSize : public CTULElementSize
{
//DOM-IGNORE-BEGIN
  typedef CTULElementSize inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTULElementOffsetSize( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULElementOffsetSize( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULElementOffsetSize( CLPClassProperty *a_property, CTULElementOffsetSize ( CLPBaseClass::*a_getter )() );
  CTULElementOffsetSize( CLPClassProperty *a_property, CTULElementOffsetSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsetSize ) );
  CTULElementOffsetSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElementOffsetSize ) );
  CTULElementOffsetSize( CLPBaseComponent *a_control, CTULElementOffsetSize ( CLPBaseClass::*a_getter )() );
  CTULElementOffsetSize( CLPBaseComponent *a_control, CTULElementOffsetSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsetSize ) );
  CTULElementOffsetSize( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULElementOffsetSize( const CTULElementOffsetSize &other );

public:
  CTULElementOffsetSize & operator = ( const CTULElementOffsetSize & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULElementOffsetSize ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULElementOffsetSize Value );
};
//------------------------------------------------------------------------------
class CTULElement2DSize : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Width;
  class CTULElementSize &Height;

public:
  CTULElement2DSize( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULElement2DSize( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULElement2DSize( CLPClassProperty *a_property, CTULElement2DSize ( CLPBaseClass::*a_getter )() );
  CTULElement2DSize( CLPClassProperty *a_property, CTULElement2DSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElement2DSize ) );
  CTULElement2DSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElement2DSize ) );
  CTULElement2DSize( CLPBaseComponent *a_control, CTULElement2DSize ( CLPBaseClass::*a_getter )() );
  CTULElement2DSize( CLPBaseComponent *a_control, CTULElement2DSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElement2DSize ) );
  CTULElement2DSize( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULElement2DSize( const CTULElement2DSize &other );
  virtual ~CTULElement2DSize();

public:
  CTULElement2DSize & operator = ( const CTULElement2DSize & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULElement2DSize ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULElement2DSize Value );
};
//------------------------------------------------------------------------------
class CTULControlFont : public CTLPGPSimpleFont
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPSimpleFont inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Size;

public:
  CTULControlFont( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlFont( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlFont( CLPClassProperty *a_property, CTULControlFont ( CLPBaseClass::*a_getter )() );
  CTULControlFont( CLPClassProperty *a_property, CTULControlFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlFont ) );
  CTULControlFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlFont ) );
  CTULControlFont( CLPBaseComponent *a_control, CTULControlFont ( CLPBaseClass::*a_getter )() );
  CTULControlFont( CLPBaseComponent *a_control, CTULControlFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlFont ) );
  CTULControlFont( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlFont( const CTULControlFont &other );
  virtual ~CTULControlFont();

public:
  CTULControlFont & operator = ( const CTULControlFont & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlFont ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlFont Value );
};
//------------------------------------------------------------------------------
class CTULControlText : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULControlFont &Font;

public:
  CTULControlText( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlText( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlText( CLPClassProperty *a_property, CTULControlText ( CLPBaseClass::*a_getter )() );
  CTULControlText( CLPClassProperty *a_property, CTULControlText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlText ) );
  CTULControlText( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlText ) );
  CTULControlText( CLPBaseComponent *a_control, CTULControlText ( CLPBaseClass::*a_getter )() );
  CTULControlText( CLPBaseComponent *a_control, CTULControlText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlText ) );
  CTULControlText( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlText( const CTULControlText &other );
  virtual ~CTULControlText();

public:
  CTULControlText & operator = ( const CTULControlText & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlText ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlText Value );
};
//------------------------------------------------------------------------------
class CTULElementOffsets : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementOffsetSize &X;
  class CTULElementOffsetSize &Y;

public:
  CTULElementOffsets( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULElementOffsets( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULElementOffsets( CLPClassProperty *a_property, CTULElementOffsets ( CLPBaseClass::*a_getter )() );
  CTULElementOffsets( CLPClassProperty *a_property, CTULElementOffsets ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsets ) );
  CTULElementOffsets( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElementOffsets ) );
  CTULElementOffsets( CLPBaseComponent *a_control, CTULElementOffsets ( CLPBaseClass::*a_getter )() );
  CTULElementOffsets( CLPBaseComponent *a_control, CTULElementOffsets ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsets ) );
  CTULElementOffsets( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULElementOffsets( const CTULElementOffsets &other );
  virtual ~CTULElementOffsets();

public:
  CTULElementOffsets & operator = ( const CTULElementOffsets & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULElementOffsets ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULElementOffsets Value );
};
//------------------------------------------------------------------------------
class CTLPBasicMatrixElement : public CTLPComponentElement
{
//DOM-IGNORE-BEGIN
  typedef CTLPComponentElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;

public:
  CTLPBasicMatrixElement();
  virtual ~CTLPBasicMatrixElement();
};
//------------------------------------------------------------------------------
class CTULCaptionCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULControlFont &Font;
  class CTULElementOffsets &Position;

public:    // Properties
  CLPProperty<float> Angle;
  CLPProperty<CTString> Text;

public:
  CTULCaptionCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULCaptionCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULCaptionCollectionItem( CLPClassProperty *a_property, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )() );
  CTULCaptionCollectionItem( CLPClassProperty *a_property, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollectionItem ) );
  CTULCaptionCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULCaptionCollectionItem ) );
  CTULCaptionCollectionItem( CLPBaseComponent *a_control, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )() );
  CTULCaptionCollectionItem( CLPBaseComponent *a_control, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollectionItem ) );
  CTULCaptionCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULCaptionCollectionItem( const CTULCaptionCollectionItem &other );
  virtual ~CTULCaptionCollectionItem();

public:
  CTULCaptionCollectionItem & operator = ( const CTULCaptionCollectionItem & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULCaptionCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULCaptionCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTULCaption : public CTULControlText
{
//DOM-IGNORE-BEGIN
  typedef CTULControlText inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULCaptionCollection &AdditionalCaptions;

public:    // Properties
  CLPProperty<float> Angle;
  CLPProperty<CTString> Text;

public:
  CTULCaption( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULCaption( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULCaption( CLPClassProperty *a_property, CTULCaption ( CLPBaseClass::*a_getter )() );
  CTULCaption( CLPClassProperty *a_property, CTULCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaption ) );
  CTULCaption( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULCaption ) );
  CTULCaption( CLPBaseComponent *a_control, CTULCaption ( CLPBaseClass::*a_getter )() );
  CTULCaption( CLPBaseComponent *a_control, CTULCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaption ) );
  CTULCaption( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULCaption( const CTULCaption &other );
  virtual ~CTULCaption();

public:
  CTULCaption & operator = ( const CTULCaption & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULCaption ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULCaption Value );
};
//------------------------------------------------------------------------------
class CTULVerticalCaption : public CTULCaption
{
//DOM-IGNORE-BEGIN
  typedef CTULCaption inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<float> Angle;

public:
  CTULVerticalCaption( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULVerticalCaption( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULVerticalCaption( CLPClassProperty *a_property, CTULVerticalCaption ( CLPBaseClass::*a_getter )() );
  CTULVerticalCaption( CLPClassProperty *a_property, CTULVerticalCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULVerticalCaption ) );
  CTULVerticalCaption( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULVerticalCaption ) );
  CTULVerticalCaption( CLPBaseComponent *a_control, CTULVerticalCaption ( CLPBaseClass::*a_getter )() );
  CTULVerticalCaption( CLPBaseComponent *a_control, CTULVerticalCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULVerticalCaption ) );
  CTULVerticalCaption( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULVerticalCaption( const CTULVerticalCaption &other );

public:
  CTULVerticalCaption & operator = ( const CTULVerticalCaption & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULVerticalCaption ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULVerticalCaption Value );
};
//------------------------------------------------------------------------------
class CTULCaptionCollection : public CLPCollectionProperty<CTULCaptionCollectionItem>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTULCaptionCollectionItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTULCaptionCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULCaptionCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULCaptionCollection( CLPClassProperty *a_property, CTULCaptionCollection ( CLPBaseClass::*a_getter )() );
  CTULCaptionCollection( CLPClassProperty *a_property, CTULCaptionCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollection ) );
  CTULCaptionCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULCaptionCollection ) );
  CTULCaptionCollection( CLPBaseComponent *a_control, CTULCaptionCollection ( CLPBaseClass::*a_getter )() );
  CTULCaptionCollection( CLPBaseComponent *a_control, CTULCaptionCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollection ) );
  CTULCaptionCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULCaptionCollection( const CTULCaptionCollection &other );

public:
  CTULCaptionCollection & operator = ( const CTULCaptionCollection & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULCaptionCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULCaptionCollection Value );
};
//------------------------------------------------------------------------------
class CTULControlElement : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Position;

public:
  CTULControlElement( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlElement( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlElement( CLPClassProperty *a_property, CTULControlElement ( CLPBaseClass::*a_getter )() );
  CTULControlElement( CLPClassProperty *a_property, CTULControlElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlElement ) );
  CTULControlElement( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlElement ) );
  CTULControlElement( CLPBaseComponent *a_control, CTULControlElement ( CLPBaseClass::*a_getter )() );
  CTULControlElement( CLPBaseComponent *a_control, CTULControlElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlElement ) );
  CTULControlElement( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlElement( const CTULControlElement &other );
  virtual ~CTULControlElement();

public:
  CTULControlElement & operator = ( const CTULControlElement & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlElement ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlElement Value );
};
//------------------------------------------------------------------------------
class CTILRotation : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<float> Angle;
  CLPProperty<float> Width;

public:
  CTILRotation( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILRotation( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILRotation( CLPClassProperty *a_property, CTILRotation ( CLPBaseClass::*a_getter )() );
  CTILRotation( CLPClassProperty *a_property, CTILRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILRotation ) );
  CTILRotation( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILRotation ) );
  CTILRotation( CLPBaseComponent *a_control, CTILRotation ( CLPBaseClass::*a_getter )() );
  CTILRotation( CLPBaseComponent *a_control, CTILRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILRotation ) );
  CTILRotation( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILRotation( const CTILRotation &other );

public:
  CTILRotation & operator = ( const CTILRotation & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILRotation ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILRotation Value );
};
//------------------------------------------------------------------------------
class CTULControlBevel : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Width;

public:    // Properties
  CLPEnumProperty<CTULBevelStyle> Style;

public:
  CTULControlBevel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlBevel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlBevel( CLPClassProperty *a_property, CTULControlBevel ( CLPBaseClass::*a_getter )() );
  CTULControlBevel( CLPClassProperty *a_property, CTULControlBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBevel ) );
  CTULControlBevel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlBevel ) );
  CTULControlBevel( CLPBaseComponent *a_control, CTULControlBevel ( CLPBaseClass::*a_getter )() );
  CTULControlBevel( CLPBaseComponent *a_control, CTULControlBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBevel ) );
  CTULControlBevel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlBevel( const CTULControlBevel &other );
  virtual ~CTULControlBevel();

public:
  CTULControlBevel & operator = ( const CTULControlBevel & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlBevel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlBevel Value );
};
//------------------------------------------------------------------------------
class CTULControlInnerBevel : public CTULControlBevel
{
//DOM-IGNORE-BEGIN
  typedef CTULControlBevel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTULBevelStyle> Style;

public:
  CTULControlInnerBevel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlInnerBevel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlInnerBevel( CLPClassProperty *a_property, CTULControlInnerBevel ( CLPBaseClass::*a_getter )() );
  CTULControlInnerBevel( CLPClassProperty *a_property, CTULControlInnerBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlInnerBevel ) );
  CTULControlInnerBevel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlInnerBevel ) );
  CTULControlInnerBevel( CLPBaseComponent *a_control, CTULControlInnerBevel ( CLPBaseClass::*a_getter )() );
  CTULControlInnerBevel( CLPBaseComponent *a_control, CTULControlInnerBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlInnerBevel ) );
  CTULControlInnerBevel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlInnerBevel( const CTULControlInnerBevel &other );

public:
  CTULControlInnerBevel & operator = ( const CTULControlInnerBevel & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlInnerBevel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlInnerBevel Value );
};
//------------------------------------------------------------------------------
class CTULBasicControlBorder : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULControlBevel &BevelOuter;
  class CTULControlInnerBevel &BevelInner;
  class CTULElementSize &Width;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:
  CTULBasicControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULBasicControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULBasicControlBorder( CLPClassProperty *a_property, CTULBasicControlBorder ( CLPBaseClass::*a_getter )() );
  CTULBasicControlBorder( CLPClassProperty *a_property, CTULBasicControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlBorder ) );
  CTULBasicControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULBasicControlBorder ) );
  CTULBasicControlBorder( CLPBaseComponent *a_control, CTULBasicControlBorder ( CLPBaseClass::*a_getter )() );
  CTULBasicControlBorder( CLPBaseComponent *a_control, CTULBasicControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlBorder ) );
  CTULBasicControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULBasicControlBorder( const CTULBasicControlBorder &other );
  virtual ~CTULBasicControlBorder();

public:
  CTULBasicControlBorder & operator = ( const CTULBasicControlBorder & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULBasicControlBorder ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULBasicControlBorder Value );
};
//------------------------------------------------------------------------------
class CTULControlBorder : public CTULBasicControlBorder
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlBorder inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &CornerRadius;

public:    // Properties
  CLPEnumProperty<CTULBorderShape> Shape;

public:

public:
  CTULControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULControlBorder( CLPClassProperty *a_property, CTULControlBorder ( CLPBaseClass::*a_getter )() );
  CTULControlBorder( CLPClassProperty *a_property, CTULControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBorder ) );
  CTULControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlBorder ) );
  CTULControlBorder( CLPBaseComponent *a_control, CTULControlBorder ( CLPBaseClass::*a_getter )() );
  CTULControlBorder( CLPBaseComponent *a_control, CTULControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBorder ) );
  CTULControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULControlBorder( const CTULControlBorder &other );
  virtual ~CTULControlBorder();

public:
  CTULControlBorder & operator = ( const CTULControlBorder & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULControlBorder ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULControlBorder Value );
};
//------------------------------------------------------------------------------
class CTULProportionalControlBorder : public CTULControlBorder
{
//DOM-IGNORE-BEGIN
  typedef CTULControlBorder inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Proportional;

public:
  CTULProportionalControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULProportionalControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULProportionalControlBorder( CLPClassProperty *a_property, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )() );
  CTULProportionalControlBorder( CLPClassProperty *a_property, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULProportionalControlBorder ) );
  CTULProportionalControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULProportionalControlBorder ) );
  CTULProportionalControlBorder( CLPBaseComponent *a_control, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )() );
  CTULProportionalControlBorder( CLPBaseComponent *a_control, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULProportionalControlBorder ) );
  CTULProportionalControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULProportionalControlBorder( const CTULProportionalControlBorder &other );

public:
  CTULProportionalControlBorder & operator = ( const CTULProportionalControlBorder & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULProportionalControlBorder ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULProportionalControlBorder Value );
};
//------------------------------------------------------------------------------
class CTULRectControlBorder : public CTULControlBorder
{
//DOM-IGNORE-BEGIN
  typedef CTULControlBorder inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTULBorderShape> Shape;

public:
  CTULRectControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULRectControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULRectControlBorder( CLPClassProperty *a_property, CTULRectControlBorder ( CLPBaseClass::*a_getter )() );
  CTULRectControlBorder( CLPClassProperty *a_property, CTULRectControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULRectControlBorder ) );
  CTULRectControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULRectControlBorder ) );
  CTULRectControlBorder( CLPBaseComponent *a_control, CTULRectControlBorder ( CLPBaseClass::*a_getter )() );
  CTULRectControlBorder( CLPBaseComponent *a_control, CTULRectControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULRectControlBorder ) );
  CTULRectControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULRectControlBorder( const CTULRectControlBorder &other );

public:
  CTULRectControlBorder & operator = ( const CTULRectControlBorder & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULRectControlBorder ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULRectControlBorder Value );
};
//------------------------------------------------------------------------------
class CTULOptionalInstrumentProperty : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTULOptionalInstrumentProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTULOptionalInstrumentProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTULOptionalInstrumentProperty( CLPClassProperty *a_property, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )() );
  CTULOptionalInstrumentProperty( CLPClassProperty *a_property, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULOptionalInstrumentProperty ) );
  CTULOptionalInstrumentProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULOptionalInstrumentProperty ) );
  CTULOptionalInstrumentProperty( CLPBaseComponent *a_control, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )() );
  CTULOptionalInstrumentProperty( CLPBaseComponent *a_control, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULOptionalInstrumentProperty ) );
  CTULOptionalInstrumentProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTULOptionalInstrumentProperty( const CTULOptionalInstrumentProperty &other );

public:
  CTULOptionalInstrumentProperty & operator = ( const CTULOptionalInstrumentProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTULOptionalInstrumentProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTULOptionalInstrumentProperty Value );
};
//------------------------------------------------------------------------------
#include <CULBasicControlCode.h>
//------------------------------------------------------------------------------
#endif   // CULBasicControl_H_
//------------------------------------------------------------------------------
