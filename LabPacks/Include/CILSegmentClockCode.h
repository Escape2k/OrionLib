//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILSegmentClockCode_H_
#define CILSegmentClockCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPClassProperty *a_property, CTILPointOffset ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPClassProperty *a_property, CTILPointOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPointOffset ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILPointOffset ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPBaseComponent *a_control, CTILPointOffset ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( CLPBaseComponent *a_control, CTILPointOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPointOffset ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::CTILPointOffset( const CTILPointOffset &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" )))
{
}
//------------------------------------------------------------------------------
inline CTILPointOffset::~CTILPointOffset()
{
  delete &Left;
  delete &Top;
}
//------------------------------------------------------------------------------
inline CTILPointOffset & CTILPointOffset::operator = ( const CTILPointOffset & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILPointOffset::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPClassProperty *a_property, CTILSegmentPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPClassProperty *a_property, CTILSegmentPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPBaseComponent *a_control, CTILSegmentPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( CLPBaseComponent *a_control, CTILSegmentPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoint ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::CTILSegmentPoint( const CTILSegmentPoint &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint::~CTILSegmentPoint()
{
  delete &Offset;
  delete &Size;
}
//------------------------------------------------------------------------------
inline CTILSegmentPoint & CTILSegmentPoint::operator = ( const CTILSegmentPoint & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentPoint::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPClassProperty *a_property, CTILSegmentPoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPClassProperty *a_property, CTILSegmentPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentPoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPBaseComponent *a_control, CTILSegmentPoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( CLPBaseComponent *a_control, CTILSegmentPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoints ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints::CTILSegmentPoints( const CTILSegmentPoints &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSegmentPoints & CTILSegmentPoints::operator = ( const CTILSegmentPoints & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentPoints::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPClassProperty *a_property, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPClassProperty *a_property, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentClockSeparator ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentClockSeparator ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPBaseComponent *a_control, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( CLPBaseComponent *a_control, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentClockSeparator ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::CTILSegmentClockSeparator( const CTILSegmentClockSeparator &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTILSegmentPoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator::~CTILSegmentClockSeparator()
{
  delete &Points;
}
//------------------------------------------------------------------------------
inline CTILSegmentClockSeparator & CTILSegmentClockSeparator::operator = ( const CTILSegmentClockSeparator & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentClockSeparator::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPClassProperty *a_property, CTILSegmentFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPClassProperty *a_property, CTILSegmentFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPBaseComponent *a_control, CTILSegmentFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( CLPBaseComponent *a_control, CTILSegmentFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentFont ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::CTILSegmentFont( const CTILSegmentFont &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentFont::~CTILSegmentFont()
{
  delete &Size;
}
//------------------------------------------------------------------------------
inline CTILSegmentFont & CTILSegmentFont::operator = ( const CTILSegmentFont & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentFont::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPClassProperty *a_property, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPClassProperty *a_property, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalAmPmSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalAmPmSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPBaseComponent *a_control, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( CLPBaseComponent *a_control, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalAmPmSection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::CTILDigitalAmPmSection( const CTILDigitalAmPmSection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTILSegmentFont( GetInstance(), _T( "Font" ))),
  AmPosition( *new CTILPointOffset( GetInstance(), _T( "AmPosition" ))),
  PmPosition( *new CTILPointOffset( GetInstance(), _T( "PmPosition" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection::~CTILDigitalAmPmSection()
{
  delete &Font;
  delete &AmPosition;
  delete &PmPosition;
}
//------------------------------------------------------------------------------
inline CTILDigitalAmPmSection & CTILDigitalAmPmSection::operator = ( const CTILDigitalAmPmSection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILDigitalAmPmSection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPClassProperty *a_property, CTILDigitalClockSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPClassProperty *a_property, CTILDigitalClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalClockSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPBaseComponent *a_control, CTILDigitalClockSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( CLPBaseComponent *a_control, CTILDigitalClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::CTILDigitalClockSection( const CTILDigitalClockSection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Separator( *new CTILSegmentClockSeparator( GetInstance(), _T( "Separator" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection::~CTILDigitalClockSection()
{
  delete &Separator;
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSection & CTILDigitalClockSection::operator = ( const CTILDigitalClockSection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILDigitalClockSection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPClassProperty *a_property, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPClassProperty *a_property, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILMillisecondsClockSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILMillisecondsClockSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPBaseComponent *a_control, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( CLPBaseComponent *a_control, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILMillisecondsClockSection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection::CTILMillisecondsClockSection( const CTILMillisecondsClockSection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILMillisecondsClockSection & CTILMillisecondsClockSection::operator = ( const CTILMillisecondsClockSection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILMillisecondsClockSection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPClassProperty *a_property, CTILDigitalHourSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPClassProperty *a_property, CTILDigitalHourSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalHourSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalHourSection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPBaseComponent *a_control, CTILDigitalHourSection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( CLPBaseComponent *a_control, CTILDigitalHourSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalHourSection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection::CTILDigitalHourSection( const CTILDigitalHourSection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode24Hours( GetInstance(), _T( "Mode24Hours" ) ),
  LeadingZero( GetInstance(), _T( "LeadingZero" ) )
{
}
//------------------------------------------------------------------------------
inline CTILDigitalHourSection & CTILDigitalHourSection::operator = ( const CTILDigitalHourSection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILDigitalHourSection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPClassProperty *a_property, CTILDigitalClockSections ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPClassProperty *a_property, CTILDigitalClockSections ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSections ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalClockSections ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPBaseComponent *a_control, CTILDigitalClockSections ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( CLPBaseComponent *a_control, CTILDigitalClockSections ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSections ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::CTILDigitalClockSections( const CTILDigitalClockSections &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILDigitalHourSection( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILDigitalClockSection( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILDigitalClockSection( GetInstance(), _T( "Seconds" ))),
  Milliseconds( *new CTILMillisecondsClockSection( GetInstance(), _T( "Milliseconds" ))),
  AmPm( *new CTILDigitalAmPmSection( GetInstance(), _T( "AmPm" )))
{
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections::~CTILDigitalClockSections()
{
  delete &Hours;
  delete &Minutes;
  delete &Seconds;
  delete &Milliseconds;
  delete &AmPm;
}
//------------------------------------------------------------------------------
inline CTILDigitalClockSections & CTILDigitalClockSections::operator = ( const CTILDigitalClockSections & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILDigitalClockSections::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicSegmentClock::CTILBasicSegmentClock() :
  Sections( *new CTILDigitalClockSections( GetInstance(), _T( "Sections" ))),
  Elements( *new CTLPClockComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentClock::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentClock::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicSegmentClock::~CTILBasicSegmentClock()
{
  delete &Sections;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicSegmentClock::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentClock::CTILSegmentClock( HWND hParent ) :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  TimeSource( GetInstance(), _T( "TimeSource" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentClock::CTILSegmentClock() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  TimeSource( GetInstance(), _T( "TimeSource" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentClock::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentClock" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentClock::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentClock" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentClock::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentClockLayer::CTILSegmentClockLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentClockLayer::CTILSegmentClockLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentClockLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentClockLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentClockLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentClockLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentClockLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline void CTILBasicSegmentClockElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentClockElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicSegmentClockElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentClockElement::CTILSegmentClockElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentClockElement::CTILSegmentClockElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentClockElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentClockElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentClockElement::~CTILSegmentClockElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentClockElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSegmentClockElement::CTILExternalSegmentClockElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentClockElement::CTILExternalSegmentClockElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentClockElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentClockElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentClockElement::~CTILExternalSegmentClockElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSegmentClockElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSegmentClockMatrixLayer::CTILExternalSegmentClockMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentClockMatrixLayer::CTILExternalSegmentClockMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentClockMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentClockMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentClockMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentClockMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSegmentClockMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILSegmentClockCode_H_
//------------------------------------------------------------------------------
