//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CLPControl_H_
#define CLPControl_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
#ifndef CSLFilterTypes_H_
  #include <CSLFilterTypes.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTLPOptionalPenProperty : public CTLPOptionalVisibilityProperty
{
//DOM-IGNORE-BEGIN
  typedef CTLPOptionalVisibilityProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTPen &Pen;

public:
  CTLPOptionalPenProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPOptionalPenProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPOptionalPenProperty( CLPClassProperty *a_property, CTLPOptionalPenProperty ( CLPBaseClass::*a_getter )() );
  CTLPOptionalPenProperty( CLPClassProperty *a_property, CTLPOptionalPenProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalPenProperty ) );
  CTLPOptionalPenProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPOptionalPenProperty ) );
  CTLPOptionalPenProperty( CLPBaseComponent *a_control, CTLPOptionalPenProperty ( CLPBaseClass::*a_getter )() );
  CTLPOptionalPenProperty( CLPBaseComponent *a_control, CTLPOptionalPenProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalPenProperty ) );
  CTLPOptionalPenProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPOptionalPenProperty( const CTLPOptionalPenProperty &other );
  virtual ~CTLPOptionalPenProperty();

public:
  CTLPOptionalPenProperty & operator = ( const CTLPOptionalPenProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPOptionalPenProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPOptionalPenProperty Value );
};
//------------------------------------------------------------------------------
class CTSLBasicOptionalLabel : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTFont &Font;

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLBasicOptionalLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicOptionalLabel ) );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicOptionalLabel ) );
  CTSLBasicOptionalLabel( CLPBaseComponent *a_control, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLBasicOptionalLabel( CLPBaseComponent *a_control, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicOptionalLabel ) );
  CTSLBasicOptionalLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicOptionalLabel( const CTSLBasicOptionalLabel &other );
  virtual ~CTSLBasicOptionalLabel();

public:
  CTSLBasicOptionalLabel & operator = ( const CTSLBasicOptionalLabel & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicOptionalLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicOptionalLabel Value );
};
//------------------------------------------------------------------------------
class CTSLOptionalLabel : public CTSLBasicOptionalLabel
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicOptionalLabel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTString> Text;

public:
  CTSLOptionalLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOptionalLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOptionalLabel( CLPClassProperty *a_property, CTSLOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLOptionalLabel( CLPClassProperty *a_property, CTSLOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalLabel ) );
  CTSLOptionalLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalLabel ) );
  CTSLOptionalLabel( CLPBaseComponent *a_control, CTSLOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLOptionalLabel( CLPBaseComponent *a_control, CTSLOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalLabel ) );
  CTSLOptionalLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOptionalLabel( const CTSLOptionalLabel &other );

public:
  CTSLOptionalLabel & operator = ( const CTSLOptionalLabel & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOptionalLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOptionalLabel Value );
};
//------------------------------------------------------------------------------
class CTLPCustomControl : public CLPControl
{
//DOM-IGNORE-BEGIN
  typedef CLPControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Events
//  void __stdcall OnMouseEnter(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnMouseEnter;
//  void __stdcall OnMouseLeave(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnMouseLeave;

public:    // Properties
  CLPProperty<bool> Visible;

public:
  void InvalidateIntRect( RECT ARect );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTLPCustomControl();
};
//------------------------------------------------------------------------------
#include <CLPControlCode.h>
//------------------------------------------------------------------------------
#endif   // CLPControl_H_
//------------------------------------------------------------------------------
