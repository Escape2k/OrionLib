//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILSpectrumDisplayCode_H_
#define CILSpectrumDisplayCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPClassProperty *a_property, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPClassProperty *a_property, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarsMax ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarsMax ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPBaseComponent *a_control, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( CLPBaseComponent *a_control, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarsMax ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax::CTILSpectrumBarsMax( const CTILSpectrumBarsMax &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarsMax & CTILSpectrumBarsMax::operator = ( const CTILSpectrumBarsMax & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBarsMax::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPClassProperty *a_property, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPClassProperty *a_property, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarBlocks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarBlocks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPBaseComponent *a_control, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( CLPBaseComponent *a_control, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarBlocks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::CTILSpectrumBarBlocks( const CTILSpectrumBarBlocks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks::~CTILSpectrumBarBlocks()
{
  delete &Size;
  delete &Gap;
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarBlocks & CTILSpectrumBarBlocks::operator = ( const CTILSpectrumBarBlocks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBarBlocks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPClassProperty *a_property, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPClassProperty *a_property, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarPeaks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarPeaks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPBaseComponent *a_control, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( CLPBaseComponent *a_control, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarPeaks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::CTILSpectrumBarPeaks( const CTILSpectrumBarPeaks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  LiveInterval( GetInstance(), _T( "LiveInterval" ) ),
  DroppingInterval( GetInstance(), _T( "DroppingInterval" ) ),
  DroppingStep( GetInstance(), _T( "DroppingStep" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  DroppingColor( GetInstance(), _T( "DroppingColor" ) ),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks::~CTILSpectrumBarPeaks()
{
  delete &Height;
  delete &Blocks;
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarPeaks & CTILSpectrumBarPeaks::operator = ( const CTILSpectrumBarPeaks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBarPeaks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPClassProperty *a_property, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPClassProperty *a_property, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarCount ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarCount ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPBaseComponent *a_control, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( CLPBaseComponent *a_control, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarCount ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount::CTILSpectrumBarCount( const CTILSpectrumBarCount &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) ),
  AutoSize( GetInstance(), _T( "AutoSize" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarCount & CTILSpectrumBarCount::operator = ( const CTILSpectrumBarCount & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBarCount::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPClassProperty *a_property, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPClassProperty *a_property, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPBaseComponent *a_control, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( CLPBaseComponent *a_control, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroup ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::CTILSpectrumBarColorGroup( const CTILSpectrumBarColorGroup &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup::~CTILSpectrumBarColorGroup()
{
  delete &Colors;
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroup & CTILSpectrumBarColorGroup::operator = ( const CTILSpectrumBarColorGroup & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBarColorGroup::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPClassProperty *a_property, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPClassProperty *a_property, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroups ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroups ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPBaseComponent *a_control, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( CLPBaseComponent *a_control, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroups ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups::CTILSpectrumBarColorGroups( const CTILSpectrumBarColorGroups &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBarColorGroups & CTILSpectrumBarColorGroups::operator = ( const CTILSpectrumBarColorGroups & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBarColorGroups::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPClassProperty *a_property, CTILSpectrumBars ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPClassProperty *a_property, CTILSpectrumBars ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBars ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBars ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPBaseComponent *a_control, CTILSpectrumBars ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( CLPBaseComponent *a_control, CTILSpectrumBars ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBars ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::CTILSpectrumBars( const CTILSpectrumBars &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" ))),
  Offset( *new CTULElementOffsets( GetInstance(), _T( "Offset" ))),
  Max( *new CTILSpectrumBarsMax( GetInstance(), _T( "Max" ))),
  Peaks( *new CTILSpectrumBarPeaks( GetInstance(), _T( "Peaks" ))),
  Blocks( *new CTILSpectrumBarBlocks( GetInstance(), _T( "Blocks" ))),
  Count( *new CTILSpectrumBarCount( GetInstance(), _T( "Count" ))),
  Color( GetInstance(), _T( "Color" ) ),
  BackColor( GetInstance(), _T( "BackColor" ) ),
  ColorGroups( *new CTILSpectrumBarColorGroups( GetInstance(), _T( "ColorGroups" )))
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars::~CTILSpectrumBars()
{
  delete &Width;
  delete &Height;
  delete &Offset;
  delete &Max;
  delete &Peaks;
  delete &Blocks;
  delete &Count;
  delete &ColorGroups;
}
//------------------------------------------------------------------------------
inline CTILSpectrumBars & CTILSpectrumBars::operator = ( const CTILSpectrumBars & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumBars::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPClassProperty *a_property, CTILSpectrumValues ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPClassProperty *a_property, CTILSpectrumValues ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumValues ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumValues ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPBaseComponent *a_control, CTILSpectrumValues ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( CLPBaseComponent *a_control, CTILSpectrumValues ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumValues ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues::CTILSpectrumValues( const CTILSpectrumValues &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetItem, &CTILSpectrumValues::SetItem),
  Count( (CTILSpectrumValues *)GetInstance(), &CTILSpectrumValues::GetCount, &CTILSpectrumValues::SetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSpectrumValues & CTILSpectrumValues::operator = ( const CTILSpectrumValues & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSpectrumValues::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline double CTILSpectrumValues::GetItem( unsigned int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumValues@GetItem$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  edx
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline void CTILSpectrumValues::SetItem( unsigned int AIndex, double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumValues@SetItem$qqruid" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = AIndex;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline unsigned int CTILSpectrumValues::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumValues@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  unsigned int __0_RtnValue_ = (unsigned int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (unsigned int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILSpectrumValues::SetCount( unsigned int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumValues@SetCount$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSpectrumDisplay::CTILSpectrumDisplay( HWND hParent ) :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Bars( *new CTILSpectrumBars( GetInstance(), _T( "Bars" ))),
  ExcludeDC( GetInstance(), _T( "ExcludeDC" ) ),
  RefreshInterval( (CTILSpectrumDisplay *)GetInstance(), &CTILSpectrumDisplay::GetRefreshInterval, &CTILSpectrumDisplay::SetRefreshInterval),
  Elements( *new CTLPComponentElements( GetInstance(), _T( "Elements" ))),
  Values( *new CTILSpectrumValues( GetInstance(), ( CTILSpectrumValues ( CLPBaseClass::* )() ) &::CTILSpectrumDisplay::GetVC_Values, ( void ( CLPBaseClass::* )( CTILSpectrumValues ) ) &::CTILSpectrumDisplay::SetValues ))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSpectrumDisplay::CTILSpectrumDisplay() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Bars( *new CTILSpectrumBars( GetInstance(), _T( "Bars" ))),
  ExcludeDC( GetInstance(), _T( "ExcludeDC" ) ),
  RefreshInterval( (CTILSpectrumDisplay *)GetInstance(), &CTILSpectrumDisplay::GetRefreshInterval, &CTILSpectrumDisplay::SetRefreshInterval),
  Elements( *new CTLPComponentElements( GetInstance(), _T( "Elements" ))),
  Values( *new CTILSpectrumValues( GetInstance(), ( CTILSpectrumValues ( CLPBaseClass::* )() ) &::CTILSpectrumDisplay::GetVC_Values, ( void ( CLPBaseClass::* )( CTILSpectrumValues ) ) &::CTILSpectrumDisplay::SetValues ))
{
}
//------------------------------------------------------------------------------
inline void CTILSpectrumDisplay::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSpectrumDisplay" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSpectrumDisplay::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSpectrumDisplay" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILSpectrumDisplay::~CTILSpectrumDisplay()
{
  delete &Bars;
  delete &Elements;
  delete &Values;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSpectrumDisplay::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline unsigned int CTILSpectrumDisplay::GetRefreshInterval()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumDisplay@GetRefreshInterval$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  unsigned int __0_RtnValue_ = (unsigned int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (unsigned int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILSpectrumDisplay::SetRefreshInterval( unsigned int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumDisplay@SetRefreshInterval$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTILSpectrumDisplay::SetValues( CTILSpectrumValues AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumDisplay@SetValues$qqrp35Ilspectrumdisplay@TILSpectrumValues" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = AValue.GetInternalHandle();

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline CTILSpectrumValues CTILSpectrumDisplay::GetVC_Values()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilspectrumdisplay@TILSpectrumDisplay@GetVC_Values$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTILSpectrumValues)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSpectrumDisplayLayer::CTILSpectrumDisplayLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSpectrumDisplayLayer::CTILSpectrumDisplayLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILSpectrumDisplayLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSpectrumDisplayLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSpectrumDisplayLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSpectrumDisplayLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSpectrumDisplayLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSpectrumDisplayElement::CTILExternalSpectrumDisplayElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSpectrumDisplayElement::CTILExternalSpectrumDisplayElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSpectrumDisplayElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSpectrumDisplayElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSpectrumDisplayElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSpectrumDisplayElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSpectrumDisplayElement::~CTILExternalSpectrumDisplayElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSpectrumDisplayElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSpectrumDisplayMatrixLayer::CTILExternalSpectrumDisplayMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSpectrumDisplayMatrixLayer::CTILExternalSpectrumDisplayMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSpectrumDisplayMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSpectrumDisplayMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSpectrumDisplayMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSpectrumDisplayMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSpectrumDisplayMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILSpectrumDisplayCode_H_
//------------------------------------------------------------------------------
