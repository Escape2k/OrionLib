//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CSLControlCollection_H_
#define CSLControlCollection_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
#ifndef CLPControl_H_
  #include <CLPControl.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTSLCustomControlItem : public CTLPCustomControl
{
//DOM-IGNORE-BEGIN
  typedef CTLPCustomControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPAccessProperty<CTSLCustomControlItem,int> Index;

protected:
  int GetIndex();
  void SetIndex( int AValue );

public:
  virtual bool GetHasEnable();
  virtual bool GetCanDisable();

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTSLCustomControlItem();
};
//------------------------------------------------------------------------------
class CTLPComponentElement : public CTSLComponentItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLComponentItem inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPProperty<bool> Visible;

public:
  virtual bool GetHasEnable();
  virtual bool GetCanDisable();

public:
  CTLPComponentElement();
};
//------------------------------------------------------------------------------
class CTLPComponentElements : public CLPComponentCollectionBase
{
//DOM-IGNORE-BEGIN
  typedef CLPComponentCollectionBase inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:

public:
  CTLPComponentElements( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPComponentElements( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPComponentElements( CLPClassProperty *a_property, CTLPComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPComponentElements( CLPClassProperty *a_property, CTLPComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPComponentElements ) );
  CTLPComponentElements( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPComponentElements ) );
  CTLPComponentElements( CLPBaseComponent *a_control, CTLPComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPComponentElements( CLPBaseComponent *a_control, CTLPComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPComponentElements ) );
  CTLPComponentElements( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPComponentElements( const CTLPComponentElements &other );

public:
  CTLPComponentElements & operator = ( const CTLPComponentElements & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPComponentElements ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPComponentElements Value );
};
//------------------------------------------------------------------------------
class CTLPDrawComponentElement : public CTLPComponentElement
{
//DOM-IGNORE-BEGIN
  typedef CTLPComponentElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  CTLPDrawComponentElement();
};
//------------------------------------------------------------------------------
class CTLPGaugeComponentElements : public CTLPComponentElements
{
//DOM-IGNORE-BEGIN
  typedef CTLPComponentElements inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPGaugeComponentElements( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGaugeComponentElements( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGaugeComponentElements( CLPClassProperty *a_property, CTLPGaugeComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPGaugeComponentElements( CLPClassProperty *a_property, CTLPGaugeComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGaugeComponentElements ) );
  CTLPGaugeComponentElements( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGaugeComponentElements ) );
  CTLPGaugeComponentElements( CLPBaseComponent *a_control, CTLPGaugeComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPGaugeComponentElements( CLPBaseComponent *a_control, CTLPGaugeComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGaugeComponentElements ) );
  CTLPGaugeComponentElements( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGaugeComponentElements( const CTLPGaugeComponentElements &other );

public:
  CTLPGaugeComponentElements & operator = ( const CTLPGaugeComponentElements & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGaugeComponentElements ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGaugeComponentElements Value );
};
//------------------------------------------------------------------------------
class CTLPLinearAnalogComponentElements : public CTLPGaugeComponentElements
{
//DOM-IGNORE-BEGIN
  typedef CTLPGaugeComponentElements inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPLinearAnalogComponentElements( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPLinearAnalogComponentElements( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPLinearAnalogComponentElements( CLPClassProperty *a_property, CTLPLinearAnalogComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPLinearAnalogComponentElements( CLPClassProperty *a_property, CTLPLinearAnalogComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLinearAnalogComponentElements ) );
  CTLPLinearAnalogComponentElements( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPLinearAnalogComponentElements ) );
  CTLPLinearAnalogComponentElements( CLPBaseComponent *a_control, CTLPLinearAnalogComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPLinearAnalogComponentElements( CLPBaseComponent *a_control, CTLPLinearAnalogComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLinearAnalogComponentElements ) );
  CTLPLinearAnalogComponentElements( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPLinearAnalogComponentElements( const CTLPLinearAnalogComponentElements &other );

public:
  CTLPLinearAnalogComponentElements & operator = ( const CTLPLinearAnalogComponentElements & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPLinearAnalogComponentElements ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPLinearAnalogComponentElements Value );
};
//------------------------------------------------------------------------------
class CTLPAngularAnalogComponentElements : public CTLPGaugeComponentElements
{
//DOM-IGNORE-BEGIN
  typedef CTLPGaugeComponentElements inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPAngularAnalogComponentElements( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPAngularAnalogComponentElements( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPAngularAnalogComponentElements( CLPClassProperty *a_property, CTLPAngularAnalogComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPAngularAnalogComponentElements( CLPClassProperty *a_property, CTLPAngularAnalogComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPAngularAnalogComponentElements ) );
  CTLPAngularAnalogComponentElements( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPAngularAnalogComponentElements ) );
  CTLPAngularAnalogComponentElements( CLPBaseComponent *a_control, CTLPAngularAnalogComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPAngularAnalogComponentElements( CLPBaseComponent *a_control, CTLPAngularAnalogComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPAngularAnalogComponentElements ) );
  CTLPAngularAnalogComponentElements( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPAngularAnalogComponentElements( const CTLPAngularAnalogComponentElements &other );

public:
  CTLPAngularAnalogComponentElements & operator = ( const CTLPAngularAnalogComponentElements & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPAngularAnalogComponentElements ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPAngularAnalogComponentElements Value );
};
//------------------------------------------------------------------------------
class CTLPClockComponentElements : public CTLPComponentElements
{
//DOM-IGNORE-BEGIN
  typedef CTLPComponentElements inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPClockComponentElements( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPClockComponentElements( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPClockComponentElements( CLPClassProperty *a_property, CTLPClockComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPClockComponentElements( CLPClassProperty *a_property, CTLPClockComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPClockComponentElements ) );
  CTLPClockComponentElements( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPClockComponentElements ) );
  CTLPClockComponentElements( CLPBaseComponent *a_control, CTLPClockComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPClockComponentElements( CLPBaseComponent *a_control, CTLPClockComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPClockComponentElements ) );
  CTLPClockComponentElements( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPClockComponentElements( const CTLPClockComponentElements &other );

public:
  CTLPClockComponentElements & operator = ( const CTLPClockComponentElements & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPClockComponentElements ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPClockComponentElements Value );
};
//------------------------------------------------------------------------------
class CTLPMatrixComponentElements : public CTLPComponentElements
{
//DOM-IGNORE-BEGIN
  typedef CTLPComponentElements inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPMatrixComponentElements( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPMatrixComponentElements( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPMatrixComponentElements( CLPClassProperty *a_property, CTLPMatrixComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPMatrixComponentElements( CLPClassProperty *a_property, CTLPMatrixComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPMatrixComponentElements ) );
  CTLPMatrixComponentElements( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPMatrixComponentElements ) );
  CTLPMatrixComponentElements( CLPBaseComponent *a_control, CTLPMatrixComponentElements ( CLPBaseClass::*a_getter )() );
  CTLPMatrixComponentElements( CLPBaseComponent *a_control, CTLPMatrixComponentElements ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPMatrixComponentElements ) );
  CTLPMatrixComponentElements( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPMatrixComponentElements( const CTLPMatrixComponentElements &other );

public:
  CTLPMatrixComponentElements & operator = ( const CTLPMatrixComponentElements & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPMatrixComponentElements ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPMatrixComponentElements Value );
};
//------------------------------------------------------------------------------
#include <CSLControlCollectionCode.h>
//------------------------------------------------------------------------------
#endif   // CSLControlCollection_H_
//------------------------------------------------------------------------------
