//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CSLCommonFilterCode_H_
#define CSLCommonFilterCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPClassProperty *a_property, CTSLThreadingQueue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPClassProperty *a_property, CTSLThreadingQueue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreadingQueue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLThreadingQueue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPBaseComponent *a_control, CTSLThreadingQueue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( CLPBaseComponent *a_control, CTSLThreadingQueue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreadingQueue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue::CTSLThreadingQueue( const CTSLThreadingQueue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) ),
  FullMode( GetInstance(), _T( "FullMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLThreadingQueue & CTSLThreadingQueue::operator = ( const CTSLThreadingQueue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLThreadingQueue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPClassProperty *a_property, CTSLThreading ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPClassProperty *a_property, CTSLThreading ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreading ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLThreading ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPBaseComponent *a_control, CTSLThreading ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( CLPBaseComponent *a_control, CTSLThreading ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreading ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::CTSLThreading( const CTSLThreading &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Priority( GetInstance(), _T( "Priority" ) ),
  Queue( *new CTSLThreadingQueue( GetInstance(), _T( "Queue" )))
{
}
//------------------------------------------------------------------------------
inline CTSLThreading::~CTSLThreading()
{
  delete &Queue;
}
//------------------------------------------------------------------------------
inline CTSLThreading & CTSLThreading::operator = ( const CTSLThreading & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLThreading::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLBasicThreadedFilter::CTSLBasicThreadedFilter() :
  Threading( *new CTSLThreading( GetInstance(), _T( "Threading" )))
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline CTSLBasicThreadedFilter::~CTSLBasicThreadedFilter()
{
  delete &Threading;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLBasicThreadedFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTSLBasicThreadedEnableFilter::CTSLBasicThreadedEnableFilter() :
  Enabled( GetInstance(), _T( "Enabled" ) ),
  EnablePin( GetInstance(), _T( "EnablePin" ) )
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLBasicThreadedEnableFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTSLBasicCommonFilter::CTSLBasicCommonFilter()
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLBasicCommonFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTSLCommonFilter::CTSLCommonFilter() :
  SampleRate( (CTSLCommonFilter *)GetInstance(), &CTSLCommonFilter::GetVC_SampleRate)
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLCommonFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline double CTSLCommonFilter::GetVC_SampleRate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slcommonfilter@TSLCommonFilter@GetVC_SampleRate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLCommonRealFilter::CTSLCommonRealFilter() :
  OutputPin( GetInstance(), _T( "OutputPin" ) ),
  InputPin( GetInstance(), _T( "InputPin" ) )
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLCommonRealFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPClassProperty *a_property, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPClassProperty *a_property, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLFilterFrequencyResponse ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLFilterFrequencyResponse ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPBaseComponent *a_control, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( CLPBaseComponent *a_control, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLFilterFrequencyResponse ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse::CTSLFilterFrequencyResponse( const CTSLFilterFrequencyResponse &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse & CTSLFilterFrequencyResponse::operator = ( const CTSLFilterFrequencyResponse & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLFilterFrequencyResponse::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLCommonTapsFilter::CTSLCommonTapsFilter() :
  SampleRate( (CTSLCommonTapsFilter *)GetInstance(), &CTSLCommonTapsFilter::GetVC_SampleRate, &CTSLCommonTapsFilter::SetSampleRateProp),
  FrequencyResponse( *new CTSLFilterFrequencyResponse( GetInstance(), ( CTSLFilterFrequencyResponse ( CLPBaseClass::* )() ) &::CTSLCommonTapsFilter::GetVC_FrequencyResponse ))
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline CTSLCommonTapsFilter::~CTSLCommonTapsFilter()
{
  delete &FrequencyResponse;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLCommonTapsFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTSLCommonTapsFilter::SetSampleRateProp( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slcommonfilter@TSLCommonTapsFilter@SetSampleRateProp$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline double CTSLCommonTapsFilter::GetVC_SampleRate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slcommonfilter@TSLCommonTapsFilter@GetVC_SampleRate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline CTSLFilterFrequencyResponse CTSLCommonTapsFilter::GetVC_FrequencyResponse()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slcommonfilter@TSLCommonTapsFilter@GetVC_FrequencyResponse$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTSLFilterFrequencyResponse)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLCommonComplexFilter::CTSLCommonComplexFilter() :
  OutputPin( GetInstance(), _T( "OutputPin" ) ),
  InputPin( GetInstance(), _T( "InputPin" ) )
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLCommonComplexFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTSLCommonIntegerFilter::CTSLCommonIntegerFilter() :
  OutputPin( GetInstance(), _T( "OutputPin" ) ),
  InputPin( GetInstance(), _T( "InputPin" ) )
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLCommonIntegerFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTSLCommonBinaryFilter::CTSLCommonBinaryFilter() :
  OutputPin( GetInstance(), _T( "OutputPin" ) ),
  InputPin( GetInstance(), _T( "InputPin" ) )
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLCommonBinaryFilter::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CSLCommonFilterCode_H_
//------------------------------------------------------------------------------
