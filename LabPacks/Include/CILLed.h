//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILLed_H_
#define CILLed_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLFilterTypes_H_
  #include <CSLFilterTypes.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILBasicLed : public CTULBasicControl
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULProportionalControlBorder &Border;

public:    // Properties
  CLPProperty<bool> ShowReflection;
  CLPProperty<bool> ShowGlow;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicLed();
  virtual ~CTILBasicLed();
};
//------------------------------------------------------------------------------
class CTILBasicInactiveColorLed : public CTILBasicLed
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPProperty<CTGPColor> InactiveColor;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicInactiveColorLed();
};
//------------------------------------------------------------------------------
class CTILColorLed : public CTILBasicLed
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTILInactiveColor &InactiveColor;

public:    // Properties
  CLPProperty<CTGPColor> Color;
  CLPProperty<bool> ShowReflection;
  CLPProperty<bool> ShowGlow;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILColorLed();
  virtual ~CTILColorLed();
};
//------------------------------------------------------------------------------
class CTILExternalLed : public CTILColorLed
{
//DOM-IGNORE-BEGIN
  typedef CTILColorLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Events
//  void __stdcall OnChange(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnChange;

public:    // Class Properties
  class CTLPComponentElements &Elements;

public:    // Properties
  CLPProperty<bool> Value;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalLed();
  virtual ~CTILExternalLed();
};
//------------------------------------------------------------------------------
class CTILLed : public CTILExternalLed
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULControlBackground &Background;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILLed( HWND hParent );
  CTILLed();
  virtual ~CTILLed();
};
//------------------------------------------------------------------------------
class CTILLedLayer : public CTILExternalLed
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILLedLayer( HWND hParent );
  CTILLedLayer();
};
//------------------------------------------------------------------------------
class CTILExternalLedElement : public CTILExternalLed
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalLedElement( HWND hParent );
  CTILExternalLedElement();
  virtual ~CTILExternalLedElement();
};
//------------------------------------------------------------------------------
class CTILBasicLevelDetectLedElement : public CTILColorLed
{
//DOM-IGNORE-BEGIN
  typedef CTILColorLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILLevelDetectLedElement : public CTILBasicLevelDetectLedElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLevelDetectLedElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:    // Properties
  CLPEnumProperty<CTSLLevelDetectMode> Mode;
  CLPProperty<double> Level;
  CLPProperty<CTGPColor> Color;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILLevelDetectLedElement( HWND hParent );
  CTILLevelDetectLedElement();
  virtual ~CTILLevelDetectLedElement();
};
//------------------------------------------------------------------------------
class CTILBasicTimeDetectLedElement : public CTILColorLed
{
//DOM-IGNORE-BEGIN
  typedef CTILColorLed inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILTimeDetectLedElement : public CTILBasicTimeDetectLedElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicTimeDetectLedElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:    // Properties
  CLPEnumProperty<CTSLLevelDetectMode> Mode;
  CLPProperty<CTTime> Time;
  CLPProperty<CTGPColor> Color;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILTimeDetectLedElement( HWND hParent );
  CTILTimeDetectLedElement();
  virtual ~CTILTimeDetectLedElement();
};
//------------------------------------------------------------------------------
class CTILExternalLedMatrixLayer : public CTILExternalLedElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLedElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalLedMatrixLayer( HWND hParent );
  CTILExternalLedMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILLedCode.h>
//------------------------------------------------------------------------------
#endif   // CILLed_H_
//------------------------------------------------------------------------------
