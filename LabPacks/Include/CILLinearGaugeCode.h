//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILLinearGaugeCode_H_
#define CILLinearGaugeCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPClassProperty *a_property, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPClassProperty *a_property, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLinearGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPBaseComponent *a_control, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( CLPBaseComponent *a_control, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::CTILLinearGaugeHand( const CTILLinearGaugeHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TipLength( *new CTULElementSize( GetInstance(), _T( "TipLength" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand::~CTILLinearGaugeHand()
{
  delete &Width;
  delete &TipWidth;
  delete &TipLength;
  delete &TailIndentSize;
  delete &Length;
  delete &Shadow;
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeHand & CTILLinearGaugeHand::operator = ( const CTILLinearGaugeHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILLinearGaugeHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalLinearGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILOptionalLinearGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPBaseComponent *a_control, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( CLPBaseComponent *a_control, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalLinearGaugeHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand::CTILOptionalLinearGaugeHand( const CTILOptionalLinearGaugeHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalLinearGaugeHand & CTILOptionalLinearGaugeHand::operator = ( const CTILOptionalLinearGaugeHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILOptionalLinearGaugeHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPClassProperty *a_property, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPClassProperty *a_property, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlLinearGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILControlLinearGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPBaseComponent *a_control, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( CLPBaseComponent *a_control, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlLinearGaugeHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand::CTILControlLinearGaugeHand( const CTILControlLinearGaugeHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlLinearGaugeHand *)GetInstance(), &CTILControlLinearGaugeHand::GetVC_Selected, &CTILControlLinearGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand & CTILControlLinearGaugeHand::operator = ( const CTILControlLinearGaugeHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILControlLinearGaugeHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTILControlLinearGaugeHand::SetSelected( bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Illineargauge@TILControlLinearGaugeHand@SetSelected$qqro" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTILControlLinearGaugeHand::GetVC_Selected()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Illineargauge@TILControlLinearGaugeHand@GetVC_Selected$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPClassProperty *a_property, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPClassProperty *a_property, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRail ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRail ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPBaseComponent *a_control, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( CLPBaseComponent *a_control, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRail ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::CTILLinearGaugeRail( const CTILLinearGaugeRail &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" )))
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail::~CTILLinearGaugeRail()
{
  delete &Position;
  delete &Width;
  delete &Length;
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRail & CTILLinearGaugeRail::operator = ( const CTILLinearGaugeRail & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILLinearGaugeRail::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPClassProperty *a_property, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPClassProperty *a_property, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRotation ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRotation ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPBaseComponent *a_control, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( CLPBaseComponent *a_control, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRotation ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation::CTILLinearGaugeRotation( const CTILLinearGaugeRotation &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeRotation & CTILLinearGaugeRotation::operator = ( const CTILLinearGaugeRotation & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILLinearGaugeRotation::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicLinearGauge::CTILBasicLinearGauge() :
  Color( GetInstance(), _T( "Color" ) ),
  Border( *new CTULRectControlBorder( GetInstance(), _T( "Border" ))),
  Scale( *new CTILReversibleGaugeScale( GetInstance(), _T( "Scale" ))),
  Caption( *new CTULVerticalCaption( GetInstance(), _T( "Caption" ))),
  Glass( *new CTILGlass( GetInstance(), _T( "Glass" ))),
  Rail( *new CTILLinearGaugeRail( GetInstance(), _T( "Rail" ))),
  Hand( *new CTILOptionalLinearGaugeHand( GetInstance(), _T( "Hand" ))),
  Ranges( *new CTILAnalogGaugeScaleRanges( GetInstance(), _T( "Ranges" ))),
  Rotation( *new CTILLinearGaugeRotation( GetInstance(), _T( "Rotation" ))),
  Curved( GetInstance(), _T( "Curved" ) ),
  Elements( *new CTLPLinearAnalogComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicLinearGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicLinearGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicLinearGauge::~CTILBasicLinearGauge()
{
  delete &Border;
  delete &Scale;
  delete &Caption;
  delete &Glass;
  delete &Rail;
  delete &Hand;
  delete &Ranges;
  delete &Rotation;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicLinearGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalLinearGauge::CTILExternalLinearGauge() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalLinearGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILLinearGauge::CTILLinearGauge( HWND hParent ) :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" ))),
  TabStop( GetInstance(), _T( "TabStop" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILLinearGauge::CTILLinearGauge() :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" ))),
  TabStop( GetInstance(), _T( "TabStop" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILLinearGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILLinearGauge" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILLinearGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILLinearGauge" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILLinearGauge::~CTILLinearGauge()
{
  delete &Background;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILLinearGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILLinearGaugeLayer::CTILLinearGaugeLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeLayer::CTILLinearGaugeLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILLinearGaugeLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILLinearGaugeLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILLinearGaugeLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILLinearGaugeLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILLinearGaugeLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline void CTILBasicLinearGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicLinearGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicLinearGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILLinearGaugeElement::CTILLinearGaugeElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeElement::CTILLinearGaugeElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILLinearGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILLinearGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILLinearGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILLinearGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeElement::~CTILLinearGaugeElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILLinearGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeElement::CTILExternalLinearGaugeElement( HWND hParent ) :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeElement::CTILExternalLinearGaugeElement() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalLinearGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalLinearGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalLinearGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeMatrixLayer::CTILExternalLinearGaugeMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeMatrixLayer::CTILExternalLinearGaugeMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGaugeMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalLinearGaugeMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGaugeMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalLinearGaugeMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalLinearGaugeMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILBasicLinearGaugeHand::CTILBasicLinearGaugeHand()
{
  LibraryHandle = Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicLinearGaugeHand::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTILBasicExternalLinearGaugeHandElement::CTILBasicExternalLinearGaugeHandElement() :
  Range( *new CTILGaugeHandMinMax( GetInstance(), _T( "Range" ))),
  Value( GetInstance(), _T( "Value" ) )
{
  LibraryHandle = Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicExternalLinearGaugeHandElement::~CTILBasicExternalLinearGaugeHandElement()
{
  delete &Range;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicExternalLinearGaugeHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeControlHandElement::CTILExternalLinearGaugeControlHandElement() :
  StatePin( GetInstance(), _T( "StatePin" ) ),
  Hand( *new CTILControlLinearGaugeHand( GetInstance(), ( CTILControlLinearGaugeHand ( CLPBaseClass::* )() ) &::CTILExternalLinearGaugeControlHandElement::GetHand, ( void ( CLPBaseClass::* )( CTILControlLinearGaugeHand ) ) &::CTILExternalLinearGaugeControlHandElement::SetHand ))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILExternalLinearGaugeControlHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeControlHandElement::~CTILExternalLinearGaugeControlHandElement()
{
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalLinearGaugeControlHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTILControlLinearGaugeHand CTILExternalLinearGaugeControlHandElement::GetHand()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Illineargauge@TILExternalLinearGaugeControlHandElement@GetHand$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTILControlLinearGaugeHand)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILExternalLinearGaugeControlHandElement::SetHand( CTILControlLinearGaugeHand AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Illineargauge@TILExternalLinearGaugeControlHandElement@SetHand$qqrp39Illineargauge@TILControlLinearGaugeHand" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = AValue.GetInternalHandle();

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeHandElement::CTILExternalLinearGaugeHandElement() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Hand( *new CTILLinearGaugeHand( GetInstance(), _T( "Hand" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILExternalLinearGaugeHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILExternalLinearGaugeHandElement::~CTILExternalLinearGaugeHandElement()
{
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalLinearGaugeHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILLinearGaugeMinMaxHandElement::CTILLinearGaugeMinMaxHandElement() :
  ResetPin( GetInstance(), _T( "ResetPin" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  AutoReset( *new CTILGaugeMinMaxAutoReset( GetInstance(), _T( "AutoReset" ))),
  Hand( *new CTILLinearGaugeHand( GetInstance(), _T( "Hand" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILLinearGaugeMinMaxHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILLinearGaugeMinMaxHandElement::~CTILLinearGaugeMinMaxHandElement()
{
  delete &AutoReset;
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILLinearGaugeMinMaxHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTILLinearGaugeMinMaxHandElement::Reset()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Illineargauge@TILLinearGaugeMinMaxHandElement@Reset$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILLinearGaugeCode_H_
//------------------------------------------------------------------------------
