//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CULBasicControlCode_H_
#define CULBasicControlCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTULBasicControl::CTULBasicControl() :
  AntiAlias( GetInstance(), _T( "AntiAlias" ) ),
  OnKeyDown( GetInstance(), _T( "OnKeyDown" ) ),
  OnKeyPress( GetInstance(), _T( "OnKeyPress" ) ),
  OnKeyUp( GetInstance(), _T( "OnKeyUp" ) ),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnDblClick( GetInstance(), _T( "OnDblClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseMove( GetInstance(), _T( "OnMouseMove" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) )
{
}
//------------------------------------------------------------------------------
inline void CTULBasicControl::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTULBasicControl::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTULBasicControl::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPClassProperty *a_property, CTULControlBackground ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPClassProperty *a_property, CTULControlBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBackground ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlBackground ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPBaseComponent *a_control, CTULControlBackground ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( CLPBaseComponent *a_control, CTULControlBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBackground ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground::CTULControlBackground( const CTULControlBackground &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( (CTULControlBackground *)GetInstance(), &CTULControlBackground::GetColor, &CTULControlBackground::SetColor)
{
}
//------------------------------------------------------------------------------
inline CTULControlBackground & CTULControlBackground::operator = ( const CTULControlBackground & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlBackground::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTColor CTULControlBackground::GetColor()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ulbasiccontrol@TULControlBackground@GetColor$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTColor __0_RtnValue_ = (CTColor)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTColor)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTULControlBackground::SetColor( CTColor AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ulbasiccontrol@TULControlBackground@SetColor$qqr15Graphics@TColor" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    CTColor __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTULBasicColorControl::CTULBasicColorControl() :
  Color( GetInstance(), _T( "Color" ) ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline void CTULBasicColorControl::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTULBasicColorControl::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTULBasicColorControl::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPClassProperty *a_property, CTULColorItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPClassProperty *a_property, CTULColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULColorItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPBaseComponent *a_control, CTULColorItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( CLPBaseComponent *a_control, CTULColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem::CTULColorItem( const CTULColorItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTULColorItem & CTULColorItem::operator = ( const CTULColorItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULColorItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPClassProperty *a_property, CTULBasicColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPClassProperty *a_property, CTULBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULBasicColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPBaseComponent *a_control, CTULBasicColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( CLPBaseComponent *a_control, CTULBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicColorItems ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_>::CTULBasicColorItems( const CTULBasicColorItems &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTULBasicColorItems<_TMP_TYPE_> & CTULBasicColorItems<_TMP_TYPE_>::operator = ( const CTULBasicColorItems & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> VCLHANDLE CTULBasicColorItems<_TMP_TYPE_>::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPClassProperty *a_property, CTULColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPClassProperty *a_property, CTULColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPBaseComponent *a_control, CTULColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( CLPBaseComponent *a_control, CTULColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULColorItems ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULColorItems::CTULColorItems( const CTULColorItems &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULColorItems & CTULColorItems::operator = ( const CTULColorItems & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULColorItems::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPClassProperty *a_property, CTULBasicControlProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPClassProperty *a_property, CTULBasicControlProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULBasicControlProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPBaseComponent *a_control, CTULBasicControlProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( CLPBaseComponent *a_control, CTULBasicControlProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlProperty ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty::CTULBasicControlProperty( const CTULBasicControlProperty &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlProperty & CTULBasicControlProperty::operator = ( const CTULBasicControlProperty & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULBasicControlProperty::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPClassProperty *a_property, CTULElementSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPClassProperty *a_property, CTULElementSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElementSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPBaseComponent *a_control, CTULElementSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( CLPBaseComponent *a_control, CTULElementSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementSize ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize::CTULElementSize( const CTULElementSize &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULElementSize & CTULElementSize::operator = ( const CTULElementSize & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULElementSize::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline float CTULElementSize::Get( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ulbasiccontrol@TULElementSize@Get$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  float __0_RtnValue_ = (float)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  edx
      pop  eax
      }
    }

  return (float)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPClassProperty *a_property, CTULElementOffsetSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPClassProperty *a_property, CTULElementOffsetSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsetSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElementOffsetSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPBaseComponent *a_control, CTULElementOffsetSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( CLPBaseComponent *a_control, CTULElementOffsetSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsetSize ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize::CTULElementOffsetSize( const CTULElementOffsetSize &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsetSize & CTULElementOffsetSize::operator = ( const CTULElementOffsetSize & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULElementOffsetSize::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPClassProperty *a_property, CTULElement2DSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPClassProperty *a_property, CTULElement2DSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElement2DSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElement2DSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPBaseComponent *a_control, CTULElement2DSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( CLPBaseComponent *a_control, CTULElement2DSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElement2DSize ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::CTULElement2DSize( const CTULElement2DSize &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Height( *new CTULElementSize( GetInstance(), _T( "Height" )))
{
}
//------------------------------------------------------------------------------
inline CTULElement2DSize::~CTULElement2DSize()
{
  delete &Width;
  delete &Height;
}
//------------------------------------------------------------------------------
inline CTULElement2DSize & CTULElement2DSize::operator = ( const CTULElement2DSize & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULElement2DSize::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPClassProperty *a_property, CTULControlFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPClassProperty *a_property, CTULControlFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPBaseComponent *a_control, CTULControlFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( CLPBaseComponent *a_control, CTULControlFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlFont ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::CTULControlFont( const CTULControlFont &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlFont::~CTULControlFont()
{
  delete &Size;
}
//------------------------------------------------------------------------------
inline CTULControlFont & CTULControlFont::operator = ( const CTULControlFont & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlFont::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPClassProperty *a_property, CTULControlText ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPClassProperty *a_property, CTULControlText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlText ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlText ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPBaseComponent *a_control, CTULControlText ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( CLPBaseComponent *a_control, CTULControlText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlText ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::CTULControlText( const CTULControlText &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlText::~CTULControlText()
{
  delete &Font;
}
//------------------------------------------------------------------------------
inline CTULControlText & CTULControlText::operator = ( const CTULControlText & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlText::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPClassProperty *a_property, CTULElementOffsets ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPClassProperty *a_property, CTULElementOffsets ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsets ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULElementOffsets ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPBaseComponent *a_control, CTULElementOffsets ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( CLPBaseComponent *a_control, CTULElementOffsets ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULElementOffsets ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::CTULElementOffsets( const CTULElementOffsets &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( *new CTULElementOffsetSize( GetInstance(), _T( "X" ))),
  Y( *new CTULElementOffsetSize( GetInstance(), _T( "Y" )))
{
}
//------------------------------------------------------------------------------
inline CTULElementOffsets::~CTULElementOffsets()
{
  delete &X;
  delete &Y;
}
//------------------------------------------------------------------------------
inline CTULElementOffsets & CTULElementOffsets::operator = ( const CTULElementOffsets & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULElementOffsets::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPBasicMatrixElement::CTLPBasicMatrixElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" )))
{
  LibraryHandle = Get_SignalLabBasicPkgRAD();
}
//------------------------------------------------------------------------------
inline CTLPBasicMatrixElement::~CTLPBasicMatrixElement()
{
  delete &Position;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTLPBasicMatrixElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPClassProperty *a_property, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPClassProperty *a_property, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULCaptionCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPBaseComponent *a_control, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( CLPBaseComponent *a_control, CTULCaptionCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollectionItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::CTULCaptionCollectionItem( const CTULCaptionCollectionItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTULControlFont( GetInstance(), _T( "Font" ))),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem::~CTULCaptionCollectionItem()
{
  delete &Font;
  delete &Position;
}
//------------------------------------------------------------------------------
inline CTULCaptionCollectionItem & CTULCaptionCollectionItem::operator = ( const CTULCaptionCollectionItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULCaptionCollectionItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPClassProperty *a_property, CTULCaption ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPClassProperty *a_property, CTULCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaption ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULCaption ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPBaseComponent *a_control, CTULCaption ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( CLPBaseComponent *a_control, CTULCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaption ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::CTULCaption( const CTULCaption &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Angle( GetInstance(), _T( "Angle" ) ),
  Text( GetInstance(), _T( "Text" ) ),
  AdditionalCaptions( *new CTULCaptionCollection( GetInstance(), _T( "AdditionalCaptions" )))
{
}
//------------------------------------------------------------------------------
inline CTULCaption::~CTULCaption()
{
  delete &Position;
  delete &AdditionalCaptions;
}
//------------------------------------------------------------------------------
inline CTULCaption & CTULCaption::operator = ( const CTULCaption & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULCaption::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPClassProperty *a_property, CTULVerticalCaption ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPClassProperty *a_property, CTULVerticalCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULVerticalCaption ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULVerticalCaption ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPBaseComponent *a_control, CTULVerticalCaption ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( CLPBaseComponent *a_control, CTULVerticalCaption ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULVerticalCaption ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption::CTULVerticalCaption( const CTULVerticalCaption &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) )
{
}
//------------------------------------------------------------------------------
inline CTULVerticalCaption & CTULVerticalCaption::operator = ( const CTULVerticalCaption & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULVerticalCaption::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPClassProperty *a_property, CTULCaptionCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPClassProperty *a_property, CTULCaptionCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULCaptionCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPBaseComponent *a_control, CTULCaptionCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( CLPBaseComponent *a_control, CTULCaptionCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULCaptionCollection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection::CTULCaptionCollection( const CTULCaptionCollection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTULCaptionCollection & CTULCaptionCollection::operator = ( const CTULCaptionCollection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULCaptionCollection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPClassProperty *a_property, CTULControlElement ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPClassProperty *a_property, CTULControlElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlElement ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlElement ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPBaseComponent *a_control, CTULControlElement ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( CLPBaseComponent *a_control, CTULControlElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlElement ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::CTULControlElement( const CTULControlElement &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTULElementSize( GetInstance(), _T( "Position" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlElement::~CTULControlElement()
{
  delete &Position;
}
//------------------------------------------------------------------------------
inline CTULControlElement & CTULControlElement::operator = ( const CTULControlElement & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlElement::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPClassProperty *a_property, CTILRotation ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPClassProperty *a_property, CTILRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILRotation ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILRotation ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPBaseComponent *a_control, CTILRotation ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( CLPBaseComponent *a_control, CTILRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILRotation ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation::CTILRotation( const CTILRotation &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Angle( GetInstance(), _T( "Angle" ) ),
  Width( GetInstance(), _T( "Width" ) )
{
}
//------------------------------------------------------------------------------
inline CTILRotation & CTILRotation::operator = ( const CTILRotation & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILRotation::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPClassProperty *a_property, CTULControlBevel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPClassProperty *a_property, CTULControlBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBevel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlBevel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPBaseComponent *a_control, CTULControlBevel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( CLPBaseComponent *a_control, CTULControlBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBevel ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::CTULControlBevel( const CTULControlBevel &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBevel::~CTULControlBevel()
{
  delete &Width;
}
//------------------------------------------------------------------------------
inline CTULControlBevel & CTULControlBevel::operator = ( const CTULControlBevel & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlBevel::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPClassProperty *a_property, CTULControlInnerBevel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPClassProperty *a_property, CTULControlInnerBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlInnerBevel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlInnerBevel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPBaseComponent *a_control, CTULControlInnerBevel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( CLPBaseComponent *a_control, CTULControlInnerBevel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlInnerBevel ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel::CTULControlInnerBevel( const CTULControlInnerBevel &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTULControlInnerBevel & CTULControlInnerBevel::operator = ( const CTULControlInnerBevel & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlInnerBevel::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPClassProperty *a_property, CTULBasicControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPClassProperty *a_property, CTULBasicControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULBasicControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPBaseComponent *a_control, CTULBasicControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( CLPBaseComponent *a_control, CTULBasicControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULBasicControlBorder ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::CTULBasicControlBorder( const CTULBasicControlBorder &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BevelOuter( *new CTULControlBevel( GetInstance(), _T( "BevelOuter" ))),
  BevelInner( *new CTULControlInnerBevel( GetInstance(), _T( "BevelInner" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder::~CTULBasicControlBorder()
{
  delete &BevelOuter;
  delete &BevelInner;
  delete &Width;
}
//------------------------------------------------------------------------------
inline CTULBasicControlBorder & CTULBasicControlBorder::operator = ( const CTULBasicControlBorder & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULBasicControlBorder::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPClassProperty *a_property, CTULControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPClassProperty *a_property, CTULControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPBaseComponent *a_control, CTULControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( CLPBaseComponent *a_control, CTULControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULControlBorder ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::CTULControlBorder( const CTULControlBorder &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) ),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTULControlBorder::~CTULControlBorder()
{
  delete &CornerRadius;
}
//------------------------------------------------------------------------------
inline CTULControlBorder & CTULControlBorder::operator = ( const CTULControlBorder & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULControlBorder::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPClassProperty *a_property, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPClassProperty *a_property, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULProportionalControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULProportionalControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPBaseComponent *a_control, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( CLPBaseComponent *a_control, CTULProportionalControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULProportionalControlBorder ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder::CTULProportionalControlBorder( const CTULProportionalControlBorder &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Proportional( GetInstance(), _T( "Proportional" ) )
{
}
//------------------------------------------------------------------------------
inline CTULProportionalControlBorder & CTULProportionalControlBorder::operator = ( const CTULProportionalControlBorder & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULProportionalControlBorder::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPClassProperty *a_property, CTULRectControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPClassProperty *a_property, CTULRectControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULRectControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULRectControlBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPBaseComponent *a_control, CTULRectControlBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( CLPBaseComponent *a_control, CTULRectControlBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULRectControlBorder ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder::CTULRectControlBorder( const CTULRectControlBorder &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Shape( GetInstance(), _T( "Shape" ) )
{
}
//------------------------------------------------------------------------------
inline CTULRectControlBorder & CTULRectControlBorder::operator = ( const CTULRectControlBorder & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULRectControlBorder::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPClassProperty *a_property, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPClassProperty *a_property, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULOptionalInstrumentProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTULOptionalInstrumentProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPBaseComponent *a_control, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( CLPBaseComponent *a_control, CTULOptionalInstrumentProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTULOptionalInstrumentProperty ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty::CTULOptionalInstrumentProperty( const CTULOptionalInstrumentProperty &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTULOptionalInstrumentProperty & CTULOptionalInstrumentProperty::operator = ( const CTULOptionalInstrumentProperty & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTULOptionalInstrumentProperty::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CULBasicControlCode_H_
//------------------------------------------------------------------------------
