//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILAnalogInstrumentCode_H_
#define CILAnalogInstrumentCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeMinMaxAutoReset ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILGaugeMinMaxAutoReset ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPBaseComponent *a_control, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( CLPBaseComponent *a_control, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeMinMaxAutoReset ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset::CTILGaugeMinMaxAutoReset( const CTILGaugeMinMaxAutoReset &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Interval( (CTILGaugeMinMaxAutoReset *)GetInstance(), &CTILGaugeMinMaxAutoReset::GetInterval, &CTILGaugeMinMaxAutoReset::SetInterval)
{
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxAutoReset & CTILGaugeMinMaxAutoReset::operator = ( const CTILGaugeMinMaxAutoReset & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILGaugeMinMaxAutoReset::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTILGaugeMinMaxAutoReset::GetInterval()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanaloginstrument@TILGaugeMinMaxAutoReset@GetInterval$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILGaugeMinMaxAutoReset::SetInterval( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanaloginstrument@TILGaugeMinMaxAutoReset@SetInterval$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPClassProperty *a_property, CTILGlass ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPClassProperty *a_property, CTILGlass ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGlass ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILGlass ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPBaseComponent *a_control, CTILGlass ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( CLPBaseComponent *a_control, CTILGlass ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGlass ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass::CTILGlass( const CTILGlass &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  LightColor( GetInstance(), _T( "LightColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGlass & CTILGlass::operator = ( const CTILGlass & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILGlass::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPClassProperty *a_property, CTILInactiveColor ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPClassProperty *a_property, CTILInactiveColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInactiveColor ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInactiveColor ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPBaseComponent *a_control, CTILInactiveColor ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( CLPBaseComponent *a_control, CTILInactiveColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInactiveColor ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor::CTILInactiveColor( const CTILInactiveColor &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoColor( GetInstance(), _T( "AutoColor" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInactiveColor & CTILInactiveColor::operator = ( const CTILInactiveColor & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILInactiveColor::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenterItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenterItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPBaseComponent *a_control, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( CLPBaseComponent *a_control, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenterItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::CTILAnalogGaugeCenterItem( const CTILAnalogGaugeCenterItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem::~CTILAnalogGaugeCenterItem()
{
  delete &Size;
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenterItem & CTILAnalogGaugeCenterItem::operator = ( const CTILAnalogGaugeCenterItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAnalogGaugeCenterItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPClassProperty *a_property, CTILElementShadow ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPClassProperty *a_property, CTILElementShadow ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILElementShadow ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILElementShadow ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPBaseComponent *a_control, CTILElementShadow ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( CLPBaseComponent *a_control, CTILElementShadow ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILElementShadow ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow::CTILElementShadow( const CTILElementShadow &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILElementShadow & CTILElementShadow::operator = ( const CTILElementShadow & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILElementShadow::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPClassProperty *a_property, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPClassProperty *a_property, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenter ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenter ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPBaseComponent *a_control, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( CLPBaseComponent *a_control, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenter ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::CTILAnalogGaugeCenter( const CTILAnalogGaugeCenter &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Bottom( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Bottom" ))),
  Top( *new CTILAnalogGaugeCenterItem( GetInstance(), _T( "Top" ))),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter::~CTILAnalogGaugeCenter()
{
  delete &Bottom;
  delete &Top;
  delete &Shadow;
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeCenter & CTILAnalogGaugeCenter::operator = ( const CTILAnalogGaugeCenter & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAnalogGaugeCenter::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPClassProperty *a_property, CTILInstrumentTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPClassProperty *a_property, CTILInstrumentTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPBaseComponent *a_control, CTILInstrumentTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( CLPBaseComponent *a_control, CTILInstrumentTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentTicks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::CTILInstrumentTicks( const CTILInstrumentTicks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Thickness( *new CTULElementSize( GetInstance(), _T( "Thickness" ))),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  Count( GetInstance(), _T( "Count" ) ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks::~CTILInstrumentTicks()
{
  delete &Thickness;
  delete &Length;
  delete &Brush;
}
//------------------------------------------------------------------------------
inline CTILInstrumentTicks & CTILInstrumentTicks::operator = ( const CTILInstrumentTicks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILInstrumentTicks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPClassProperty *a_property, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPClassProperty *a_property, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalInstrumentElement ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILOptionalInstrumentElement ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPBaseComponent *a_control, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( CLPBaseComponent *a_control, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalInstrumentElement ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement::CTILOptionalInstrumentElement( const CTILOptionalInstrumentElement &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalInstrumentElement & CTILOptionalInstrumentElement::operator = ( const CTILOptionalInstrumentElement & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILOptionalInstrumentElement::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPClassProperty *a_property, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPClassProperty *a_property, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRange ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRange ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPBaseComponent *a_control, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( CLPBaseComponent *a_control, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRange ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange::CTILAnalogGaugeRange( const CTILAnalogGaugeRange &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Range( GetInstance(), _T( "Range" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRange & CTILAnalogGaugeRange::operator = ( const CTILAnalogGaugeRange & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAnalogGaugeRange::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPClassProperty *a_property, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPClassProperty *a_property, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRanges ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRanges ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPBaseComponent *a_control, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( CLPBaseComponent *a_control, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRanges ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges::CTILAnalogGaugeRanges( const CTILAnalogGaugeRanges &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeRanges & CTILAnalogGaugeRanges::operator = ( const CTILAnalogGaugeRanges & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAnalogGaugeRanges::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeScaleRanges ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeScaleRanges ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPBaseComponent *a_control, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( CLPBaseComponent *a_control, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeScaleRanges ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::CTILAnalogGaugeScaleRanges( const CTILAnalogGaugeScaleRanges &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Ranges( *new CTILAnalogGaugeRanges( GetInstance(), _T( "Ranges" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges::~CTILAnalogGaugeScaleRanges()
{
  delete &Ranges;
  delete &Width;
}
//------------------------------------------------------------------------------
inline CTILAnalogGaugeScaleRanges & CTILAnalogGaugeScaleRanges::operator = ( const CTILAnalogGaugeScaleRanges & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAnalogGaugeScaleRanges::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPClassProperty *a_property, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPClassProperty *a_property, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAngularGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPBaseComponent *a_control, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( CLPBaseComponent *a_control, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::CTILAngularGaugeHand( const CTILAngularGaugeHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Length( *new CTULElementSize( GetInstance(), _T( "Length" ))),
  TailLength( *new CTULElementSize( GetInstance(), _T( "TailLength" ))),
  TipWidth( *new CTULElementSize( GetInstance(), _T( "TipWidth" ))),
  TailIndentSize( *new CTULElementSize( GetInstance(), _T( "TailIndentSize" ))),
  TailWidth( *new CTULElementSize( GetInstance(), _T( "TailWidth" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Shadow( *new CTILElementShadow( GetInstance(), _T( "Shadow" )))
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand::~CTILAngularGaugeHand()
{
  delete &Length;
  delete &TailLength;
  delete &TipWidth;
  delete &TailIndentSize;
  delete &TailWidth;
  delete &Shadow;
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeHand & CTILAngularGaugeHand::operator = ( const CTILAngularGaugeHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAngularGaugeHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPClassProperty *a_property, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPClassProperty *a_property, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentLabeledTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentLabeledTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPBaseComponent *a_control, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( CLPBaseComponent *a_control, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentLabeledTicks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::CTILInstrumentLabeledTicks( const CTILInstrumentLabeledTicks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Labels( *new CTILInstrumentTicksText( GetInstance(), _T( "Labels" ))),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks::~CTILInstrumentLabeledTicks()
{
  delete &Labels;
}
//------------------------------------------------------------------------------
inline CTILInstrumentLabeledTicks & CTILInstrumentLabeledTicks::operator = ( const CTILInstrumentLabeledTicks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILInstrumentLabeledTicks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPClassProperty *a_property, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPClassProperty *a_property, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentEndTick ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentEndTick ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPBaseComponent *a_control, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( CLPBaseComponent *a_control, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentEndTick ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::CTILInstrumentEndTick( const CTILInstrumentEndTick &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TickLabel( *new CTULOptionalInstrumentProperty( GetInstance(), _T( "TickLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick::~CTILInstrumentEndTick()
{
  delete &TickLabel;
}
//------------------------------------------------------------------------------
inline CTILInstrumentEndTick & CTILInstrumentEndTick::operator = ( const CTILInstrumentEndTick & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILInstrumentEndTick::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPClassProperty *a_property, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPClassProperty *a_property, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentMajorTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentMajorTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPBaseComponent *a_control, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( CLPBaseComponent *a_control, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentMajorTicks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::CTILInstrumentMajorTicks( const CTILInstrumentMajorTicks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MinTick" ))),
  MaxTick( *new CTILInstrumentEndTick( GetInstance(), _T( "MaxTick" )))
{
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks::~CTILInstrumentMajorTicks()
{
  delete &MinTick;
  delete &MaxTick;
}
//------------------------------------------------------------------------------
inline CTILInstrumentMajorTicks & CTILInstrumentMajorTicks::operator = ( const CTILInstrumentMajorTicks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILInstrumentMajorTicks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPClassProperty *a_property, CTILScalePrecision ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPClassProperty *a_property, CTILScalePrecision ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILScalePrecision ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILScalePrecision ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPBaseComponent *a_control, CTILScalePrecision ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( CLPBaseComponent *a_control, CTILScalePrecision ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILScalePrecision ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision::CTILScalePrecision( const CTILScalePrecision &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  NumberDigits( GetInstance(), _T( "NumberDigits" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTILScalePrecision & CTILScalePrecision::operator = ( const CTILScalePrecision & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILScalePrecision::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPClassProperty *a_property, CTILBasicScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPClassProperty *a_property, CTILBasicScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILBasicScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPBaseComponent *a_control, CTILBasicScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( CLPBaseComponent *a_control, CTILBasicScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicScale ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::CTILBasicScale( const CTILBasicScale &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicScale::~CTILBasicScale()
{
  delete &Precision;
}
//------------------------------------------------------------------------------
inline CTILBasicScale & CTILBasicScale::operator = ( const CTILBasicScale & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILBasicScale::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPClassProperty *a_property, CTILBasicClockScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPClassProperty *a_property, CTILBasicClockScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicClockScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILBasicClockScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPBaseComponent *a_control, CTILBasicClockScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( CLPBaseComponent *a_control, CTILBasicClockScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicClockScale ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::CTILBasicClockScale( const CTILBasicClockScale &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentTicks( GetInstance(), _T( "MinorTicks" ))),
  Precision( *new CTILScalePrecision( GetInstance(), _T( "Precision" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale::~CTILBasicClockScale()
{
  delete &MajorTicks;
  delete &MinorTicks;
  delete &Precision;
}
//------------------------------------------------------------------------------
inline CTILBasicClockScale & CTILBasicClockScale::operator = ( const CTILBasicClockScale & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILBasicClockScale::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPClassProperty *a_property, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPClassProperty *a_property, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicGaugeScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILBasicGaugeScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPBaseComponent *a_control, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( CLPBaseComponent *a_control, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicGaugeScale ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::CTILBasicGaugeScale( const CTILBasicGaugeScale &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MajorTicks( *new CTILInstrumentMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  MinorTicks( *new CTILInstrumentLabeledTicks( GetInstance(), _T( "MinorTicks" )))
{
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale::~CTILBasicGaugeScale()
{
  delete &MajorTicks;
  delete &MinorTicks;
}
//------------------------------------------------------------------------------
inline CTILBasicGaugeScale & CTILBasicGaugeScale::operator = ( const CTILBasicGaugeScale & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILBasicGaugeScale::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPClassProperty *a_property, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPClassProperty *a_property, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILReversibleGaugeScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILReversibleGaugeScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPBaseComponent *a_control, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( CLPBaseComponent *a_control, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILReversibleGaugeScale ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale::CTILReversibleGaugeScale( const CTILReversibleGaugeScale &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Reversed( GetInstance(), _T( "Reversed" ) )
{
}
//------------------------------------------------------------------------------
inline CTILReversibleGaugeScale & CTILReversibleGaugeScale::operator = ( const CTILReversibleGaugeScale & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILReversibleGaugeScale::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTILBasicMinMaxInstrument::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicMinMaxInstrument::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicMinMaxInstrument::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTILBasicMinMaxInstrument::SetMax( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanaloginstrument@TILBasicMinMaxInstrument@SetMax$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTILBasicMinMaxInstrument::SetMin( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanaloginstrument@TILBasicMinMaxInstrument@SetMin$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTILBasicMinMaxInstrument::SetValue( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanaloginstrument@TILBasicMinMaxInstrument@SetValue$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILMinMaxInstrument::CTILMinMaxInstrument() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILMinMaxInstrument::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILMinMaxInstrument::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILMinMaxInstrument::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPClassProperty *a_property, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPClassProperty *a_property, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeHandMinMax ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILGaugeHandMinMax ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPBaseComponent *a_control, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( CLPBaseComponent *a_control, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeHandMinMax ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax::CTILGaugeHandMinMax( const CTILGaugeHandMinMax &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( GetInstance(), _T( "Min" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTILGaugeHandMinMax & CTILGaugeHandMinMax::operator = ( const CTILGaugeHandMinMax & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILGaugeHandMinMax::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILAnalogInstrumentCode_H_
//------------------------------------------------------------------------------
