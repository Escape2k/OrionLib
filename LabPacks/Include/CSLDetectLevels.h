//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CSLDetectLevels_H_
#define CSLDetectLevels_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabAdditionalPkgRAD_H_
  #include <CSignalLabAdditionalPkgRAD.h>
#endif
#ifndef CSLFilterTypes_H_
  #include <CSLFilterTypes.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTSLLevelValue : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabAdditionalPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // OpenWire Pins

public:    // Properties
  CLPProperty<CTString> Name;
  CLPProperty<double> Level;
  CLPEnumProperty<CTSLLevelDetectMode> Mode;

public:
  CTSLLevelValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLevelValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLevelValue( CLPClassProperty *a_property, CTSLLevelValue ( CLPBaseClass::*a_getter )() );
  CTSLLevelValue( CLPClassProperty *a_property, CTSLLevelValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelValue ) );
  CTSLLevelValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLevelValue ) );
  CTSLLevelValue( CLPBaseComponent *a_control, CTSLLevelValue ( CLPBaseClass::*a_getter )() );
  CTSLLevelValue( CLPBaseComponent *a_control, CTSLLevelValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelValue ) );
  CTSLLevelValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLevelValue( const CTSLLevelValue &other );

public:
  CTSLLevelValue & operator = ( const CTSLLevelValue & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLevelValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLevelValue Value );
};
//------------------------------------------------------------------------------
class CTSLLevelValues : public CLPCollectionProperty<CTSLLevelValue>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTSLLevelValue> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabAdditionalPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLLevelValues( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLevelValues( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLevelValues( CLPClassProperty *a_property, CTSLLevelValues ( CLPBaseClass::*a_getter )() );
  CTSLLevelValues( CLPClassProperty *a_property, CTSLLevelValues ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelValues ) );
  CTSLLevelValues( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLevelValues ) );
  CTSLLevelValues( CLPBaseComponent *a_control, CTSLLevelValues ( CLPBaseClass::*a_getter )() );
  CTSLLevelValues( CLPBaseComponent *a_control, CTSLLevelValues ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelValues ) );
  CTSLLevelValues( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLevelValues( const CTSLLevelValues &other );

public:
  CTSLLevelValues & operator = ( const CTSLLevelValues & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLevelValues ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLevelValues Value );
};
//------------------------------------------------------------------------------
class CTSLDetectLevels : public CLPComponent
{
//DOM-IGNORE-BEGIN
  typedef CLPComponent inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;
  CTOWPinListProperty OutputPins;

public:    // Class Properties
  class CTSLLevelValues &Levels;

public:
  CTSLDetectLevels();
  virtual ~CTSLDetectLevels();
};
//------------------------------------------------------------------------------
#include <CSLDetectLevelsCode.h>
//------------------------------------------------------------------------------
#endif   // CSLDetectLevels_H_
//------------------------------------------------------------------------------
