//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILAngularGauge_H_
#define CILAngularGauge_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILBasicGaugeHand : public CTLPDrawComponentElement
{
//DOM-IGNORE-BEGIN
  typedef CTLPDrawComponentElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  CTILBasicGaugeHand();
};
//------------------------------------------------------------------------------
class CTILGaugeMinMaxHandElement : public CTILBasicGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicGaugeHand inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty ResetPin;

public:    // Class Properties
  class CTILAngularGaugeHand &Hand;
  class CTILGaugeMinMaxAutoReset &AutoReset;

public:    // Properties
  CLPEnumProperty<CTILGaugeMinMaxMode> Mode;

public:
  void Reset();

public:
  CTILGaugeMinMaxHandElement();
  virtual ~CTILGaugeMinMaxHandElement();
};
//------------------------------------------------------------------------------
class CTILBasicExternalGaugeHandElement : public CTILBasicGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicGaugeHand inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTILGaugeHandMinMax &Range;

public:    // Properties
  CLPProperty<double> Value;

public:

public:
  CTILBasicExternalGaugeHandElement();
  virtual ~CTILBasicExternalGaugeHandElement();
};
//------------------------------------------------------------------------------
class CTILExternalGaugeHandElement : public CTILBasicExternalGaugeHandElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicExternalGaugeHandElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Class Properties
  class CTILAngularGaugeHand &Hand;

public:
  CTILExternalGaugeHandElement();
  virtual ~CTILExternalGaugeHandElement();
};
//------------------------------------------------------------------------------
class CTILControlAngularGaugeHand : public CTILAngularGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILAngularGaugeHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> SelectedColor;
  CLPProperty<CTGPColor> MouseOverColor;
  CLPProperty<CTGPColor> SelectedMouseOverColor;
  CLPAccessProperty<CTILControlAngularGaugeHand,bool> Selected;

protected:
  void SetSelected( bool AValue );
  bool GetVC_Selected();

public:

public:
  CTILControlAngularGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILControlAngularGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILControlAngularGaugeHand( CLPClassProperty *a_property, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILControlAngularGaugeHand( CLPClassProperty *a_property, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlAngularGaugeHand ) );
  CTILControlAngularGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILControlAngularGaugeHand ) );
  CTILControlAngularGaugeHand( CLPBaseComponent *a_control, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILControlAngularGaugeHand( CLPBaseComponent *a_control, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlAngularGaugeHand ) );
  CTILControlAngularGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILControlAngularGaugeHand( const CTILControlAngularGaugeHand &other );

public:
  CTILControlAngularGaugeHand & operator = ( const CTILControlAngularGaugeHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILControlAngularGaugeHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILControlAngularGaugeHand Value );
};
//------------------------------------------------------------------------------
class CTILExternalGaugeControlHandElement : public CTILBasicExternalGaugeHandElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicExternalGaugeHandElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWStatePinProperty StatePin;

public:    // Class Properties
  class CTILControlAngularGaugeHand &Hand;

protected:
  CTILControlAngularGaugeHand GetHand();
  void SetHand( CTILControlAngularGaugeHand AValue );

public:

public:
  CTILExternalGaugeControlHandElement();
  virtual ~CTILExternalGaugeControlHandElement();
};
//------------------------------------------------------------------------------
class CTILAngularGaugeScale : public CTILReversibleGaugeScale
{
//DOM-IGNORE-BEGIN
  typedef CTILReversibleGaugeScale inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<float> MinAngle;
  CLPProperty<float> MaxAngle;

public:
  CTILAngularGaugeScale( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAngularGaugeScale( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAngularGaugeScale( CLPClassProperty *a_property, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )() );
  CTILAngularGaugeScale( CLPClassProperty *a_property, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeScale ) );
  CTILAngularGaugeScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAngularGaugeScale ) );
  CTILAngularGaugeScale( CLPBaseComponent *a_control, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )() );
  CTILAngularGaugeScale( CLPBaseComponent *a_control, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeScale ) );
  CTILAngularGaugeScale( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAngularGaugeScale( const CTILAngularGaugeScale &other );

public:
  CTILAngularGaugeScale & operator = ( const CTILAngularGaugeScale & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAngularGaugeScale ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAngularGaugeScale Value );
};
//------------------------------------------------------------------------------
class CTILBasicAngularGauge : public CTILBasicMinMaxInstrument
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicMinMaxInstrument inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULProportionalControlBorder &Border;
  class CTULCaption &Caption;
  class CTILGlass &Glass;
  class CTILAngularGaugeScale &Scale;
  class CTILAnalogGaugeScaleRanges &Ranges;
  class CTILAngularGaugeHand &Hand;
  class CTILAnalogGaugeCenter &Center;
  class CTLPAngularAnalogComponentElements &Elements;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicAngularGauge();
  virtual ~CTILBasicAngularGauge();
};
//------------------------------------------------------------------------------
class CTILExternalAngularGauge : public CTILBasicAngularGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicAngularGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalAngularGauge();
};
//------------------------------------------------------------------------------
class CTILAngularGauge : public CTILExternalAngularGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalAngularGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULControlBackground &Background;

public:    // Properties
  CLPProperty<bool> TabStop;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILAngularGauge( HWND hParent );
  CTILAngularGauge();
  virtual ~CTILAngularGauge();
};
//------------------------------------------------------------------------------
class CTILAngularGaugeLayer : public CTILExternalAngularGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalAngularGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILAngularGaugeLayer( HWND hParent );
  CTILAngularGaugeLayer();
};
//------------------------------------------------------------------------------
class CTILBasicAngularGaugeElement : public CTILBasicAngularGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicAngularGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILAngularGaugeElement : public CTILBasicAngularGaugeElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicAngularGaugeElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILAngularGaugeElement( HWND hParent );
  CTILAngularGaugeElement();
  virtual ~CTILAngularGaugeElement();
};
//------------------------------------------------------------------------------
class CTILExternalAngularGaugeElement : public CTILAngularGaugeElement
{
//DOM-IGNORE-BEGIN
  typedef CTILAngularGaugeElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalAngularGaugeElement( HWND hParent );
  CTILExternalAngularGaugeElement();
};
//------------------------------------------------------------------------------
class CTILExternalAngularGaugeMatrixLayer : public CTILExternalAngularGaugeElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalAngularGaugeElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalAngularGaugeMatrixLayer( HWND hParent );
  CTILExternalAngularGaugeMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILAngularGaugeCode.h>
//------------------------------------------------------------------------------
#endif   // CILAngularGauge_H_
//------------------------------------------------------------------------------
