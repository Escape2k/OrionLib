//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILSpectrumDisplay_H_
#define CILSpectrumDisplay_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILSpectrumBarsMax : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<bool> AutoSize;

public:
  CTILSpectrumBarsMax( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBarsMax( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBarsMax( CLPClassProperty *a_property, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarsMax( CLPClassProperty *a_property, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarsMax ) );
  CTILSpectrumBarsMax( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarsMax ) );
  CTILSpectrumBarsMax( CLPBaseComponent *a_control, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarsMax( CLPBaseComponent *a_control, CTILSpectrumBarsMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarsMax ) );
  CTILSpectrumBarsMax( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBarsMax( const CTILSpectrumBarsMax &other );

public:
  CTILSpectrumBarsMax & operator = ( const CTILSpectrumBarsMax & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBarsMax ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBarsMax Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumBarBlocks : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Size;
  class CTULElementSize &Gap;

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPProperty<bool> Discrete;

public:
  CTILSpectrumBarBlocks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBarBlocks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBarBlocks( CLPClassProperty *a_property, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarBlocks( CLPClassProperty *a_property, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarBlocks ) );
  CTILSpectrumBarBlocks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarBlocks ) );
  CTILSpectrumBarBlocks( CLPBaseComponent *a_control, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarBlocks( CLPBaseComponent *a_control, CTILSpectrumBarBlocks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarBlocks ) );
  CTILSpectrumBarBlocks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBarBlocks( const CTILSpectrumBarBlocks &other );
  virtual ~CTILSpectrumBarBlocks();

public:
  CTILSpectrumBarBlocks & operator = ( const CTILSpectrumBarBlocks & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBarBlocks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBarBlocks Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumBarPeaks : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Height;
  class CTILSpectrumBarBlocks &Blocks;

public:    // Properties
  CLPProperty<unsigned int> LiveInterval;
  CLPProperty<unsigned int> DroppingInterval;
  CLPProperty<double> DroppingStep;
  CLPProperty<CTGPColor> Color;
  CLPProperty<CTGPColor> DroppingColor;

public:
  CTILSpectrumBarPeaks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBarPeaks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBarPeaks( CLPClassProperty *a_property, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarPeaks( CLPClassProperty *a_property, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarPeaks ) );
  CTILSpectrumBarPeaks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarPeaks ) );
  CTILSpectrumBarPeaks( CLPBaseComponent *a_control, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarPeaks( CLPBaseComponent *a_control, CTILSpectrumBarPeaks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarPeaks ) );
  CTILSpectrumBarPeaks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBarPeaks( const CTILSpectrumBarPeaks &other );
  virtual ~CTILSpectrumBarPeaks();

public:
  CTILSpectrumBarPeaks & operator = ( const CTILSpectrumBarPeaks & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBarPeaks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBarPeaks Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumBarCount : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<unsigned int> Count;
  CLPProperty<bool> AutoSize;

public:
  CTILSpectrumBarCount( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBarCount( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBarCount( CLPClassProperty *a_property, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarCount( CLPClassProperty *a_property, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarCount ) );
  CTILSpectrumBarCount( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarCount ) );
  CTILSpectrumBarCount( CLPBaseComponent *a_control, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarCount( CLPBaseComponent *a_control, CTILSpectrumBarCount ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarCount ) );
  CTILSpectrumBarCount( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBarCount( const CTILSpectrumBarCount &other );

public:
  CTILSpectrumBarCount & operator = ( const CTILSpectrumBarCount & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBarCount ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBarCount Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumBarColorGroup : public CTULColorItem
{
//DOM-IGNORE-BEGIN
  typedef CTULColorItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULColorItems &Colors;

public:
  CTILSpectrumBarColorGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBarColorGroup( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBarColorGroup( CLPClassProperty *a_property, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarColorGroup( CLPClassProperty *a_property, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroup ) );
  CTILSpectrumBarColorGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroup ) );
  CTILSpectrumBarColorGroup( CLPBaseComponent *a_control, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarColorGroup( CLPBaseComponent *a_control, CTILSpectrumBarColorGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroup ) );
  CTILSpectrumBarColorGroup( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBarColorGroup( const CTILSpectrumBarColorGroup &other );
  virtual ~CTILSpectrumBarColorGroup();

public:
  CTILSpectrumBarColorGroup & operator = ( const CTILSpectrumBarColorGroup & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBarColorGroup ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBarColorGroup Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumBarColorGroups : public CTULBasicColorItems<CTILSpectrumBarColorGroup>
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicColorItems<CTILSpectrumBarColorGroup> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTILSpectrumBarColorGroups( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBarColorGroups( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBarColorGroups( CLPClassProperty *a_property, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarColorGroups( CLPClassProperty *a_property, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroups ) );
  CTILSpectrumBarColorGroups( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroups ) );
  CTILSpectrumBarColorGroups( CLPBaseComponent *a_control, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBarColorGroups( CLPBaseComponent *a_control, CTILSpectrumBarColorGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBarColorGroups ) );
  CTILSpectrumBarColorGroups( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBarColorGroups( const CTILSpectrumBarColorGroups &other );

public:
  CTILSpectrumBarColorGroups & operator = ( const CTILSpectrumBarColorGroups & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBarColorGroups ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBarColorGroups Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumBars : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Width;
  class CTULElementSize &Height;
  class CTULElementOffsets &Offset;
  class CTILSpectrumBarsMax &Max;
  class CTILSpectrumBarPeaks &Peaks;
  class CTILSpectrumBarBlocks &Blocks;
  class CTILSpectrumBarCount &Count;
  class CTILSpectrumBarColorGroups &ColorGroups;

public:    // Properties
  CLPProperty<CTGPColor> Color;
  CLPProperty<CTGPColor> BackColor;

public:
  CTILSpectrumBars( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumBars( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumBars( CLPClassProperty *a_property, CTILSpectrumBars ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBars( CLPClassProperty *a_property, CTILSpectrumBars ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBars ) );
  CTILSpectrumBars( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumBars ) );
  CTILSpectrumBars( CLPBaseComponent *a_control, CTILSpectrumBars ( CLPBaseClass::*a_getter )() );
  CTILSpectrumBars( CLPBaseComponent *a_control, CTILSpectrumBars ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumBars ) );
  CTILSpectrumBars( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumBars( const CTILSpectrumBars &other );
  virtual ~CTILSpectrumBars();

public:
  CTILSpectrumBars & operator = ( const CTILSpectrumBars & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumBars ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumBars Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumValues : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPIndexProperty_1<CTILSpectrumValues,unsigned int,double> Items;
  CLPAccessProperty<CTILSpectrumValues,unsigned int> Count;

protected:
  double GetItem( unsigned int AIndex );
  void SetItem( unsigned int AIndex, double AValue );
  unsigned int GetCount();
  void SetCount( unsigned int AValue );

public:
  CTILSpectrumValues( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSpectrumValues( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSpectrumValues( CLPClassProperty *a_property, CTILSpectrumValues ( CLPBaseClass::*a_getter )() );
  CTILSpectrumValues( CLPClassProperty *a_property, CTILSpectrumValues ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumValues ) );
  CTILSpectrumValues( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSpectrumValues ) );
  CTILSpectrumValues( CLPBaseComponent *a_control, CTILSpectrumValues ( CLPBaseClass::*a_getter )() );
  CTILSpectrumValues( CLPBaseComponent *a_control, CTILSpectrumValues ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSpectrumValues ) );
  CTILSpectrumValues( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSpectrumValues( const CTILSpectrumValues &other );

public:
  CTILSpectrumValues & operator = ( const CTILSpectrumValues & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSpectrumValues ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSpectrumValues Value );
};
//------------------------------------------------------------------------------
class CTILSpectrumDisplay : public CTULBasicColorControl
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicColorControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Class Properties
  class CTILSpectrumBars &Bars;
  class CTLPComponentElements &Elements;
  class CTILSpectrumValues &Values;

public:    // Properties
  CLPProperty<bool> ExcludeDC;
  CLPAccessProperty<CTILSpectrumDisplay,unsigned int> RefreshInterval;

protected:
  unsigned int GetRefreshInterval();
  void SetRefreshInterval( unsigned int AValue );
  void SetValues( CTILSpectrumValues AValue );
  CTILSpectrumValues GetVC_Values();

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILSpectrumDisplay( HWND hParent );
  CTILSpectrumDisplay();
  virtual ~CTILSpectrumDisplay();
};
//------------------------------------------------------------------------------
class CTILSpectrumDisplayLayer : public CTILSpectrumDisplay
{
//DOM-IGNORE-BEGIN
  typedef CTILSpectrumDisplay inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILSpectrumDisplayLayer( HWND hParent );
  CTILSpectrumDisplayLayer();
};
//------------------------------------------------------------------------------
class CTILExternalSpectrumDisplayElement : public CTILSpectrumDisplay
{
//DOM-IGNORE-BEGIN
  typedef CTILSpectrumDisplay inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalSpectrumDisplayElement( HWND hParent );
  CTILExternalSpectrumDisplayElement();
  virtual ~CTILExternalSpectrumDisplayElement();
};
//------------------------------------------------------------------------------
class CTILExternalSpectrumDisplayMatrixLayer : public CTILExternalSpectrumDisplayElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalSpectrumDisplayElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalSpectrumDisplayMatrixLayer( HWND hParent );
  CTILExternalSpectrumDisplayMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILSpectrumDisplayCode.h>
//------------------------------------------------------------------------------
#endif   // CILSpectrumDisplay_H_
//------------------------------------------------------------------------------
