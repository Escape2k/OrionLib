//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILAngularGaugeCode_H_
#define CILAngularGaugeCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILBasicGaugeHand::CTILBasicGaugeHand()
{
  LibraryHandle = Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicGaugeHand::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxHandElement::CTILGaugeMinMaxHandElement() :
  ResetPin( GetInstance(), _T( "ResetPin" ) ),
  Hand( *new CTILAngularGaugeHand( GetInstance(), _T( "Hand" ))),
  Mode( GetInstance(), _T( "Mode" ) ),
  AutoReset( *new CTILGaugeMinMaxAutoReset( GetInstance(), _T( "AutoReset" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILGaugeMinMaxHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILGaugeMinMaxHandElement::~CTILGaugeMinMaxHandElement()
{
  delete &Hand;
  delete &AutoReset;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILGaugeMinMaxHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTILGaugeMinMaxHandElement::Reset()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilangulargauge@TILGaugeMinMaxHandElement@Reset$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILBasicExternalGaugeHandElement::CTILBasicExternalGaugeHandElement() :
  Range( *new CTILGaugeHandMinMax( GetInstance(), _T( "Range" ))),
  Value( GetInstance(), _T( "Value" ) )
{
  LibraryHandle = Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicExternalGaugeHandElement::~CTILBasicExternalGaugeHandElement()
{
  delete &Range;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicExternalGaugeHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalGaugeHandElement::CTILExternalGaugeHandElement() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Hand( *new CTILAngularGaugeHand( GetInstance(), _T( "Hand" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILExternalGaugeHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILExternalGaugeHandElement::~CTILExternalGaugeHandElement()
{
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalGaugeHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPClassProperty *a_property, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPClassProperty *a_property, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlAngularGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILControlAngularGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPBaseComponent *a_control, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( CLPBaseComponent *a_control, CTILControlAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlAngularGaugeHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand::CTILControlAngularGaugeHand( const CTILControlAngularGaugeHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILControlAngularGaugeHand *)GetInstance(), &CTILControlAngularGaugeHand::GetVC_Selected, &CTILControlAngularGaugeHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand & CTILControlAngularGaugeHand::operator = ( const CTILControlAngularGaugeHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILControlAngularGaugeHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTILControlAngularGaugeHand::SetSelected( bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilangulargauge@TILControlAngularGaugeHand@SetSelected$qqro" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTILControlAngularGaugeHand::GetVC_Selected()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilangulargauge@TILControlAngularGaugeHand@GetVC_Selected$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalGaugeControlHandElement::CTILExternalGaugeControlHandElement() :
  StatePin( GetInstance(), _T( "StatePin" ) ),
  Hand( *new CTILControlAngularGaugeHand( GetInstance(), ( CTILControlAngularGaugeHand ( CLPBaseClass::* )() ) &::CTILExternalGaugeControlHandElement::GetHand, ( void ( CLPBaseClass::* )( CTILControlAngularGaugeHand ) ) &::CTILExternalGaugeControlHandElement::SetHand ))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILExternalGaugeControlHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILExternalGaugeControlHandElement::~CTILExternalGaugeControlHandElement()
{
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalGaugeControlHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTILControlAngularGaugeHand CTILExternalGaugeControlHandElement::GetHand()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilangulargauge@TILExternalGaugeControlHandElement@GetHand$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTILControlAngularGaugeHand)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILExternalGaugeControlHandElement::SetHand( CTILControlAngularGaugeHand AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilangulargauge@TILExternalGaugeControlHandElement@SetHand$qqrp41Ilangulargauge@TILControlAngularGaugeHand" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = AValue.GetInternalHandle();

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPClassProperty *a_property, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPClassProperty *a_property, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAngularGaugeScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPBaseComponent *a_control, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( CLPBaseComponent *a_control, CTILAngularGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeScale ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale::CTILAngularGaugeScale( const CTILAngularGaugeScale &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MinAngle( GetInstance(), _T( "MinAngle" ) ),
  MaxAngle( GetInstance(), _T( "MaxAngle" ) )
{
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeScale & CTILAngularGaugeScale::operator = ( const CTILAngularGaugeScale & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILAngularGaugeScale::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicAngularGauge::CTILBasicAngularGauge() :
  Color( GetInstance(), _T( "Color" ) ),
  Border( *new CTULProportionalControlBorder( GetInstance(), _T( "Border" ))),
  Caption( *new CTULCaption( GetInstance(), _T( "Caption" ))),
  Glass( *new CTILGlass( GetInstance(), _T( "Glass" ))),
  Scale( *new CTILAngularGaugeScale( GetInstance(), _T( "Scale" ))),
  Ranges( *new CTILAnalogGaugeScaleRanges( GetInstance(), _T( "Ranges" ))),
  Hand( *new CTILAngularGaugeHand( GetInstance(), _T( "Hand" ))),
  Center( *new CTILAnalogGaugeCenter( GetInstance(), _T( "Center" ))),
  Elements( *new CTLPAngularAnalogComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicAngularGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicAngularGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicAngularGauge::~CTILBasicAngularGauge()
{
  delete &Border;
  delete &Caption;
  delete &Glass;
  delete &Scale;
  delete &Ranges;
  delete &Hand;
  delete &Center;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicAngularGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalAngularGauge::CTILExternalAngularGauge() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalAngularGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILExternalAngularGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalAngularGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAngularGauge::CTILAngularGauge( HWND hParent ) :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" ))),
  TabStop( GetInstance(), _T( "TabStop" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILAngularGauge::CTILAngularGauge() :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" ))),
  TabStop( GetInstance(), _T( "TabStop" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILAngularGauge::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAngularGauge" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILAngularGauge::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAngularGauge" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILAngularGauge::~CTILAngularGauge()
{
  delete &Background;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILAngularGauge::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAngularGaugeLayer::CTILAngularGaugeLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeLayer::CTILAngularGaugeLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILAngularGaugeLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAngularGaugeLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILAngularGaugeLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAngularGaugeLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILAngularGaugeLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline void CTILBasicAngularGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicAngularGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicAngularGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAngularGaugeElement::CTILAngularGaugeElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeElement::CTILAngularGaugeElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILAngularGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAngularGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILAngularGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAngularGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILAngularGaugeElement::~CTILAngularGaugeElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILAngularGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalAngularGaugeElement::CTILExternalAngularGaugeElement( HWND hParent ) :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalAngularGaugeElement::CTILExternalAngularGaugeElement() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalAngularGaugeElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAngularGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalAngularGaugeElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAngularGaugeElement" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalAngularGaugeElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalAngularGaugeMatrixLayer::CTILExternalAngularGaugeMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalAngularGaugeMatrixLayer::CTILExternalAngularGaugeMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalAngularGaugeMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAngularGaugeMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalAngularGaugeMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAngularGaugeMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalAngularGaugeMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILAngularGaugeCode_H_
//------------------------------------------------------------------------------
