//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILAnalogInstrument_H_
#define CILAnalogInstrument_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CLPTransparentControl_H_
  #include <CLPTransparentControl.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
//------------------------------------------------------------------------------

enum CTILTimeSource { tsCurrentTime, tsValue };
enum CTILGaugeMinMaxMode { gmmMin, gmmMax };



//------------------------------------------------------------------------------
class CTILGaugeMinMaxAutoReset : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPAccessProperty<CTILGaugeMinMaxAutoReset,int> Interval;

protected:
  int GetInterval();
  void SetInterval( int AValue );

public:

public:
  CTILGaugeMinMaxAutoReset( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )() );
  CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeMinMaxAutoReset ) );
  CTILGaugeMinMaxAutoReset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILGaugeMinMaxAutoReset ) );
  CTILGaugeMinMaxAutoReset( CLPBaseComponent *a_control, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )() );
  CTILGaugeMinMaxAutoReset( CLPBaseComponent *a_control, CTILGaugeMinMaxAutoReset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeMinMaxAutoReset ) );
  CTILGaugeMinMaxAutoReset( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILGaugeMinMaxAutoReset( const CTILGaugeMinMaxAutoReset &other );

public:
  CTILGaugeMinMaxAutoReset & operator = ( const CTILGaugeMinMaxAutoReset & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILGaugeMinMaxAutoReset ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILGaugeMinMaxAutoReset Value );
};
//------------------------------------------------------------------------------
class CTILGlass : public CTLPControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTLPControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<CTGPColor> Color;
  CLPProperty<CTGPColor> LightColor;

public:
  CTILGlass( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILGlass( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILGlass( CLPClassProperty *a_property, CTILGlass ( CLPBaseClass::*a_getter )() );
  CTILGlass( CLPClassProperty *a_property, CTILGlass ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGlass ) );
  CTILGlass( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILGlass ) );
  CTILGlass( CLPBaseComponent *a_control, CTILGlass ( CLPBaseClass::*a_getter )() );
  CTILGlass( CLPBaseComponent *a_control, CTILGlass ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGlass ) );
  CTILGlass( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILGlass( const CTILGlass &other );

public:
  CTILGlass & operator = ( const CTILGlass & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILGlass ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILGlass Value );
};
//------------------------------------------------------------------------------
class CTILInactiveColor : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> AutoColor;
  CLPProperty<CTGPColor> Color;

public:
  CTILInactiveColor( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILInactiveColor( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILInactiveColor( CLPClassProperty *a_property, CTILInactiveColor ( CLPBaseClass::*a_getter )() );
  CTILInactiveColor( CLPClassProperty *a_property, CTILInactiveColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInactiveColor ) );
  CTILInactiveColor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInactiveColor ) );
  CTILInactiveColor( CLPBaseComponent *a_control, CTILInactiveColor ( CLPBaseClass::*a_getter )() );
  CTILInactiveColor( CLPBaseComponent *a_control, CTILInactiveColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInactiveColor ) );
  CTILInactiveColor( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILInactiveColor( const CTILInactiveColor &other );

public:
  CTILInactiveColor & operator = ( const CTILInactiveColor & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILInactiveColor ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILInactiveColor Value );
};
//------------------------------------------------------------------------------
class CTILAnalogGaugeCenterItem : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Size;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:
  CTILAnalogGaugeCenterItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenterItem ) );
  CTILAnalogGaugeCenterItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenterItem ) );
  CTILAnalogGaugeCenterItem( CLPBaseComponent *a_control, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeCenterItem( CLPBaseComponent *a_control, CTILAnalogGaugeCenterItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenterItem ) );
  CTILAnalogGaugeCenterItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAnalogGaugeCenterItem( const CTILAnalogGaugeCenterItem &other );
  virtual ~CTILAnalogGaugeCenterItem();

public:
  CTILAnalogGaugeCenterItem & operator = ( const CTILAnalogGaugeCenterItem & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAnalogGaugeCenterItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAnalogGaugeCenterItem Value );
};
//------------------------------------------------------------------------------
class CTILElementShadow : public CTULOptionalInstrumentProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULOptionalInstrumentProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTILElementShadow( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILElementShadow( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILElementShadow( CLPClassProperty *a_property, CTILElementShadow ( CLPBaseClass::*a_getter )() );
  CTILElementShadow( CLPClassProperty *a_property, CTILElementShadow ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILElementShadow ) );
  CTILElementShadow( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILElementShadow ) );
  CTILElementShadow( CLPBaseComponent *a_control, CTILElementShadow ( CLPBaseClass::*a_getter )() );
  CTILElementShadow( CLPBaseComponent *a_control, CTILElementShadow ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILElementShadow ) );
  CTILElementShadow( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILElementShadow( const CTILElementShadow &other );

public:
  CTILElementShadow & operator = ( const CTILElementShadow & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILElementShadow ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILElementShadow Value );
};
//------------------------------------------------------------------------------
class CTILAnalogGaugeCenter : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILAnalogGaugeCenterItem &Bottom;
  class CTILAnalogGaugeCenterItem &Top;
  class CTILElementShadow &Shadow;

public:
  CTILAnalogGaugeCenter( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAnalogGaugeCenter( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAnalogGaugeCenter( CLPClassProperty *a_property, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeCenter( CLPClassProperty *a_property, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenter ) );
  CTILAnalogGaugeCenter( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenter ) );
  CTILAnalogGaugeCenter( CLPBaseComponent *a_control, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeCenter( CLPBaseComponent *a_control, CTILAnalogGaugeCenter ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeCenter ) );
  CTILAnalogGaugeCenter( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAnalogGaugeCenter( const CTILAnalogGaugeCenter &other );
  virtual ~CTILAnalogGaugeCenter();

public:
  CTILAnalogGaugeCenter & operator = ( const CTILAnalogGaugeCenter & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAnalogGaugeCenter ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAnalogGaugeCenter Value );
};
//------------------------------------------------------------------------------
class CTILInstrumentTicks : public CTULOptionalInstrumentProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULOptionalInstrumentProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Thickness;
  class CTULElementSize &Length;
  class CTLPGPBrush &Brush;

public:    // Properties
  CLPProperty<unsigned int> Count;

public:
  CTILInstrumentTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILInstrumentTicks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILInstrumentTicks( CLPClassProperty *a_property, CTILInstrumentTicks ( CLPBaseClass::*a_getter )() );
  CTILInstrumentTicks( CLPClassProperty *a_property, CTILInstrumentTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentTicks ) );
  CTILInstrumentTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentTicks ) );
  CTILInstrumentTicks( CLPBaseComponent *a_control, CTILInstrumentTicks ( CLPBaseClass::*a_getter )() );
  CTILInstrumentTicks( CLPBaseComponent *a_control, CTILInstrumentTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentTicks ) );
  CTILInstrumentTicks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILInstrumentTicks( const CTILInstrumentTicks &other );
  virtual ~CTILInstrumentTicks();

public:
  CTILInstrumentTicks & operator = ( const CTILInstrumentTicks & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILInstrumentTicks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILInstrumentTicks Value );
};
//------------------------------------------------------------------------------
class CTILOptionalInstrumentElement : public CTULControlElement
{
//DOM-IGNORE-BEGIN
  typedef CTULControlElement inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTILOptionalInstrumentElement( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILOptionalInstrumentElement( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILOptionalInstrumentElement( CLPClassProperty *a_property, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )() );
  CTILOptionalInstrumentElement( CLPClassProperty *a_property, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalInstrumentElement ) );
  CTILOptionalInstrumentElement( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILOptionalInstrumentElement ) );
  CTILOptionalInstrumentElement( CLPBaseComponent *a_control, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )() );
  CTILOptionalInstrumentElement( CLPBaseComponent *a_control, CTILOptionalInstrumentElement ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalInstrumentElement ) );
  CTILOptionalInstrumentElement( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILOptionalInstrumentElement( const CTILOptionalInstrumentElement &other );

public:
  CTILOptionalInstrumentElement & operator = ( const CTILOptionalInstrumentElement & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILOptionalInstrumentElement ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILOptionalInstrumentElement Value );
};
//------------------------------------------------------------------------------
class CTILAnalogGaugeRange : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> Color;
  CLPProperty<float> Range;

public:
  CTILAnalogGaugeRange( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAnalogGaugeRange( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAnalogGaugeRange( CLPClassProperty *a_property, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeRange( CLPClassProperty *a_property, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRange ) );
  CTILAnalogGaugeRange( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRange ) );
  CTILAnalogGaugeRange( CLPBaseComponent *a_control, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeRange( CLPBaseComponent *a_control, CTILAnalogGaugeRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRange ) );
  CTILAnalogGaugeRange( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAnalogGaugeRange( const CTILAnalogGaugeRange &other );

public:
  CTILAnalogGaugeRange & operator = ( const CTILAnalogGaugeRange & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAnalogGaugeRange ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAnalogGaugeRange Value );
};
//------------------------------------------------------------------------------
class CTILAnalogGaugeRanges : public CLPCollectionProperty<CTILAnalogGaugeRange>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTILAnalogGaugeRange> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTILAnalogGaugeRanges( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAnalogGaugeRanges( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAnalogGaugeRanges( CLPClassProperty *a_property, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeRanges( CLPClassProperty *a_property, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRanges ) );
  CTILAnalogGaugeRanges( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRanges ) );
  CTILAnalogGaugeRanges( CLPBaseComponent *a_control, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeRanges( CLPBaseComponent *a_control, CTILAnalogGaugeRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeRanges ) );
  CTILAnalogGaugeRanges( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAnalogGaugeRanges( const CTILAnalogGaugeRanges &other );

public:
  CTILAnalogGaugeRanges & operator = ( const CTILAnalogGaugeRanges & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAnalogGaugeRanges ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAnalogGaugeRanges Value );
};
//------------------------------------------------------------------------------
class CTILAnalogGaugeScaleRanges : public CTILOptionalInstrumentElement
{
//DOM-IGNORE-BEGIN
  typedef CTILOptionalInstrumentElement inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILAnalogGaugeRanges &Ranges;
  class CTULElementSize &Width;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:
  CTILAnalogGaugeScaleRanges( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeScaleRanges ) );
  CTILAnalogGaugeScaleRanges( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeScaleRanges ) );
  CTILAnalogGaugeScaleRanges( CLPBaseComponent *a_control, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )() );
  CTILAnalogGaugeScaleRanges( CLPBaseComponent *a_control, CTILAnalogGaugeScaleRanges ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAnalogGaugeScaleRanges ) );
  CTILAnalogGaugeScaleRanges( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAnalogGaugeScaleRanges( const CTILAnalogGaugeScaleRanges &other );
  virtual ~CTILAnalogGaugeScaleRanges();

public:
  CTILAnalogGaugeScaleRanges & operator = ( const CTILAnalogGaugeScaleRanges & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAnalogGaugeScaleRanges ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAnalogGaugeScaleRanges Value );
};
//------------------------------------------------------------------------------
class CTILAngularGaugeHand : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Length;
  class CTULElementSize &TailLength;
  class CTULElementSize &TipWidth;
  class CTULElementSize &TailIndentSize;
  class CTULElementSize &TailWidth;
  class CTILElementShadow &Shadow;

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<CTGPColor> Color;

public:

public:
  CTILAngularGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILAngularGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILAngularGaugeHand( CLPClassProperty *a_property, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILAngularGaugeHand( CLPClassProperty *a_property, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeHand ) );
  CTILAngularGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILAngularGaugeHand ) );
  CTILAngularGaugeHand( CLPBaseComponent *a_control, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILAngularGaugeHand( CLPBaseComponent *a_control, CTILAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILAngularGaugeHand ) );
  CTILAngularGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILAngularGaugeHand( const CTILAngularGaugeHand &other );
  virtual ~CTILAngularGaugeHand();

public:
  CTILAngularGaugeHand & operator = ( const CTILAngularGaugeHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILAngularGaugeHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILAngularGaugeHand Value );
};
//------------------------------------------------------------------------------
class CTILInstrumentLabeledTicks : public CTILInstrumentTicks
{
//DOM-IGNORE-BEGIN
  typedef CTILInstrumentTicks inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILInstrumentTicksText &Labels;

public:    // Properties
  CLPProperty<unsigned int> Count;

public:
  CTILInstrumentLabeledTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILInstrumentLabeledTicks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILInstrumentLabeledTicks( CLPClassProperty *a_property, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )() );
  CTILInstrumentLabeledTicks( CLPClassProperty *a_property, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentLabeledTicks ) );
  CTILInstrumentLabeledTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentLabeledTicks ) );
  CTILInstrumentLabeledTicks( CLPBaseComponent *a_control, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )() );
  CTILInstrumentLabeledTicks( CLPBaseComponent *a_control, CTILInstrumentLabeledTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentLabeledTicks ) );
  CTILInstrumentLabeledTicks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILInstrumentLabeledTicks( const CTILInstrumentLabeledTicks &other );
  virtual ~CTILInstrumentLabeledTicks();

public:
  CTILInstrumentLabeledTicks & operator = ( const CTILInstrumentLabeledTicks & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILInstrumentLabeledTicks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILInstrumentLabeledTicks Value );
};
//------------------------------------------------------------------------------
class CTILInstrumentEndTick : public CTULOptionalInstrumentProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULOptionalInstrumentProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULOptionalInstrumentProperty &TickLabel;

public:
  CTILInstrumentEndTick( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILInstrumentEndTick( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILInstrumentEndTick( CLPClassProperty *a_property, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )() );
  CTILInstrumentEndTick( CLPClassProperty *a_property, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentEndTick ) );
  CTILInstrumentEndTick( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentEndTick ) );
  CTILInstrumentEndTick( CLPBaseComponent *a_control, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )() );
  CTILInstrumentEndTick( CLPBaseComponent *a_control, CTILInstrumentEndTick ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentEndTick ) );
  CTILInstrumentEndTick( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILInstrumentEndTick( const CTILInstrumentEndTick &other );
  virtual ~CTILInstrumentEndTick();

public:
  CTILInstrumentEndTick & operator = ( const CTILInstrumentEndTick & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILInstrumentEndTick ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILInstrumentEndTick Value );
};
//------------------------------------------------------------------------------
class CTILInstrumentMajorTicks : public CTILInstrumentLabeledTicks
{
//DOM-IGNORE-BEGIN
  typedef CTILInstrumentLabeledTicks inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILInstrumentEndTick &MinTick;
  class CTILInstrumentEndTick &MaxTick;

public:
  CTILInstrumentMajorTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILInstrumentMajorTicks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILInstrumentMajorTicks( CLPClassProperty *a_property, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )() );
  CTILInstrumentMajorTicks( CLPClassProperty *a_property, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentMajorTicks ) );
  CTILInstrumentMajorTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILInstrumentMajorTicks ) );
  CTILInstrumentMajorTicks( CLPBaseComponent *a_control, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )() );
  CTILInstrumentMajorTicks( CLPBaseComponent *a_control, CTILInstrumentMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILInstrumentMajorTicks ) );
  CTILInstrumentMajorTicks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILInstrumentMajorTicks( const CTILInstrumentMajorTicks &other );
  virtual ~CTILInstrumentMajorTicks();

public:
  CTILInstrumentMajorTicks & operator = ( const CTILInstrumentMajorTicks & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILInstrumentMajorTicks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILInstrumentMajorTicks Value );
};
//------------------------------------------------------------------------------
class CTILScalePrecision : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<unsigned int> NumberDigits;
  CLPProperty<bool> FixedPrecision;

public:
  CTILScalePrecision( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILScalePrecision( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILScalePrecision( CLPClassProperty *a_property, CTILScalePrecision ( CLPBaseClass::*a_getter )() );
  CTILScalePrecision( CLPClassProperty *a_property, CTILScalePrecision ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILScalePrecision ) );
  CTILScalePrecision( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILScalePrecision ) );
  CTILScalePrecision( CLPBaseComponent *a_control, CTILScalePrecision ( CLPBaseClass::*a_getter )() );
  CTILScalePrecision( CLPBaseComponent *a_control, CTILScalePrecision ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILScalePrecision ) );
  CTILScalePrecision( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILScalePrecision( const CTILScalePrecision &other );

public:
  CTILScalePrecision & operator = ( const CTILScalePrecision & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILScalePrecision ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILScalePrecision Value );
};
//------------------------------------------------------------------------------
class CTILBasicScale : public CTULControlElement
{
//DOM-IGNORE-BEGIN
  typedef CTULControlElement inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILScalePrecision &Precision;

public:
  CTILBasicScale( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILBasicScale( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILBasicScale( CLPClassProperty *a_property, CTILBasicScale ( CLPBaseClass::*a_getter )() );
  CTILBasicScale( CLPClassProperty *a_property, CTILBasicScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicScale ) );
  CTILBasicScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILBasicScale ) );
  CTILBasicScale( CLPBaseComponent *a_control, CTILBasicScale ( CLPBaseClass::*a_getter )() );
  CTILBasicScale( CLPBaseComponent *a_control, CTILBasicScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicScale ) );
  CTILBasicScale( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILBasicScale( const CTILBasicScale &other );
  virtual ~CTILBasicScale();

public:
  CTILBasicScale & operator = ( const CTILBasicScale & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILBasicScale ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILBasicScale Value );
};
//------------------------------------------------------------------------------
class CTILBasicClockScale : public CTULControlElement
{
//DOM-IGNORE-BEGIN
  typedef CTULControlElement inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILInstrumentLabeledTicks &MajorTicks;
  class CTILInstrumentTicks &MinorTicks;
  class CTILScalePrecision &Precision;

public:
  CTILBasicClockScale( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILBasicClockScale( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILBasicClockScale( CLPClassProperty *a_property, CTILBasicClockScale ( CLPBaseClass::*a_getter )() );
  CTILBasicClockScale( CLPClassProperty *a_property, CTILBasicClockScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicClockScale ) );
  CTILBasicClockScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILBasicClockScale ) );
  CTILBasicClockScale( CLPBaseComponent *a_control, CTILBasicClockScale ( CLPBaseClass::*a_getter )() );
  CTILBasicClockScale( CLPBaseComponent *a_control, CTILBasicClockScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicClockScale ) );
  CTILBasicClockScale( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILBasicClockScale( const CTILBasicClockScale &other );
  virtual ~CTILBasicClockScale();

public:
  CTILBasicClockScale & operator = ( const CTILBasicClockScale & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILBasicClockScale ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILBasicClockScale Value );
};
//------------------------------------------------------------------------------
class CTILBasicGaugeScale : public CTILBasicScale
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicScale inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILInstrumentMajorTicks &MajorTicks;
  class CTILInstrumentLabeledTicks &MinorTicks;

public:
  CTILBasicGaugeScale( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILBasicGaugeScale( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILBasicGaugeScale( CLPClassProperty *a_property, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )() );
  CTILBasicGaugeScale( CLPClassProperty *a_property, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicGaugeScale ) );
  CTILBasicGaugeScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILBasicGaugeScale ) );
  CTILBasicGaugeScale( CLPBaseComponent *a_control, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )() );
  CTILBasicGaugeScale( CLPBaseComponent *a_control, CTILBasicGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILBasicGaugeScale ) );
  CTILBasicGaugeScale( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILBasicGaugeScale( const CTILBasicGaugeScale &other );
  virtual ~CTILBasicGaugeScale();

public:
  CTILBasicGaugeScale & operator = ( const CTILBasicGaugeScale & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILBasicGaugeScale ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILBasicGaugeScale Value );
};
//------------------------------------------------------------------------------
class CTILReversibleGaugeScale : public CTILBasicGaugeScale
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicGaugeScale inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Reversed;

public:
  CTILReversibleGaugeScale( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILReversibleGaugeScale( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILReversibleGaugeScale( CLPClassProperty *a_property, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )() );
  CTILReversibleGaugeScale( CLPClassProperty *a_property, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILReversibleGaugeScale ) );
  CTILReversibleGaugeScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILReversibleGaugeScale ) );
  CTILReversibleGaugeScale( CLPBaseComponent *a_control, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )() );
  CTILReversibleGaugeScale( CLPBaseComponent *a_control, CTILReversibleGaugeScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILReversibleGaugeScale ) );
  CTILReversibleGaugeScale( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILReversibleGaugeScale( const CTILReversibleGaugeScale &other );

public:
  CTILReversibleGaugeScale & operator = ( const CTILReversibleGaugeScale & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILReversibleGaugeScale ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILReversibleGaugeScale Value );
};
//------------------------------------------------------------------------------
class CTILBasicMinMaxInstrument : public CTULBasicControl
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

protected:
  void SetMax( double AValue );
  void SetMin( double AValue );
  void SetValue( double AValue );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILMinMaxInstrument : public CTILBasicMinMaxInstrument
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicMinMaxInstrument inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILMinMaxInstrument();
};
//------------------------------------------------------------------------------
class CTILGaugeHandMinMax : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<double> Min;
  CLPProperty<double> Max;
  CLPProperty<bool> Enabled;

public:
  CTILGaugeHandMinMax( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILGaugeHandMinMax( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILGaugeHandMinMax( CLPClassProperty *a_property, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )() );
  CTILGaugeHandMinMax( CLPClassProperty *a_property, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeHandMinMax ) );
  CTILGaugeHandMinMax( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILGaugeHandMinMax ) );
  CTILGaugeHandMinMax( CLPBaseComponent *a_control, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )() );
  CTILGaugeHandMinMax( CLPBaseComponent *a_control, CTILGaugeHandMinMax ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILGaugeHandMinMax ) );
  CTILGaugeHandMinMax( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILGaugeHandMinMax( const CTILGaugeHandMinMax &other );

public:
  CTILGaugeHandMinMax & operator = ( const CTILGaugeHandMinMax & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILGaugeHandMinMax ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILGaugeHandMinMax Value );
};
//------------------------------------------------------------------------------
#include <CILAnalogInstrumentCode.h>
//------------------------------------------------------------------------------
#endif   // CILAnalogInstrument_H_
//------------------------------------------------------------------------------
