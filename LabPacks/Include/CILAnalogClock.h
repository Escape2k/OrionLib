//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILAnalogClock_H_
#define CILAnalogClock_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILOptionalAngularGaugeHand : public CTILAngularGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILAngularGaugeHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:

public:
  CTILOptionalAngularGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalAngularGaugeHand ) );
  CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILOptionalAngularGaugeHand ) );
  CTILOptionalAngularGaugeHand( CLPBaseComponent *a_control, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILOptionalAngularGaugeHand( CLPBaseComponent *a_control, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalAngularGaugeHand ) );
  CTILOptionalAngularGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILOptionalAngularGaugeHand( const CTILOptionalAngularGaugeHand &other );

public:
  CTILOptionalAngularGaugeHand & operator = ( const CTILOptionalAngularGaugeHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILOptionalAngularGaugeHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILOptionalAngularGaugeHand Value );
};
//------------------------------------------------------------------------------
class CTILClockHand : public CTILOptionalAngularGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILOptionalAngularGaugeHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Discrete;

public:
  CTILClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILClockHand( CLPClassProperty *a_property, CTILClockHand ( CLPBaseClass::*a_getter )() );
  CTILClockHand( CLPClassProperty *a_property, CTILClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHand ) );
  CTILClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILClockHand ) );
  CTILClockHand( CLPBaseComponent *a_control, CTILClockHand ( CLPBaseClass::*a_getter )() );
  CTILClockHand( CLPBaseComponent *a_control, CTILClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHand ) );
  CTILClockHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILClockHand( const CTILClockHand &other );

public:
  CTILClockHand & operator = ( const CTILClockHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILClockHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILClockHand Value );
};
//------------------------------------------------------------------------------
class CTILExternalClockHand : public CTILClockHand
{
//DOM-IGNORE-BEGIN
  typedef CTILClockHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:
  CTILExternalClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILExternalClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILExternalClockHand( CLPClassProperty *a_property, CTILExternalClockHand ( CLPBaseClass::*a_getter )() );
  CTILExternalClockHand( CLPClassProperty *a_property, CTILExternalClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalClockHand ) );
  CTILExternalClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILExternalClockHand ) );
  CTILExternalClockHand( CLPBaseComponent *a_control, CTILExternalClockHand ( CLPBaseClass::*a_getter )() );
  CTILExternalClockHand( CLPBaseComponent *a_control, CTILExternalClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalClockHand ) );
  CTILExternalClockHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILExternalClockHand( const CTILExternalClockHand &other );

public:
  CTILExternalClockHand & operator = ( const CTILExternalClockHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILExternalClockHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILExternalClockHand Value );
};
//------------------------------------------------------------------------------
class CTILBasicClockHand : public CTLPDrawComponentElement
{
//DOM-IGNORE-BEGIN
  typedef CTLPDrawComponentElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  CTILBasicClockHand();
};
//------------------------------------------------------------------------------
class CTILBasicExternalClockHandElement : public CTILBasicClockHand
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicClockHand inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPProperty<CTTime> Value;

public:

public:
  CTILBasicExternalClockHandElement();
};
//------------------------------------------------------------------------------
class CTILExternalControlClockHand : public CTILExternalClockHand
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalClockHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> SelectedColor;
  CLPProperty<CTGPColor> MouseOverColor;
  CLPProperty<CTGPColor> SelectedMouseOverColor;
  CLPAccessProperty<CTILExternalControlClockHand,bool> Selected;

protected:
  void SetSelected( bool AValue );
  bool GetVC_Selected();

public:

public:
  CTILExternalControlClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILExternalControlClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILExternalControlClockHand( CLPClassProperty *a_property, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )() );
  CTILExternalControlClockHand( CLPClassProperty *a_property, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalControlClockHand ) );
  CTILExternalControlClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILExternalControlClockHand ) );
  CTILExternalControlClockHand( CLPBaseComponent *a_control, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )() );
  CTILExternalControlClockHand( CLPBaseComponent *a_control, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalControlClockHand ) );
  CTILExternalControlClockHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILExternalControlClockHand( const CTILExternalControlClockHand &other );

public:
  CTILExternalControlClockHand & operator = ( const CTILExternalControlClockHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILExternalControlClockHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILExternalControlClockHand Value );
};
//------------------------------------------------------------------------------
class CTILExternalClockControlHandElement : public CTILBasicExternalClockHandElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicExternalClockHandElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWStatePinProperty StatePin;

public:    // Class Properties
  class CTILExternalControlClockHand &Hand;

protected:
  CTILExternalControlClockHand GetHand();
  void SetHand( CTILExternalControlClockHand AValue );

public:

public:
  CTILExternalClockControlHandElement();
  virtual ~CTILExternalClockControlHandElement();
};
//------------------------------------------------------------------------------
class CTILExternalClockHandElement : public CTILBasicExternalClockHandElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicExternalClockHandElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Class Properties
  class CTILExternalClockHand &Hand;

public:    // Properties
  CLPEnumProperty<CTILTimeSource> TimeSource;

public:
  CTILExternalClockHandElement();
  virtual ~CTILExternalClockHandElement();
};
//------------------------------------------------------------------------------
class CTILSecondsClockHand : public CTILClockHand
{
//DOM-IGNORE-BEGIN
  typedef CTILClockHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Discrete;
  CLPProperty<CTGPColor> Color;

public:
  CTILSecondsClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSecondsClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSecondsClockHand( CLPClassProperty *a_property, CTILSecondsClockHand ( CLPBaseClass::*a_getter )() );
  CTILSecondsClockHand( CLPClassProperty *a_property, CTILSecondsClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSecondsClockHand ) );
  CTILSecondsClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSecondsClockHand ) );
  CTILSecondsClockHand( CLPBaseComponent *a_control, CTILSecondsClockHand ( CLPBaseClass::*a_getter )() );
  CTILSecondsClockHand( CLPBaseComponent *a_control, CTILSecondsClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSecondsClockHand ) );
  CTILSecondsClockHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSecondsClockHand( const CTILSecondsClockHand &other );

public:
  CTILSecondsClockHand & operator = ( const CTILSecondsClockHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSecondsClockHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSecondsClockHand Value );
};
//------------------------------------------------------------------------------
class CTILClockHands : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILClockHand &Hours;
  class CTILClockHand &Minutes;
  class CTILSecondsClockHand &Seconds;

public:
  CTILClockHands( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILClockHands( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILClockHands( CLPClassProperty *a_property, CTILClockHands ( CLPBaseClass::*a_getter )() );
  CTILClockHands( CLPClassProperty *a_property, CTILClockHands ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHands ) );
  CTILClockHands( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILClockHands ) );
  CTILClockHands( CLPBaseComponent *a_control, CTILClockHands ( CLPBaseClass::*a_getter )() );
  CTILClockHands( CLPBaseComponent *a_control, CTILClockHands ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHands ) );
  CTILClockHands( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILClockHands( const CTILClockHands &other );
  virtual ~CTILClockHands();

public:
  CTILClockHands & operator = ( const CTILClockHands & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILClockHands ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILClockHands Value );
};
//------------------------------------------------------------------------------
class CTILBasicAnalogClock : public CTULBasicColorControl
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicColorControl inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULProportionalControlBorder &Border;
  class CTULCaption &Caption;
  class CTILBasicClockScale &Scale;
  class CTILAnalogGaugeScaleRanges &Ranges;
  class CTILGlass &Glass;
  class CTILClockHands &Hands;
  class CTILAnalogGaugeCenter &Center;
  class CTLPClockComponentElements &Elements;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicAnalogClock();
  virtual ~CTILBasicAnalogClock();
};
//------------------------------------------------------------------------------
class CTILExternalAnalogClock : public CTILBasicAnalogClock
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicAnalogClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPEnumProperty<CTILTimeSource> TimeSource;
  CLPProperty<CTTime> Value;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalAnalogClock();
};
//------------------------------------------------------------------------------
class CTILAnalogClock : public CTILExternalAnalogClock
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalAnalogClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULControlBackground &Background;

public:    // Properties
  CLPProperty<bool> TabStop;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILAnalogClock( HWND hParent );
  CTILAnalogClock();
  virtual ~CTILAnalogClock();
};
//------------------------------------------------------------------------------
class CTILAnalogClockLayer : public CTILExternalAnalogClock
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalAnalogClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILAnalogClockLayer( HWND hParent );
  CTILAnalogClockLayer();
};
//------------------------------------------------------------------------------
class CTILBasicAnalogClockElement : public CTILBasicAnalogClock
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicAnalogClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILAnalogClockElement : public CTILBasicAnalogClockElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicAnalogClockElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILAnalogClockElement( HWND hParent );
  CTILAnalogClockElement();
  virtual ~CTILAnalogClockElement();
};
//------------------------------------------------------------------------------
class CTILExternalAnalogClockElement : public CTILAnalogClock
{
//DOM-IGNORE-BEGIN
  typedef CTILAnalogClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalAnalogClockElement( HWND hParent );
  CTILExternalAnalogClockElement();
  virtual ~CTILExternalAnalogClockElement();
};
//------------------------------------------------------------------------------
class CTILExternalAnalogClockMatrixLayer : public CTILExternalAnalogClockElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalAnalogClockElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalAnalogClockMatrixLayer( HWND hParent );
  CTILExternalAnalogClockMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILAnalogClockCode.h>
//------------------------------------------------------------------------------
#endif   // CILAnalogClock_H_
//------------------------------------------------------------------------------
