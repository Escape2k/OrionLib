//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CSLCommonFilter_H_
#define CSLCommonFilter_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif
//------------------------------------------------------------------------------

enum CTSLMixerChannelWaitType { cwNone, cwStart };
enum CTSLQueueFullMode { fmBlock, fmDropData };



//------------------------------------------------------------------------------
class CTSLThreadingQueue : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<unsigned int> Size;
  CLPEnumProperty<CTSLQueueFullMode> FullMode;

public:
  CTSLThreadingQueue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLThreadingQueue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLThreadingQueue( CLPClassProperty *a_property, CTSLThreadingQueue ( CLPBaseClass::*a_getter )() );
  CTSLThreadingQueue( CLPClassProperty *a_property, CTSLThreadingQueue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreadingQueue ) );
  CTSLThreadingQueue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLThreadingQueue ) );
  CTSLThreadingQueue( CLPBaseComponent *a_control, CTSLThreadingQueue ( CLPBaseClass::*a_getter )() );
  CTSLThreadingQueue( CLPBaseComponent *a_control, CTSLThreadingQueue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreadingQueue ) );
  CTSLThreadingQueue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLThreadingQueue( const CTSLThreadingQueue &other );

public:
  CTSLThreadingQueue & operator = ( const CTSLThreadingQueue & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLThreadingQueue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLThreadingQueue Value );
};
//------------------------------------------------------------------------------
class CTSLThreading : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLThreadingQueue &Queue;

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPEnumProperty<CTThreadPriority> Priority;

public:
  CTSLThreading( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLThreading( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLThreading( CLPClassProperty *a_property, CTSLThreading ( CLPBaseClass::*a_getter )() );
  CTSLThreading( CLPClassProperty *a_property, CTSLThreading ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreading ) );
  CTSLThreading( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLThreading ) );
  CTSLThreading( CLPBaseComponent *a_control, CTSLThreading ( CLPBaseClass::*a_getter )() );
  CTSLThreading( CLPBaseComponent *a_control, CTSLThreading ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLThreading ) );
  CTSLThreading( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLThreading( const CTSLThreading &other );
  virtual ~CTSLThreading();

public:
  CTSLThreading & operator = ( const CTSLThreading & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLThreading ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLThreading Value );
};
//------------------------------------------------------------------------------
class CTSLBasicThreadedFilter : public CLPComponent
{
//DOM-IGNORE-BEGIN
  typedef CLPComponent inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTSLThreading &Threading;

public:
  CTSLBasicThreadedFilter();
  virtual ~CTSLBasicThreadedFilter();
};
//------------------------------------------------------------------------------
class CTSLBasicThreadedEnableFilter : public CTSLBasicThreadedFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicThreadedFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty EnablePin;

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTSLBasicThreadedEnableFilter();
};
//------------------------------------------------------------------------------
class CTSLBasicCommonFilter : public CTSLBasicThreadedEnableFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicThreadedEnableFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  CTSLBasicCommonFilter();
};
//------------------------------------------------------------------------------
class CTSLCommonFilter : public CTSLBasicCommonFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicCommonFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPReadAccessProperty<CTSLCommonFilter,double> SampleRate;

protected:
  double GetVC_SampleRate();

public:
  CTSLCommonFilter();
};
//------------------------------------------------------------------------------
class CTSLCommonRealFilter : public CTSLCommonFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLCommonFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWOutputPinProperty OutputPin;
  CTOWInputPinProperty InputPin;

public:
  CTSLCommonRealFilter();
};
//------------------------------------------------------------------------------
class CTSLFilterFrequencyResponse : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

protected:    // Injected Methods
  void GetMagnitudeInt( double * AMagnitudes, int ASize );
  void GetPhaseInt( double * APhases, int ASize );

public:

public:
  CTSLFilterFrequencyResponse( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLFilterFrequencyResponse( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLFilterFrequencyResponse( CLPClassProperty *a_property, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )() );
  CTSLFilterFrequencyResponse( CLPClassProperty *a_property, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLFilterFrequencyResponse ) );
  CTSLFilterFrequencyResponse( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLFilterFrequencyResponse ) );
  CTSLFilterFrequencyResponse( CLPBaseComponent *a_control, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )() );
  CTSLFilterFrequencyResponse( CLPBaseComponent *a_control, CTSLFilterFrequencyResponse ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLFilterFrequencyResponse ) );
  CTSLFilterFrequencyResponse( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLFilterFrequencyResponse( const CTSLFilterFrequencyResponse &other );

public:
  CTSLFilterFrequencyResponse & operator = ( const CTSLFilterFrequencyResponse & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLFilterFrequencyResponse ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLFilterFrequencyResponse Value );
};
//------------------------------------------------------------------------------
class CTSLCommonTapsFilter : public CTSLCommonRealFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLCommonRealFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTSLFilterFrequencyResponse &FrequencyResponse;

public:    // Properties
  CLPAccessProperty<CTSLCommonTapsFilter,double> SampleRate;

protected:
  void SetSampleRateProp( double AValue );
  double GetVC_SampleRate();
  CTSLFilterFrequencyResponse GetVC_FrequencyResponse();

public:
  CTSLCommonTapsFilter();
  virtual ~CTSLCommonTapsFilter();
};
//------------------------------------------------------------------------------
class CTSLCommonComplexFilter : public CTSLCommonFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLCommonFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWOutputPinProperty OutputPin;
  CTOWInputPinProperty InputPin;

public:
  CTSLCommonComplexFilter();
};
//------------------------------------------------------------------------------
class CTSLCommonIntegerFilter : public CTSLCommonFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLCommonFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWOutputPinProperty OutputPin;
  CTOWInputPinProperty InputPin;

public:
  CTSLCommonIntegerFilter();
};
//------------------------------------------------------------------------------
class CTSLCommonBinaryFilter : public CTSLCommonFilter
{
//DOM-IGNORE-BEGIN
  typedef CTSLCommonFilter inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWOutputPinProperty OutputPin;
  CTOWInputPinProperty InputPin;

public:
  CTSLCommonBinaryFilter();
};
//------------------------------------------------------------------------------
#include <CSLCommonFilterCode.h>
//------------------------------------------------------------------------------
#endif   // CSLCommonFilter_H_
//------------------------------------------------------------------------------
