//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILAnalogClockCode_H_
#define CILAnalogClockCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalAngularGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILOptionalAngularGaugeHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPBaseComponent *a_control, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( CLPBaseComponent *a_control, CTILOptionalAngularGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalAngularGaugeHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand::CTILOptionalAngularGaugeHand( const CTILOptionalAngularGaugeHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTILOptionalAngularGaugeHand & CTILOptionalAngularGaugeHand::operator = ( const CTILOptionalAngularGaugeHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILOptionalAngularGaugeHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPClassProperty *a_property, CTILClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPClassProperty *a_property, CTILClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPBaseComponent *a_control, CTILClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( CLPBaseComponent *a_control, CTILClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand::CTILClockHand( const CTILClockHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) )
{
}
//------------------------------------------------------------------------------
inline CTILClockHand & CTILClockHand::operator = ( const CTILClockHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILClockHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPClassProperty *a_property, CTILExternalClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPClassProperty *a_property, CTILExternalClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILExternalClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPBaseComponent *a_control, CTILExternalClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( CLPBaseComponent *a_control, CTILExternalClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalClockHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand::CTILExternalClockHand( const CTILExternalClockHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILExternalClockHand & CTILExternalClockHand::operator = ( const CTILExternalClockHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILExternalClockHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicClockHand::CTILBasicClockHand()
{
  LibraryHandle = Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicClockHand::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTILBasicExternalClockHandElement::CTILBasicExternalClockHandElement() :
  Value( GetInstance(), _T( "Value" ) )
{
  LibraryHandle = Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicExternalClockHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPClassProperty *a_property, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPClassProperty *a_property, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalControlClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILExternalControlClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPBaseComponent *a_control, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( CLPBaseComponent *a_control, CTILExternalControlClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILExternalControlClockHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand::CTILExternalControlClockHand( const CTILExternalControlClockHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SelectedColor( GetInstance(), _T( "SelectedColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  SelectedMouseOverColor( GetInstance(), _T( "SelectedMouseOverColor" ) ),
  Selected( (CTILExternalControlClockHand *)GetInstance(), &CTILExternalControlClockHand::GetVC_Selected, &CTILExternalControlClockHand::SetSelected)
{
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand & CTILExternalControlClockHand::operator = ( const CTILExternalControlClockHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILExternalControlClockHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTILExternalControlClockHand::SetSelected( bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanalogclock@TILExternalControlClockHand@SetSelected$qqro" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTILExternalControlClockHand::GetVC_Selected()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanalogclock@TILExternalControlClockHand@GetVC_Selected$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalClockControlHandElement::CTILExternalClockControlHandElement() :
  StatePin( GetInstance(), _T( "StatePin" ) ),
  Hand( *new CTILExternalControlClockHand( GetInstance(), ( CTILExternalControlClockHand ( CLPBaseClass::* )() ) &::CTILExternalClockControlHandElement::GetHand, ( void ( CLPBaseClass::* )( CTILExternalControlClockHand ) ) &::CTILExternalClockControlHandElement::SetHand ))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILExternalClockControlHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILExternalClockControlHandElement::~CTILExternalClockControlHandElement()
{
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalClockControlHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline CTILExternalControlClockHand CTILExternalClockControlHandElement::GetHand()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanalogclock@TILExternalClockControlHandElement@GetHand$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTILExternalControlClockHand)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILExternalClockControlHandElement::SetHand( CTILExternalControlClockHand AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilanalogclock@TILExternalClockControlHandElement@SetHand$qqrp41Ilanalogclock@TILExternalControlClockHand" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = AValue.GetInternalHandle();

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalClockHandElement::CTILExternalClockHandElement() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  TimeSource( GetInstance(), _T( "TimeSource" ) ),
  Hand( *new CTILExternalClockHand( GetInstance(), _T( "Hand" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPComponent::OpenComponent( _T( "TILExternalClockHandElement" ) );
}
//------------------------------------------------------------------------------
inline CTILExternalClockHandElement::~CTILExternalClockHandElement()
{
  delete &Hand;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalClockHandElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPClassProperty *a_property, CTILSecondsClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPClassProperty *a_property, CTILSecondsClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSecondsClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSecondsClockHand ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPBaseComponent *a_control, CTILSecondsClockHand ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( CLPBaseComponent *a_control, CTILSecondsClockHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSecondsClockHand ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand::CTILSecondsClockHand( const CTILSecondsClockHand &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Discrete( GetInstance(), _T( "Discrete" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSecondsClockHand & CTILSecondsClockHand::operator = ( const CTILSecondsClockHand & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSecondsClockHand::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPClassProperty *a_property, CTILClockHands ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPClassProperty *a_property, CTILClockHands ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHands ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILClockHands ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPBaseComponent *a_control, CTILClockHands ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( CLPBaseComponent *a_control, CTILClockHands ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILClockHands ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::CTILClockHands( const CTILClockHands &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Hours( *new CTILClockHand( GetInstance(), _T( "Hours" ))),
  Minutes( *new CTILClockHand( GetInstance(), _T( "Minutes" ))),
  Seconds( *new CTILSecondsClockHand( GetInstance(), _T( "Seconds" )))
{
}
//------------------------------------------------------------------------------
inline CTILClockHands::~CTILClockHands()
{
  delete &Hours;
  delete &Minutes;
  delete &Seconds;
}
//------------------------------------------------------------------------------
inline CTILClockHands & CTILClockHands::operator = ( const CTILClockHands & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILClockHands::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicAnalogClock::CTILBasicAnalogClock() :
  Color( GetInstance(), _T( "Color" ) ),
  Border( *new CTULProportionalControlBorder( GetInstance(), _T( "Border" ))),
  Caption( *new CTULCaption( GetInstance(), _T( "Caption" ))),
  Scale( *new CTILBasicClockScale( GetInstance(), _T( "Scale" ))),
  Ranges( *new CTILAnalogGaugeScaleRanges( GetInstance(), _T( "Ranges" ))),
  Glass( *new CTILGlass( GetInstance(), _T( "Glass" ))),
  Hands( *new CTILClockHands( GetInstance(), _T( "Hands" ))),
  Center( *new CTILAnalogGaugeCenter( GetInstance(), _T( "Center" ))),
  Elements( *new CTLPClockComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicAnalogClock::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicAnalogClock::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicAnalogClock::~CTILBasicAnalogClock()
{
  delete &Border;
  delete &Caption;
  delete &Scale;
  delete &Ranges;
  delete &Glass;
  delete &Hands;
  delete &Center;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicAnalogClock::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalAnalogClock::CTILExternalAnalogClock() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  TimeSource( GetInstance(), _T( "TimeSource" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalAnalogClock::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILExternalAnalogClock::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalAnalogClock::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAnalogClock::CTILAnalogClock( HWND hParent ) :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" ))),
  TabStop( GetInstance(), _T( "TabStop" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILAnalogClock::CTILAnalogClock() :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" ))),
  TabStop( GetInstance(), _T( "TabStop" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILAnalogClock::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAnalogClock" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILAnalogClock::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAnalogClock" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILAnalogClock::~CTILAnalogClock()
{
  delete &Background;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILAnalogClock::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAnalogClockLayer::CTILAnalogClockLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILAnalogClockLayer::CTILAnalogClockLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILAnalogClockLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAnalogClockLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILAnalogClockLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAnalogClockLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILAnalogClockLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline void CTILBasicAnalogClockElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicAnalogClockElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicAnalogClockElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILAnalogClockElement::CTILAnalogClockElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILAnalogClockElement::CTILAnalogClockElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILAnalogClockElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAnalogClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILAnalogClockElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILAnalogClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILAnalogClockElement::~CTILAnalogClockElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILAnalogClockElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalAnalogClockElement::CTILExternalAnalogClockElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalAnalogClockElement::CTILExternalAnalogClockElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILExternalAnalogClockElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAnalogClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalAnalogClockElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAnalogClockElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalAnalogClockElement::~CTILExternalAnalogClockElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalAnalogClockElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalAnalogClockMatrixLayer::CTILExternalAnalogClockMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalAnalogClockMatrixLayer::CTILExternalAnalogClockMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalAnalogClockMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAnalogClockMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalAnalogClockMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalAnalogClockMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalAnalogClockMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILAnalogClockCode_H_
//------------------------------------------------------------------------------
