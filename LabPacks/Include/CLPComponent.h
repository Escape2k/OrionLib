//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CLPComponent_H_
#define CLPComponent_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgRAD_H_
  #include <CSignalLabBasicPkgRAD.h>
#endif
//------------------------------------------------------------------------------

enum CTSLSynchronizeType { stNone, stSingleBuffer, stQueue };
enum CTSLClockSource { csInternal, csExternal };



//------------------------------------------------------------------------------
class CTLPOptionalDisabledPersistent : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPOptionalDisabledPersistent( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPOptionalDisabledPersistent( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPOptionalDisabledPersistent( CLPClassProperty *a_property, CTLPOptionalDisabledPersistent ( CLPBaseClass::*a_getter )() );
  CTLPOptionalDisabledPersistent( CLPClassProperty *a_property, CTLPOptionalDisabledPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalDisabledPersistent ) );
  CTLPOptionalDisabledPersistent( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPOptionalDisabledPersistent ) );
  CTLPOptionalDisabledPersistent( CLPBaseComponent *a_control, CTLPOptionalDisabledPersistent ( CLPBaseClass::*a_getter )() );
  CTLPOptionalDisabledPersistent( CLPBaseComponent *a_control, CTLPOptionalDisabledPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalDisabledPersistent ) );
  CTLPOptionalDisabledPersistent( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPOptionalDisabledPersistent( const CTLPOptionalDisabledPersistent &other );

public:
  CTLPOptionalDisabledPersistent & operator = ( const CTLPOptionalDisabledPersistent & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPOptionalDisabledPersistent ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPOptionalDisabledPersistent Value );
};
//------------------------------------------------------------------------------
class CTLPOptionalEnabledPersistent : public CTLPOptionalDisabledPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTLPOptionalDisabledPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPOptionalEnabledPersistent( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPOptionalEnabledPersistent( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPOptionalEnabledPersistent( CLPClassProperty *a_property, CTLPOptionalEnabledPersistent ( CLPBaseClass::*a_getter )() );
  CTLPOptionalEnabledPersistent( CLPClassProperty *a_property, CTLPOptionalEnabledPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalEnabledPersistent ) );
  CTLPOptionalEnabledPersistent( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPOptionalEnabledPersistent ) );
  CTLPOptionalEnabledPersistent( CLPBaseComponent *a_control, CTLPOptionalEnabledPersistent ( CLPBaseClass::*a_getter )() );
  CTLPOptionalEnabledPersistent( CLPBaseComponent *a_control, CTLPOptionalEnabledPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalEnabledPersistent ) );
  CTLPOptionalEnabledPersistent( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPOptionalEnabledPersistent( const CTLPOptionalEnabledPersistent &other );

public:
  CTLPOptionalEnabledPersistent & operator = ( const CTLPOptionalEnabledPersistent & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPOptionalEnabledPersistent ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPOptionalEnabledPersistent Value );
};
//------------------------------------------------------------------------------
class CTLPOptionalSettingProperty : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> UseCurrent;

public:
  CTLPOptionalSettingProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPOptionalSettingProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPOptionalSettingProperty( CLPClassProperty *a_property, CTLPOptionalSettingProperty ( CLPBaseClass::*a_getter )() );
  CTLPOptionalSettingProperty( CLPClassProperty *a_property, CTLPOptionalSettingProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalSettingProperty ) );
  CTLPOptionalSettingProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPOptionalSettingProperty ) );
  CTLPOptionalSettingProperty( CLPBaseComponent *a_control, CTLPOptionalSettingProperty ( CLPBaseClass::*a_getter )() );
  CTLPOptionalSettingProperty( CLPBaseComponent *a_control, CTLPOptionalSettingProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalSettingProperty ) );
  CTLPOptionalSettingProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPOptionalSettingProperty( const CTLPOptionalSettingProperty &other );

public:
  CTLPOptionalSettingProperty & operator = ( const CTLPOptionalSettingProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPOptionalSettingProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPOptionalSettingProperty Value );
};
//------------------------------------------------------------------------------
class CTLPOptionalVisibilityProperty : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTLPOptionalVisibilityProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPOptionalVisibilityProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPOptionalVisibilityProperty( CLPClassProperty *a_property, CTLPOptionalVisibilityProperty ( CLPBaseClass::*a_getter )() );
  CTLPOptionalVisibilityProperty( CLPClassProperty *a_property, CTLPOptionalVisibilityProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalVisibilityProperty ) );
  CTLPOptionalVisibilityProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPOptionalVisibilityProperty ) );
  CTLPOptionalVisibilityProperty( CLPBaseComponent *a_control, CTLPOptionalVisibilityProperty ( CLPBaseClass::*a_getter )() );
  CTLPOptionalVisibilityProperty( CLPBaseComponent *a_control, CTLPOptionalVisibilityProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalVisibilityProperty ) );
  CTLPOptionalVisibilityProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPOptionalVisibilityProperty( const CTLPOptionalVisibilityProperty &other );

public:
  CTLPOptionalVisibilityProperty & operator = ( const CTLPOptionalVisibilityProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPOptionalVisibilityProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPOptionalVisibilityProperty Value );
};
//------------------------------------------------------------------------------
class CTLPPointProperty : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<int> X;
  CLPProperty<int> Y;

public:
  CTLPPointProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPPointProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPPointProperty( CLPClassProperty *a_property, CTLPPointProperty ( CLPBaseClass::*a_getter )() );
  CTLPPointProperty( CLPClassProperty *a_property, CTLPPointProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPPointProperty ) );
  CTLPPointProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPPointProperty ) );
  CTLPPointProperty( CLPBaseComponent *a_control, CTLPPointProperty ( CLPBaseClass::*a_getter )() );
  CTLPPointProperty( CLPBaseComponent *a_control, CTLPPointProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPPointProperty ) );
  CTLPPointProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPPointProperty( const CTLPPointProperty &other );

public:
  CTLPPointProperty & operator = ( const CTLPPointProperty & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPPointProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPPointProperty Value );
};
//------------------------------------------------------------------------------
class CTLPMasterPumping : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPProperty<int> Priority;

public:
  CTLPMasterPumping( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPMasterPumping( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPMasterPumping( CLPClassProperty *a_property, CTLPMasterPumping ( CLPBaseClass::*a_getter )() );
  CTLPMasterPumping( CLPClassProperty *a_property, CTLPMasterPumping ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPMasterPumping ) );
  CTLPMasterPumping( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPMasterPumping ) );
  CTLPMasterPumping( CLPBaseComponent *a_control, CTLPMasterPumping ( CLPBaseClass::*a_getter )() );
  CTLPMasterPumping( CLPBaseComponent *a_control, CTLPMasterPumping ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPMasterPumping ) );
  CTLPMasterPumping( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPMasterPumping( const CTLPMasterPumping &other );

public:
  CTLPMasterPumping & operator = ( const CTLPMasterPumping & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPMasterPumping ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPMasterPumping Value );
};
//------------------------------------------------------------------------------
class CTLPDefaultEnabledMasterPumping : public CTLPMasterPumping
{
//DOM-IGNORE-BEGIN
  typedef CTLPMasterPumping inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPDefaultEnabledMasterPumping( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPDefaultEnabledMasterPumping( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPDefaultEnabledMasterPumping( CLPClassProperty *a_property, CTLPDefaultEnabledMasterPumping ( CLPBaseClass::*a_getter )() );
  CTLPDefaultEnabledMasterPumping( CLPClassProperty *a_property, CTLPDefaultEnabledMasterPumping ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPDefaultEnabledMasterPumping ) );
  CTLPDefaultEnabledMasterPumping( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPDefaultEnabledMasterPumping ) );
  CTLPDefaultEnabledMasterPumping( CLPBaseComponent *a_control, CTLPDefaultEnabledMasterPumping ( CLPBaseClass::*a_getter )() );
  CTLPDefaultEnabledMasterPumping( CLPBaseComponent *a_control, CTLPDefaultEnabledMasterPumping ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPDefaultEnabledMasterPumping ) );
  CTLPDefaultEnabledMasterPumping( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPDefaultEnabledMasterPumping( const CTLPDefaultEnabledMasterPumping &other );

public:
  CTLPDefaultEnabledMasterPumping & operator = ( const CTLPDefaultEnabledMasterPumping & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPDefaultEnabledMasterPumping ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPDefaultEnabledMasterPumping Value );
};
//------------------------------------------------------------------------------
class CTLPNamedCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTString> Name;

public:
  CTLPNamedCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPNamedCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPNamedCollectionItem( CLPClassProperty *a_property, CTLPNamedCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPNamedCollectionItem( CLPClassProperty *a_property, CTLPNamedCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPNamedCollectionItem ) );
  CTLPNamedCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPNamedCollectionItem ) );
  CTLPNamedCollectionItem( CLPBaseComponent *a_control, CTLPNamedCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPNamedCollectionItem( CLPBaseComponent *a_control, CTLPNamedCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPNamedCollectionItem ) );
  CTLPNamedCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPNamedCollectionItem( const CTLPNamedCollectionItem &other );

public:
  CTLPNamedCollectionItem & operator = ( const CTLPNamedCollectionItem & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPNamedCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPNamedCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTLPOptionalNamedCollectionItem : public CTLPNamedCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTLPNamedCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPOptionalNamedCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPOptionalNamedCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPOptionalNamedCollectionItem( CLPClassProperty *a_property, CTLPOptionalNamedCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPOptionalNamedCollectionItem( CLPClassProperty *a_property, CTLPOptionalNamedCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalNamedCollectionItem ) );
  CTLPOptionalNamedCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPOptionalNamedCollectionItem ) );
  CTLPOptionalNamedCollectionItem( CLPBaseComponent *a_control, CTLPOptionalNamedCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPOptionalNamedCollectionItem( CLPBaseComponent *a_control, CTLPOptionalNamedCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPOptionalNamedCollectionItem ) );
  CTLPOptionalNamedCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPOptionalNamedCollectionItem( const CTLPOptionalNamedCollectionItem &other );

public:
  CTLPOptionalNamedCollectionItem & operator = ( const CTLPOptionalNamedCollectionItem & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPOptionalNamedCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPOptionalNamedCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTLPObjectList : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTLPObjectList,int> Count;

protected:
  int GetCountProp();

public:
  CTLPObjectList( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPObjectList( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPObjectList( CLPClassProperty *a_property, CTLPObjectList ( CLPBaseClass::*a_getter )() );
  CTLPObjectList( CLPClassProperty *a_property, CTLPObjectList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPObjectList ) );
  CTLPObjectList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPObjectList ) );
  CTLPObjectList( CLPBaseComponent *a_control, CTLPObjectList ( CLPBaseClass::*a_getter )() );
  CTLPObjectList( CLPBaseComponent *a_control, CTLPObjectList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPObjectList ) );
  CTLPObjectList( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPObjectList( const CTLPObjectList &other );

public:
  CTLPObjectList & operator = ( const CTLPObjectList & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPObjectList ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPObjectList Value );
};
//------------------------------------------------------------------------------
class CTLPLanguage : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTLPLanguage,LCID> ID;
  CLPReadAccessProperty<CTLPLanguage,CTString> LocalizedName;

protected:
  LCID GetID();
  CTString GetLocalizedName();

public:
  CTLPLanguage( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPLanguage( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPLanguage( CLPClassProperty *a_property, CTLPLanguage ( CLPBaseClass::*a_getter )() );
  CTLPLanguage( CLPClassProperty *a_property, CTLPLanguage ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLanguage ) );
  CTLPLanguage( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPLanguage ) );
  CTLPLanguage( CLPBaseComponent *a_control, CTLPLanguage ( CLPBaseClass::*a_getter )() );
  CTLPLanguage( CLPBaseComponent *a_control, CTLPLanguage ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLanguage ) );
  CTLPLanguage( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPLanguage( const CTLPLanguage &other );

public:
  CTLPLanguage & operator = ( const CTLPLanguage & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPLanguage ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPLanguage Value );
};
//------------------------------------------------------------------------------
#include <CLPComponentCode.h>
//------------------------------------------------------------------------------
#endif   // CLPComponent_H_
//------------------------------------------------------------------------------
