//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILProgressBarCode_H_
#define CILProgressBarCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPClassProperty *a_property, CTILProgressBarBlock ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPClassProperty *a_property, CTILProgressBarBlock ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBlock ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarBlock ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPBaseComponent *a_control, CTILProgressBarBlock ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( CLPBaseComponent *a_control, CTILProgressBarBlock ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBlock ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::CTILProgressBarBlock( const CTILProgressBarBlock &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" ))),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Monolithic( GetInstance(), _T( "Monolithic" ) ),
  Monochrome( GetInstance(), _T( "Monochrome" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock::~CTILProgressBarBlock()
{
  delete &Size;
  delete &Gap;
  delete &EdgeRadius;
}
//------------------------------------------------------------------------------
inline CTILProgressBarBlock & CTILProgressBarBlock::operator = ( const CTILProgressBarBlock & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILProgressBarBlock::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPClassProperty *a_property, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPClassProperty *a_property, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGaugeBackground ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarGaugeBackground ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPBaseComponent *a_control, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( CLPBaseComponent *a_control, CTILProgressBarGaugeBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGaugeBackground ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground::CTILProgressBarGaugeBackground( const CTILProgressBarGaugeBackground &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  BlockColor( GetInstance(), _T( "BlockColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGaugeBackground & CTILProgressBarGaugeBackground::operator = ( const CTILProgressBarGaugeBackground & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILProgressBarGaugeBackground::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPClassProperty *a_property, CTILProgressBarGauge ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPClassProperty *a_property, CTILProgressBarGauge ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGauge ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarGauge ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPBaseComponent *a_control, CTILProgressBarGauge ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( CLPBaseComponent *a_control, CTILProgressBarGauge ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarGauge ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::CTILProgressBarGauge( const CTILProgressBarGauge &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Kind( GetInstance(), _T( "Kind" ) ),
  Blocks( *new CTILProgressBarBlock( GetInstance(), _T( "Blocks" ))),
  EdgeRadius( *new CTULElementSize( GetInstance(), _T( "EdgeRadius" ))),
  Colors( *new CTULColorItems( GetInstance(), _T( "Colors" ))),
  Background( *new CTILProgressBarGaugeBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge::~CTILProgressBarGauge()
{
  delete &Blocks;
  delete &EdgeRadius;
  delete &Colors;
  delete &Background;
}
//------------------------------------------------------------------------------
inline CTILProgressBarGauge & CTILProgressBarGauge::operator = ( const CTILProgressBarGauge & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILProgressBarGauge::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPClassProperty *a_property, CTILProgressBarBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPClassProperty *a_property, CTILProgressBarBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILProgressBarBorder ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPBaseComponent *a_control, CTILProgressBarBorder ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( CLPBaseComponent *a_control, CTILProgressBarBorder ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILProgressBarBorder ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::CTILProgressBarBorder( const CTILProgressBarBorder &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  CornerRadius( *new CTULElementSize( GetInstance(), _T( "CornerRadius" )))
{
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder::~CTILProgressBarBorder()
{
  delete &Gap;
  delete &CornerRadius;
}
//------------------------------------------------------------------------------
inline CTILProgressBarBorder & CTILProgressBarBorder::operator = ( const CTILProgressBarBorder & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILProgressBarBorder::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILBasicProgressBar::CTILBasicProgressBar() :
  Color( GetInstance(), _T( "Color" ) ),
  Border( *new CTILProgressBarBorder( GetInstance(), _T( "Border" ))),
  Gauge( *new CTILProgressBarGauge( GetInstance(), _T( "Gauge" ))),
  Rotation( *new CTILRotation( GetInstance(), _T( "Rotation" ))),
  Elements( *new CTLPGaugeComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicProgressBar::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicProgressBar::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicProgressBar::~CTILBasicProgressBar()
{
  delete &Border;
  delete &Gauge;
  delete &Rotation;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicProgressBar::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalProgressBar::CTILExternalProgressBar() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalProgressBar::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILExternalProgressBar::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalProgressBar::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILProgressBar::CTILProgressBar( HWND hParent ) :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILProgressBar::CTILProgressBar() :
  Background( *new CTULControlBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline void CTILProgressBar::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILProgressBar" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILProgressBar::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILProgressBar" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILProgressBar::~CTILProgressBar()
{
  delete &Background;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILProgressBar::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILProgressBarLayer::CTILProgressBarLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILProgressBarLayer::CTILProgressBarLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILProgressBarLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILProgressBarLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILProgressBarLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILProgressBarLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILProgressBarLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline void CTILBasicProgressBarElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicProgressBarElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicProgressBarElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILProgressBarElement::CTILProgressBarElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILProgressBarElement::CTILProgressBarElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILProgressBarElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILProgressBarElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILProgressBarElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILProgressBarElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILProgressBarElement::~CTILProgressBarElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILProgressBarElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalProgressBarElement::CTILExternalProgressBarElement( HWND hParent ) :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalProgressBarElement::CTILExternalProgressBarElement() :
  InputPin( GetInstance(), _T( "InputPin" ) ),
  Value( GetInstance(), _T( "Value" ) ),
  Max( GetInstance(), _T( "Max" ) ),
  Min( GetInstance(), _T( "Min" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILExternalProgressBarElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalProgressBarElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalProgressBarElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalProgressBarElement" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalProgressBarElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalProgressBarMatrixLayer::CTILExternalProgressBarMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalProgressBarMatrixLayer::CTILExternalProgressBarMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalProgressBarMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalProgressBarMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalProgressBarMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalProgressBarMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalProgressBarMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILProgressBarCode_H_
//------------------------------------------------------------------------------
