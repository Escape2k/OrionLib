//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILSegmentIndicatorCode_H_
#define CILSegmentIndicatorCode_H_

#pragma optimize( "", off )
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPClassProperty *a_property, CTILCustomSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPClassProperty *a_property, CTILCustomSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILCustomSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILCustomSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPBaseComponent *a_control, CTILCustomSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( CLPBaseComponent *a_control, CTILCustomSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILCustomSegment ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment::CTILCustomSegment( const CTILCustomSegment &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetVisible, &CTILCustomSegment::SetVisible),
  Value( (CTILCustomSegment *)GetInstance(), &CTILCustomSegment::GetValue, &CTILCustomSegment::SetValue)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegment & CTILCustomSegment::operator = ( const CTILCustomSegment & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILCustomSegment::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline bool CTILCustomSegment::GetVisible()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegment@GetVisible$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILCustomSegment::SetVisible( bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegment@SetVisible$qqro" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTILCustomSegment::GetValue()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegment@GetValue$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILCustomSegment::SetValue( bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegment@SetValue$qqro" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPClassProperty *a_property, CTILCustomSegments ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPClassProperty *a_property, CTILCustomSegments ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILCustomSegments ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILCustomSegments ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPBaseComponent *a_control, CTILCustomSegments ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( CLPBaseComponent *a_control, CTILCustomSegments ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILCustomSegments ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::CTILCustomSegments( const CTILCustomSegments &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  DecimalPoint( *new CTILCustomSegment( GetInstance(), ( CTILCustomSegment ( CLPBaseClass::* )() ) &::CTILCustomSegments::GetDecimalPoint )),
  Segments( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetSegment),
  Count( (CTILCustomSegments *)GetInstance(), &CTILCustomSegments::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILCustomSegments::~CTILCustomSegments()
{
  delete &DecimalPoint;
}
//------------------------------------------------------------------------------
inline CTILCustomSegments & CTILCustomSegments::operator = ( const CTILCustomSegments & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILCustomSegments::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILCustomSegment CTILCustomSegments::GetDecimalPoint()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegments@GetDecimalPoint$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTILCustomSegment)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline CTILCustomSegment CTILCustomSegments::GetSegment( unsigned int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegments@GetSegment$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  edx
      pop  eax
      }
    }

  return (CTILCustomSegment)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline unsigned int CTILCustomSegments::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILCustomSegments@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  unsigned int __0_RtnValue_ = (unsigned int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (unsigned int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPClassProperty *a_property, CTILSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPClassProperty *a_property, CTILSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPBaseComponent *a_control, CTILSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( CLPBaseComponent *a_control, CTILSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegment ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::CTILSegment( const CTILSegment &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Gap( *new CTULElementSize( GetInstance(), _T( "Gap" ))),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" ))),
  Color( GetInstance(), _T( "Color" ) ),
  CenterColor( GetInstance(), _T( "CenterColor" ) ),
  InactiveColor( *new CTILInactiveColor( GetInstance(), _T( "InactiveColor" ))),
  ShowGlow( GetInstance(), _T( "ShowGlow" ) )
{
}
//------------------------------------------------------------------------------
inline CTILSegment::~CTILSegment()
{
  delete &Gap;
  delete &Width;
  delete &InactiveColor;
}
//------------------------------------------------------------------------------
inline CTILSegment & CTILSegment::operator = ( const CTILSegment & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegment::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPClassProperty *a_property, CTILSegmentSeparator ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPClassProperty *a_property, CTILSegmentSeparator ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentSeparator ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentSeparator ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPBaseComponent *a_control, CTILSegmentSeparator ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( CLPBaseComponent *a_control, CTILSegmentSeparator ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentSeparator ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::CTILSegmentSeparator( const CTILSegmentSeparator &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( *new CTULElementSize( GetInstance(), _T( "Width" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator::~CTILSegmentSeparator()
{
  delete &Width;
}
//------------------------------------------------------------------------------
inline CTILSegmentSeparator & CTILSegmentSeparator::operator = ( const CTILSegmentSeparator & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentSeparator::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPClassProperty *a_property, CTILSegmentIndents ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPClassProperty *a_property, CTILSegmentIndents ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentIndents ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentIndents ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPBaseComponent *a_control, CTILSegmentIndents ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( CLPBaseComponent *a_control, CTILSegmentIndents ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentIndents ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::CTILSegmentIndents( const CTILSegmentIndents &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Left( *new CTULElementSize( GetInstance(), _T( "Left" ))),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Top( *new CTULElementSize( GetInstance(), _T( "Top" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents::~CTILSegmentIndents()
{
  delete &Left;
  delete &Right;
  delete &Top;
  delete &Bottom;
}
//------------------------------------------------------------------------------
inline CTILSegmentIndents & CTILSegmentIndents::operator = ( const CTILSegmentIndents & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentIndents::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPClassProperty *a_property, CTILDecimalPointOffset ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPClassProperty *a_property, CTILDecimalPointOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDecimalPointOffset ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDecimalPointOffset ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPBaseComponent *a_control, CTILDecimalPointOffset ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( CLPBaseComponent *a_control, CTILDecimalPointOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDecimalPointOffset ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::CTILDecimalPointOffset( const CTILDecimalPointOffset &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Right( *new CTULElementSize( GetInstance(), _T( "Right" ))),
  Bottom( *new CTULElementSize( GetInstance(), _T( "Bottom" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset::~CTILDecimalPointOffset()
{
  delete &Right;
  delete &Bottom;
}
//------------------------------------------------------------------------------
inline CTILDecimalPointOffset & CTILDecimalPointOffset::operator = ( const CTILDecimalPointOffset & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILDecimalPointOffset::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPClassProperty *a_property, CTILDecimalPointSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPClassProperty *a_property, CTILDecimalPointSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDecimalPointSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDecimalPointSegment ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPBaseComponent *a_control, CTILDecimalPointSegment ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( CLPBaseComponent *a_control, CTILDecimalPointSegment ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDecimalPointSegment ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::CTILDecimalPointSegment( const CTILDecimalPointSegment &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Offset( *new CTILDecimalPointOffset( GetInstance(), _T( "Offset" ))),
  Size( *new CTULElementSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment::~CTILDecimalPointSegment()
{
  delete &Offset;
  delete &Size;
}
//------------------------------------------------------------------------------
inline CTILDecimalPointSegment & CTILDecimalPointSegment::operator = ( const CTILDecimalPointSegment & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILDecimalPointSegment::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPClassProperty *a_property, CTILSegmentValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPClassProperty *a_property, CTILSegmentValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPBaseComponent *a_control, CTILSegmentValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( CLPBaseComponent *a_control, CTILSegmentValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentValue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue::CTILSegmentValue( const CTILSegmentValue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Names( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetName),
  Values( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetValue, &CTILSegmentValue::SetValue),
  Count( (CTILSegmentValue *)GetInstance(), &CTILSegmentValue::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTILSegmentValue & CTILSegmentValue::operator = ( const CTILSegmentValue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTILSegmentValue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTString CTILSegmentValue::GetName( unsigned int Index )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILSegmentValue@GetName$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTString __0_RtnValue_;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = Index;

    VCLHANDLE __0_RtnValue_TMP_ = ::VCL_CallUnicodeStringGetMember( __0_ThisPtr_, (VCLHANDLE)__0_FuncPtr_ );
    if( __0_RtnValue_TMP_ )
      {
      __0_RtnValue_ = ::VCL_GetUnicodeCString( __0_RtnValue_TMP_ );
      VCL_DestroyUnicodeString( __0_RtnValue_TMP_ );
      }
    }

  return (CTString)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline bool CTILSegmentValue::GetValue( unsigned int Index )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILSegmentValue@GetValue$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = Index;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  edx
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTILSegmentValue::SetValue( unsigned int Index, bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILSegmentValue@SetValue$qqruio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = Index;
    unsigned char __1_Param2 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  cl,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline unsigned int CTILSegmentValue::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Ilsegmentindicator@TILSegmentValue@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  unsigned int __0_RtnValue_ = (unsigned int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (unsigned int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILBasicSegmentIndicator::CTILBasicSegmentIndicator() :
  SegmentsType( GetInstance(), _T( "SegmentsType" ) ),
  Segments( *new CTILSegment( GetInstance(), _T( "Segments" ))),
  DecimalPoint( *new CTILDecimalPointSegment( GetInstance(), _T( "DecimalPoint" ))),
  Indents( *new CTILSegmentIndents( GetInstance(), _T( "Indents" )))
{
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentIndicator::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILBasicSegmentIndicator::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline CTILBasicSegmentIndicator::~CTILBasicSegmentIndicator()
{
  delete &Segments;
  delete &DecimalPoint;
  delete &Indents;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILBasicSegmentIndicator::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILCustomizableSegmentIndicator::CTILCustomizableSegmentIndicator() :
  OnCustomSymbol( GetInstance(), _T( "OnCustomSymbol" ) )
{
}
//------------------------------------------------------------------------------
inline void CTILCustomizableSegmentIndicator::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline void CTILCustomizableSegmentIndicator::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILCustomizableSegmentIndicator::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentIndicator::CTILSegmentIndicator( HWND hParent ) :
  InputPins( GetInstance(), _T( "InputPins" ) ),
  Value( *new CTILSegmentValue( GetInstance(), _T( "Value" ))),
  Elements( *new CTLPComponentElements( GetInstance(), _T( "Elements" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentIndicator::CTILSegmentIndicator() :
  InputPins( GetInstance(), _T( "InputPins" ) ),
  Value( *new CTILSegmentValue( GetInstance(), _T( "Value" ))),
  Elements( *new CTLPComponentElements( GetInstance(), _T( "Elements" )))
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentIndicator::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentIndicator" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentIndicator::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentIndicator" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentIndicator::~CTILSegmentIndicator()
{
  delete &Value;
  delete &Elements;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentIndicator::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILSegmentIndicatorLayer::CTILSegmentIndicatorLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILSegmentIndicatorLayer::CTILSegmentIndicatorLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILSegmentIndicatorLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentIndicatorLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILSegmentIndicatorLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILSegmentIndicatorLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILSegmentIndicatorLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSegmentIndicatorElement::CTILExternalSegmentIndicatorElement( HWND hParent ) :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentIndicatorElement::CTILExternalSegmentIndicatorElement() :
  Position( *new CTULElementOffsets( GetInstance(), _T( "Position" ))),
  Size( *new CTULElement2DSize( GetInstance(), _T( "Size" )))
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentIndicatorElement::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentIndicatorElement" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentIndicatorElement::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentIndicatorElement" ), hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentIndicatorElement::~CTILExternalSegmentIndicatorElement()
{
  delete &Position;
  delete &Size;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSegmentIndicatorElement::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTILExternalSegmentIndicatorMatrixLayer::CTILExternalSegmentIndicatorMatrixLayer( HWND hParent )
{
  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTILExternalSegmentIndicatorMatrixLayer::CTILExternalSegmentIndicatorMatrixLayer()
{
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentIndicatorMatrixLayer::Open( HWND hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentIndicatorMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline void CTILExternalSegmentIndicatorMatrixLayer::Open( CLPControl &hParent )
{
  inherited::Open( hParent );

  LibraryHandle = ::Get_InstrumentLabPkgRAD();
  CLPControl::OpenControl( _T( "TILExternalSegmentIndicatorMatrixLayer" ), hParent );
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTILExternalSegmentIndicatorMatrixLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#pragma optimize( "", on )
#endif   // CILSegmentIndicatorCode_H_
//------------------------------------------------------------------------------
