//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILLinearGauge_H_
#define CILLinearGauge_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILLinearGaugeHand : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Width;
  class CTULElementSize &TipWidth;
  class CTULElementSize &TipLength;
  class CTULElementSize &TailIndentSize;
  class CTULElementSize &Length;
  class CTILElementShadow &Shadow;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:

public:
  CTILLinearGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILLinearGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILLinearGaugeHand( CLPClassProperty *a_property, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILLinearGaugeHand( CLPClassProperty *a_property, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeHand ) );
  CTILLinearGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLinearGaugeHand ) );
  CTILLinearGaugeHand( CLPBaseComponent *a_control, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILLinearGaugeHand( CLPBaseComponent *a_control, CTILLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeHand ) );
  CTILLinearGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILLinearGaugeHand( const CTILLinearGaugeHand &other );
  virtual ~CTILLinearGaugeHand();

public:
  CTILLinearGaugeHand & operator = ( const CTILLinearGaugeHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILLinearGaugeHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILLinearGaugeHand Value );
};
//------------------------------------------------------------------------------
class CTILOptionalLinearGaugeHand : public CTILLinearGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILLinearGaugeHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:

public:
  CTILOptionalLinearGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalLinearGaugeHand ) );
  CTILOptionalLinearGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILOptionalLinearGaugeHand ) );
  CTILOptionalLinearGaugeHand( CLPBaseComponent *a_control, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILOptionalLinearGaugeHand( CLPBaseComponent *a_control, CTILOptionalLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILOptionalLinearGaugeHand ) );
  CTILOptionalLinearGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILOptionalLinearGaugeHand( const CTILOptionalLinearGaugeHand &other );

public:
  CTILOptionalLinearGaugeHand & operator = ( const CTILOptionalLinearGaugeHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILOptionalLinearGaugeHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILOptionalLinearGaugeHand Value );
};
//------------------------------------------------------------------------------
class CTILControlLinearGaugeHand : public CTILLinearGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILLinearGaugeHand inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> SelectedColor;
  CLPProperty<CTGPColor> MouseOverColor;
  CLPProperty<CTGPColor> SelectedMouseOverColor;
  CLPAccessProperty<CTILControlLinearGaugeHand,bool> Selected;

protected:
  void SetSelected( bool AValue );
  bool GetVC_Selected();

public:

public:
  CTILControlLinearGaugeHand( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILControlLinearGaugeHand( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILControlLinearGaugeHand( CLPClassProperty *a_property, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILControlLinearGaugeHand( CLPClassProperty *a_property, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlLinearGaugeHand ) );
  CTILControlLinearGaugeHand( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILControlLinearGaugeHand ) );
  CTILControlLinearGaugeHand( CLPBaseComponent *a_control, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )() );
  CTILControlLinearGaugeHand( CLPBaseComponent *a_control, CTILControlLinearGaugeHand ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILControlLinearGaugeHand ) );
  CTILControlLinearGaugeHand( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILControlLinearGaugeHand( const CTILControlLinearGaugeHand &other );

public:
  CTILControlLinearGaugeHand & operator = ( const CTILControlLinearGaugeHand & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILControlLinearGaugeHand ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILControlLinearGaugeHand Value );
};
//------------------------------------------------------------------------------
class CTILLinearGaugeRail : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElementSize &Width;
  class CTULElementSize &Length;

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<CTGPColor> Color;

public:
  CTILLinearGaugeRail( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILLinearGaugeRail( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILLinearGaugeRail( CLPClassProperty *a_property, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )() );
  CTILLinearGaugeRail( CLPClassProperty *a_property, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRail ) );
  CTILLinearGaugeRail( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRail ) );
  CTILLinearGaugeRail( CLPBaseComponent *a_control, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )() );
  CTILLinearGaugeRail( CLPBaseComponent *a_control, CTILLinearGaugeRail ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRail ) );
  CTILLinearGaugeRail( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILLinearGaugeRail( const CTILLinearGaugeRail &other );
  virtual ~CTILLinearGaugeRail();

public:
  CTILLinearGaugeRail & operator = ( const CTILLinearGaugeRail & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILLinearGaugeRail ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILLinearGaugeRail Value );
};
//------------------------------------------------------------------------------
class CTILLinearGaugeRotation : public CTILRotation
{
//DOM-IGNORE-BEGIN
  typedef CTILRotation inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<float> Width;

public:
  CTILLinearGaugeRotation( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILLinearGaugeRotation( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILLinearGaugeRotation( CLPClassProperty *a_property, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )() );
  CTILLinearGaugeRotation( CLPClassProperty *a_property, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRotation ) );
  CTILLinearGaugeRotation( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRotation ) );
  CTILLinearGaugeRotation( CLPBaseComponent *a_control, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )() );
  CTILLinearGaugeRotation( CLPBaseComponent *a_control, CTILLinearGaugeRotation ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILLinearGaugeRotation ) );
  CTILLinearGaugeRotation( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILLinearGaugeRotation( const CTILLinearGaugeRotation &other );

public:
  CTILLinearGaugeRotation & operator = ( const CTILLinearGaugeRotation & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILLinearGaugeRotation ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILLinearGaugeRotation Value );
};
//------------------------------------------------------------------------------
class CTILBasicLinearGauge : public CTILBasicMinMaxInstrument
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicMinMaxInstrument inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULRectControlBorder &Border;
  class CTILReversibleGaugeScale &Scale;
  class CTULVerticalCaption &Caption;
  class CTILGlass &Glass;
  class CTILLinearGaugeRail &Rail;
  class CTILOptionalLinearGaugeHand &Hand;
  class CTILAnalogGaugeScaleRanges &Ranges;
  class CTILLinearGaugeRotation &Rotation;
  class CTLPLinearAnalogComponentElements &Elements;

public:    // Properties
  CLPProperty<CTGPColor> Color;
  CLPProperty<bool> Curved;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicLinearGauge();
  virtual ~CTILBasicLinearGauge();
};
//------------------------------------------------------------------------------
class CTILExternalLinearGauge : public CTILBasicLinearGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLinearGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalLinearGauge();
};
//------------------------------------------------------------------------------
class CTILLinearGauge : public CTILExternalLinearGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLinearGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULControlBackground &Background;

public:    // Properties
  CLPProperty<bool> TabStop;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILLinearGauge( HWND hParent );
  CTILLinearGauge();
  virtual ~CTILLinearGauge();
};
//------------------------------------------------------------------------------
class CTILLinearGaugeLayer : public CTILExternalLinearGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLinearGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILLinearGaugeLayer( HWND hParent );
  CTILLinearGaugeLayer();
};
//------------------------------------------------------------------------------
class CTILBasicLinearGaugeElement : public CTILBasicLinearGauge
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLinearGauge inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILLinearGaugeElement : public CTILBasicLinearGaugeElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLinearGaugeElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILLinearGaugeElement( HWND hParent );
  CTILLinearGaugeElement();
  virtual ~CTILLinearGaugeElement();
};
//------------------------------------------------------------------------------
class CTILExternalLinearGaugeElement : public CTILLinearGaugeElement
{
//DOM-IGNORE-BEGIN
  typedef CTILLinearGaugeElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<double> Max;
  CLPProperty<double> Min;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalLinearGaugeElement( HWND hParent );
  CTILExternalLinearGaugeElement();
};
//------------------------------------------------------------------------------
class CTILExternalLinearGaugeMatrixLayer : public CTILExternalLinearGaugeElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalLinearGaugeElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalLinearGaugeMatrixLayer( HWND hParent );
  CTILExternalLinearGaugeMatrixLayer();
};
//------------------------------------------------------------------------------
class CTILBasicLinearGaugeHand : public CTLPDrawComponentElement
{
//DOM-IGNORE-BEGIN
  typedef CTLPDrawComponentElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  CTILBasicLinearGaugeHand();
};
//------------------------------------------------------------------------------
class CTILBasicExternalLinearGaugeHandElement : public CTILBasicLinearGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLinearGaugeHand inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTILGaugeHandMinMax &Range;

public:    // Properties
  CLPProperty<double> Value;

public:

public:
  CTILBasicExternalLinearGaugeHandElement();
  virtual ~CTILBasicExternalLinearGaugeHandElement();
};
//------------------------------------------------------------------------------
class CTILExternalLinearGaugeControlHandElement : public CTILBasicExternalLinearGaugeHandElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicExternalLinearGaugeHandElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWStatePinProperty StatePin;

public:    // Class Properties
  class CTILControlLinearGaugeHand &Hand;

protected:
  CTILControlLinearGaugeHand GetHand();
  void SetHand( CTILControlLinearGaugeHand AValue );

public:

public:
  CTILExternalLinearGaugeControlHandElement();
  virtual ~CTILExternalLinearGaugeControlHandElement();
};
//------------------------------------------------------------------------------
class CTILExternalLinearGaugeHandElement : public CTILBasicExternalLinearGaugeHandElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicExternalLinearGaugeHandElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Class Properties
  class CTILLinearGaugeHand &Hand;

public:
  CTILExternalLinearGaugeHandElement();
  virtual ~CTILExternalLinearGaugeHandElement();
};
//------------------------------------------------------------------------------
class CTILLinearGaugeMinMaxHandElement : public CTILBasicLinearGaugeHand
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicLinearGaugeHand inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty ResetPin;

public:    // Class Properties
  class CTILGaugeMinMaxAutoReset &AutoReset;
  class CTILLinearGaugeHand &Hand;

public:    // Properties
  CLPEnumProperty<CTILGaugeMinMaxMode> Mode;

public:
  void Reset();

public:
  CTILLinearGaugeMinMaxHandElement();
  virtual ~CTILLinearGaugeMinMaxHandElement();
};
//------------------------------------------------------------------------------
#include <CILLinearGaugeCode.h>
//------------------------------------------------------------------------------
#endif   // CILLinearGauge_H_
//------------------------------------------------------------------------------
