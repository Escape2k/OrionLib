//------------------------------------------------------------------------------
//
//                   Generated by VCL C++/C#.NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2011
//                              www.mitov.com
//
//------------------------------------------------------------------------------

#ifndef CILSegmentClock_H_
#define CILSegmentClock_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CInstrumentLabPkgRAD_H_
  #include <CInstrumentLabPkgRAD.h>
#endif
#ifndef CILBasicInstrument_H_
  #include <CILBasicInstrument.h>
#endif
#ifndef CILAnalogInstrument_H_
  #include <CILAnalogInstrument.h>
#endif
#ifndef CULBasicControl_H_
  #include <CULBasicControl.h>
#endif
#ifndef CILSegmentIndicator_H_
  #include <CILSegmentIndicator.h>
#endif
#ifndef CSLControlCollection_H_
  #include <CSLControlCollection.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CLPComponent_H_
  #include <CLPComponent.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif
//------------------------------------------------------------------------------




//------------------------------------------------------------------------------
class CTILPointOffset : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Left;
  class CTULElementSize &Top;

public:
  CTILPointOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILPointOffset( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILPointOffset( CLPClassProperty *a_property, CTILPointOffset ( CLPBaseClass::*a_getter )() );
  CTILPointOffset( CLPClassProperty *a_property, CTILPointOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPointOffset ) );
  CTILPointOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILPointOffset ) );
  CTILPointOffset( CLPBaseComponent *a_control, CTILPointOffset ( CLPBaseClass::*a_getter )() );
  CTILPointOffset( CLPBaseComponent *a_control, CTILPointOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILPointOffset ) );
  CTILPointOffset( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILPointOffset( const CTILPointOffset &other );
  virtual ~CTILPointOffset();

public:
  CTILPointOffset & operator = ( const CTILPointOffset & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILPointOffset ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILPointOffset Value );
};
//------------------------------------------------------------------------------
class CTILSegmentPoint : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILPointOffset &Offset;
  class CTULElementSize &Size;

public:
  CTILSegmentPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSegmentPoint( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSegmentPoint( CLPClassProperty *a_property, CTILSegmentPoint ( CLPBaseClass::*a_getter )() );
  CTILSegmentPoint( CLPClassProperty *a_property, CTILSegmentPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoint ) );
  CTILSegmentPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentPoint ) );
  CTILSegmentPoint( CLPBaseComponent *a_control, CTILSegmentPoint ( CLPBaseClass::*a_getter )() );
  CTILSegmentPoint( CLPBaseComponent *a_control, CTILSegmentPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoint ) );
  CTILSegmentPoint( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSegmentPoint( const CTILSegmentPoint &other );
  virtual ~CTILSegmentPoint();

public:
  CTILSegmentPoint & operator = ( const CTILSegmentPoint & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSegmentPoint ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSegmentPoint Value );
};
//------------------------------------------------------------------------------
class CTILSegmentPoints : public CLPCollectionProperty<CTILSegmentPoint>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTILSegmentPoint> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTILSegmentPoints( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSegmentPoints( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSegmentPoints( CLPClassProperty *a_property, CTILSegmentPoints ( CLPBaseClass::*a_getter )() );
  CTILSegmentPoints( CLPClassProperty *a_property, CTILSegmentPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoints ) );
  CTILSegmentPoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentPoints ) );
  CTILSegmentPoints( CLPBaseComponent *a_control, CTILSegmentPoints ( CLPBaseClass::*a_getter )() );
  CTILSegmentPoints( CLPBaseComponent *a_control, CTILSegmentPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentPoints ) );
  CTILSegmentPoints( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSegmentPoints( const CTILSegmentPoints &other );

public:
  CTILSegmentPoints & operator = ( const CTILSegmentPoints & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSegmentPoints ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSegmentPoints Value );
};
//------------------------------------------------------------------------------
class CTILSegmentClockSeparator : public CTILSegmentSeparator
{
//DOM-IGNORE-BEGIN
  typedef CTILSegmentSeparator inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILSegmentPoints &Points;

public:
  CTILSegmentClockSeparator( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSegmentClockSeparator( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSegmentClockSeparator( CLPClassProperty *a_property, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )() );
  CTILSegmentClockSeparator( CLPClassProperty *a_property, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentClockSeparator ) );
  CTILSegmentClockSeparator( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentClockSeparator ) );
  CTILSegmentClockSeparator( CLPBaseComponent *a_control, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )() );
  CTILSegmentClockSeparator( CLPBaseComponent *a_control, CTILSegmentClockSeparator ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentClockSeparator ) );
  CTILSegmentClockSeparator( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSegmentClockSeparator( const CTILSegmentClockSeparator &other );
  virtual ~CTILSegmentClockSeparator();

public:
  CTILSegmentClockSeparator & operator = ( const CTILSegmentClockSeparator & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSegmentClockSeparator ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSegmentClockSeparator Value );
};
//------------------------------------------------------------------------------
class CTILSegmentFont : public CTLPGPBasicFont
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPBasicFont inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTULElementSize &Size;

public:
  CTILSegmentFont( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILSegmentFont( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILSegmentFont( CLPClassProperty *a_property, CTILSegmentFont ( CLPBaseClass::*a_getter )() );
  CTILSegmentFont( CLPClassProperty *a_property, CTILSegmentFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentFont ) );
  CTILSegmentFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILSegmentFont ) );
  CTILSegmentFont( CLPBaseComponent *a_control, CTILSegmentFont ( CLPBaseClass::*a_getter )() );
  CTILSegmentFont( CLPBaseComponent *a_control, CTILSegmentFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILSegmentFont ) );
  CTILSegmentFont( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILSegmentFont( const CTILSegmentFont &other );
  virtual ~CTILSegmentFont();

public:
  CTILSegmentFont & operator = ( const CTILSegmentFont & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILSegmentFont ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILSegmentFont Value );
};
//------------------------------------------------------------------------------
class CTILDigitalAmPmSection : public CTILSegmentSeparator
{
//DOM-IGNORE-BEGIN
  typedef CTILSegmentSeparator inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILSegmentFont &Font;
  class CTILPointOffset &AmPosition;
  class CTILPointOffset &PmPosition;

public:
  CTILDigitalAmPmSection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILDigitalAmPmSection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILDigitalAmPmSection( CLPClassProperty *a_property, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )() );
  CTILDigitalAmPmSection( CLPClassProperty *a_property, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalAmPmSection ) );
  CTILDigitalAmPmSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalAmPmSection ) );
  CTILDigitalAmPmSection( CLPBaseComponent *a_control, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )() );
  CTILDigitalAmPmSection( CLPBaseComponent *a_control, CTILDigitalAmPmSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalAmPmSection ) );
  CTILDigitalAmPmSection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILDigitalAmPmSection( const CTILDigitalAmPmSection &other );
  virtual ~CTILDigitalAmPmSection();

public:
  CTILDigitalAmPmSection & operator = ( const CTILDigitalAmPmSection & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILDigitalAmPmSection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILDigitalAmPmSection Value );
};
//------------------------------------------------------------------------------
class CTILDigitalClockSection : public CTULOptionalInstrumentProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULOptionalInstrumentProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILSegmentClockSeparator &Separator;

public:
  CTILDigitalClockSection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILDigitalClockSection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILDigitalClockSection( CLPClassProperty *a_property, CTILDigitalClockSection ( CLPBaseClass::*a_getter )() );
  CTILDigitalClockSection( CLPClassProperty *a_property, CTILDigitalClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSection ) );
  CTILDigitalClockSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalClockSection ) );
  CTILDigitalClockSection( CLPBaseComponent *a_control, CTILDigitalClockSection ( CLPBaseClass::*a_getter )() );
  CTILDigitalClockSection( CLPBaseComponent *a_control, CTILDigitalClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSection ) );
  CTILDigitalClockSection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILDigitalClockSection( const CTILDigitalClockSection &other );
  virtual ~CTILDigitalClockSection();

public:
  CTILDigitalClockSection & operator = ( const CTILDigitalClockSection & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILDigitalClockSection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILDigitalClockSection Value );
};
//------------------------------------------------------------------------------
class CTILMillisecondsClockSection : public CTILDigitalClockSection
{
//DOM-IGNORE-BEGIN
  typedef CTILDigitalClockSection inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<unsigned int> NumberDigits;
  CLPProperty<bool> Visible;

public:
  CTILMillisecondsClockSection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILMillisecondsClockSection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILMillisecondsClockSection( CLPClassProperty *a_property, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )() );
  CTILMillisecondsClockSection( CLPClassProperty *a_property, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILMillisecondsClockSection ) );
  CTILMillisecondsClockSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILMillisecondsClockSection ) );
  CTILMillisecondsClockSection( CLPBaseComponent *a_control, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )() );
  CTILMillisecondsClockSection( CLPBaseComponent *a_control, CTILMillisecondsClockSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILMillisecondsClockSection ) );
  CTILMillisecondsClockSection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILMillisecondsClockSection( const CTILMillisecondsClockSection &other );

public:
  CTILMillisecondsClockSection & operator = ( const CTILMillisecondsClockSection & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILMillisecondsClockSection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILMillisecondsClockSection Value );
};
//------------------------------------------------------------------------------
class CTILDigitalHourSection : public CTULOptionalInstrumentProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULOptionalInstrumentProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Mode24Hours;
  CLPProperty<bool> LeadingZero;

public:
  CTILDigitalHourSection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILDigitalHourSection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILDigitalHourSection( CLPClassProperty *a_property, CTILDigitalHourSection ( CLPBaseClass::*a_getter )() );
  CTILDigitalHourSection( CLPClassProperty *a_property, CTILDigitalHourSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalHourSection ) );
  CTILDigitalHourSection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalHourSection ) );
  CTILDigitalHourSection( CLPBaseComponent *a_control, CTILDigitalHourSection ( CLPBaseClass::*a_getter )() );
  CTILDigitalHourSection( CLPBaseComponent *a_control, CTILDigitalHourSection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalHourSection ) );
  CTILDigitalHourSection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILDigitalHourSection( const CTILDigitalHourSection &other );

public:
  CTILDigitalHourSection & operator = ( const CTILDigitalHourSection & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILDigitalHourSection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILDigitalHourSection Value );
};
//------------------------------------------------------------------------------
class CTILDigitalClockSections : public CTULBasicControlProperty
{
//DOM-IGNORE-BEGIN
  typedef CTULBasicControlProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_InstrumentLabPkgRAD(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTILDigitalHourSection &Hours;
  class CTILDigitalClockSection &Minutes;
  class CTILDigitalClockSection &Seconds;
  class CTILMillisecondsClockSection &Milliseconds;
  class CTILDigitalAmPmSection &AmPm;

public:
  CTILDigitalClockSections( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTILDigitalClockSections( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTILDigitalClockSections( CLPClassProperty *a_property, CTILDigitalClockSections ( CLPBaseClass::*a_getter )() );
  CTILDigitalClockSections( CLPClassProperty *a_property, CTILDigitalClockSections ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSections ) );
  CTILDigitalClockSections( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTILDigitalClockSections ) );
  CTILDigitalClockSections( CLPBaseComponent *a_control, CTILDigitalClockSections ( CLPBaseClass::*a_getter )() );
  CTILDigitalClockSections( CLPBaseComponent *a_control, CTILDigitalClockSections ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTILDigitalClockSections ) );
  CTILDigitalClockSections( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTILDigitalClockSections( const CTILDigitalClockSections &other );
  virtual ~CTILDigitalClockSections();

public:
  CTILDigitalClockSections & operator = ( const CTILDigitalClockSections & other );

public:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTILDigitalClockSections ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTILDigitalClockSections Value );
};
//------------------------------------------------------------------------------
class CTILBasicSegmentClock : public CTILCustomizableSegmentIndicator
{
//DOM-IGNORE-BEGIN
  typedef CTILCustomizableSegmentIndicator inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTILDigitalClockSections &Sections;
  class CTLPClockComponentElements &Elements;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILBasicSegmentClock();
  virtual ~CTILBasicSegmentClock();
};
//------------------------------------------------------------------------------
class CTILSegmentClock : public CTILBasicSegmentClock
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicSegmentClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Properties
  CLPProperty<CTTime> Value;
  CLPEnumProperty<CTILTimeSource> TimeSource;

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILSegmentClock( HWND hParent );
  CTILSegmentClock();
};
//------------------------------------------------------------------------------
class CTILSegmentClockLayer : public CTILSegmentClock
{
//DOM-IGNORE-BEGIN
  typedef CTILSegmentClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILSegmentClockLayer( HWND hParent );
  CTILSegmentClockLayer();
};
//------------------------------------------------------------------------------
class CTILBasicSegmentClockElement : public CTILBasicSegmentClock
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicSegmentClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

};
//------------------------------------------------------------------------------
class CTILSegmentClockElement : public CTILBasicSegmentClockElement
{
//DOM-IGNORE-BEGIN
  typedef CTILBasicSegmentClockElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILSegmentClockElement( HWND hParent );
  CTILSegmentClockElement();
  virtual ~CTILSegmentClockElement();
};
//------------------------------------------------------------------------------
class CTILExternalSegmentClockElement : public CTILSegmentClock
{
//DOM-IGNORE-BEGIN
  typedef CTILSegmentClock inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTULElementOffsets &Position;
  class CTULElement2DSize &Size;

public:

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalSegmentClockElement( HWND hParent );
  CTILExternalSegmentClockElement();
  virtual ~CTILExternalSegmentClockElement();
};
//------------------------------------------------------------------------------
class CTILExternalSegmentClockMatrixLayer : public CTILExternalSegmentClockElement
{
//DOM-IGNORE-BEGIN
  typedef CTILExternalSegmentClockElement inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:
  virtual void Open( HWND hParent );
  virtual void Open( CLPControl &Parent );

public:
  CTILExternalSegmentClockMatrixLayer( HWND hParent );
  CTILExternalSegmentClockMatrixLayer();
};
//------------------------------------------------------------------------------
#include <CILSegmentClockCode.h>
//------------------------------------------------------------------------------
#endif   // CILSegmentClock_H_
//------------------------------------------------------------------------------
